                      (    DAGGORATH.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (    DAGGORATH.ASM):00002         ;       DUNGEONS     OF     DAGGORATH
                      (    DAGGORATH.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (    DAGGORATH.ASM):00004         ;
                      (    DAGGORATH.ASM):00005         ;         Copyright (c) 1983 - Unified Technologies, Inc.
                      (    DAGGORATH.ASM):00006         ;                       12479 Walsh Avenue
                      (    DAGGORATH.ASM):00007         ;                    Los Angeles, Calif. 90066
                      (    DAGGORATH.ASM):00008         ;
                      (    DAGGORATH.ASM):00009         ;                       Tel. (213) 822-9989
                      (    DAGGORATH.ASM):00010         ;
                      (    DAGGORATH.ASM):00011         ;
                      (    DAGGORATH.ASM):00012         ;
                      (    DAGGORATH.ASM):00013         ;                             WARNING !!!
                      (    DAGGORATH.ASM):00014         ;
                      (    DAGGORATH.ASM):00015         ;
                      (    DAGGORATH.ASM):00016         ;    No  part of this work - documents,  schematic  diagrams,
                      (    DAGGORATH.ASM):00017         ;    drawings,  printed circuit board artwork, program source
                      (    DAGGORATH.ASM):00018         ;    listings  or  object  code,   may be reproduced  by  any
                      (    DAGGORATH.ASM):00019         ;    mechanical,  photographic,  or electronic process, or in
                      (    DAGGORATH.ASM):00020         ;    the  form  of a phonographic recording,  nor may  it  be
                      (    DAGGORATH.ASM):00021         ;    stored in a retrieval system,  transmitted, or otherwise
                      (    DAGGORATH.ASM):00022         ;    copied  for public or private  use,  without  permission
                      (    DAGGORATH.ASM):00023         ;    from Unified Technologies, Inc.
                      (    DAGGORATH.ASM):00024         ;
                      (    DAGGORATH.ASM):00025         ;    This  software [and manual] are both protected  by  U.S.
                      (    DAGGORATH.ASM):00026         ;    Copyright  Law (Title 17 United States  Code).  Unautho-
                      (    DAGGORATH.ASM):00027         ;    rized  reproduction and/or sales may result in imprison-
                      (    DAGGORATH.ASM):00028         ;    ment of up to 1 year and fines of up to $10,000 (17  USC
                      (    DAGGORATH.ASM):00029         ;    506).  Copyright infringers may also be subject to civil
                      (    DAGGORATH.ASM):00030         ;    liability.
                      (    DAGGORATH.ASM):00031         ;
                      (    DAGGORATH.ASM):00032         ;    All graphic designs and displays,  technical manuals and
                      (    DAGGORATH.ASM):00033         ;    accompanying  schematic  diagrams are protected  by  the
                      (    DAGGORATH.ASM):00034         ;    U.S. Copyright Act of 1976.
                      (    DAGGORATH.ASM):00035         ;
                      (    DAGGORATH.ASM):00036         ;    This  Act provides for increased penalties for violating
                      (    DAGGORATH.ASM):00037         ;    federal  copyright laws.  Courts CAN IMPOUND  infringing
                      (    DAGGORATH.ASM):00038         ;    articles  while legal action is pending.  If  infringers
                      (    DAGGORATH.ASM):00039         ;    are convicted,  courts can ORDER DESTRUCTION of the  in-
                      (    DAGGORATH.ASM):00040         ;    fringing articles.
                      (    DAGGORATH.ASM):00041         ;
                      (    DAGGORATH.ASM):00042         ;    In  addition,  the Act provides for payment of statutory
                      (    DAGGORATH.ASM):00043         ;    damages  of up to $50,000 in certain  cases.  Infringers
                      (    DAGGORATH.ASM):00044         ;    may also have to pay costs and attorney's fees, fines of
                      (    DAGGORATH.ASM):00045         ;    up  to $25,000,  and face an imprisonment of up  to  one
                      (    DAGGORATH.ASM):00046         ;    year.
                      (    DAGGORATH.ASM):00047         ;
                      (    DAGGORATH.ASM):00048         ;    Unified Technologies, Inc. will aggressively enforce its
                      (    DAGGORATH.ASM):00049         ;    copyrights against any infringers. WE WILL USE ALL LEGAL
                      (    DAGGORATH.ASM):00050         ;    MEANS to immediately halt the manufacture, distribution,
                      (    DAGGORATH.ASM):00051         ;    illegal  use  or  operation of a copy of a  hardware  or
                      (    DAGGORATH.ASM):00052         ;    software  system made by us.  Anyone who purchases  such
                      (    DAGGORATH.ASM):00053         ;    copies risks forfeiting such a copy.
                      (    DAGGORATH.ASM):00054         ;
                      (    DAGGORATH.ASM):00055         ;
                      (    DAGGORATH.ASM):00056         ;  Acknowledgements:
                      (    DAGGORATH.ASM):00057         ;
                      (    DAGGORATH.ASM):00058         ;       This program would not have been possible without the
                      (    DAGGORATH.ASM):00059         ;  help of Doug, Phil, April, and Jim.  After almost two years, it may
                      (    DAGGORATH.ASM):00060         ;  finally get out in cartridge form...
                      (    DAGGORATH.ASM):00061         ;
                      (    DAGGORATH.ASM):00062         ;                       Thank you, thank you, thank you!
                      (    DAGGORATH.ASM):00063         ;
                      (    DAGGORATH.ASM):00064         ;                               Keith S. Kiyohara
                      (    DAGGORATH.ASM):00065         ;                               July 20, 1983
                      (    DAGGORATH.ASM):00066         ;
                      (    DAGGORATH.ASM):00067         ;; 2022-01-22 MJS These appear to be not needed - commented
                      (    DAGGORATH.ASM):00068         ;;
                      (    DAGGORATH.ASM):00069         ;;
                      (    DAGGORATH.ASM):00070         ;;   Operator synonyms
                      (    DAGGORATH.ASM):00071         ;;
                      (    DAGGORATH.ASM):00072         ;FCB     OPSYN   DB
                      (    DAGGORATH.ASM):00073         ;FDB     OPSYN   DW
                      (    DAGGORATH.ASM):00074         ;FCC     OPSYN   DB
                      (    DAGGORATH.ASM):00075         ;RMB     OPSYN   DS
                      (    DAGGORATH.ASM):00076         ;; END 2022-01-22
                      (    DAGGORATH.ASM):00077         ;
                      (    DAGGORATH.ASM):00078         ;    include all game files
                      (    DAGGORATH.ASM):00079         ;
                      (    DAGGORATH.ASM):00080         ;
                      (    DAGGORATH.ASM):00081                 ;lwasm compatibility
                      (    DAGGORATH.ASM):00082                 pragma  nodollarlocal,6809
                      (    DAGGORATH.ASM):00083         
                      (    DAGGORATH.ASM):00084                 ;Assembler listing output generally contains commented macro invocations
                      (    DAGGORATH.ASM):00085                 ;followed by the expanded form of the called macro, which is then assembled.
                      (    DAGGORATH.ASM):00086                 ;Where possible I tried to recreate original source code by un-expanding these
                      (    DAGGORATH.ASM):00087                 ;macro invocations.  Some macros had missing definitions, which were recreated.
                      (    DAGGORATH.ASM):00088                 ;Since these recreated macros were not original, I am moving them to a separate file.
                      (    DAGGORATH.ASM):00089                 include missing-macros.asm
0000                  (missing-macros.as):00001         SCHED$  MACR
                      (missing-macros.as):00002                 LDD     #(\1*256)+\2
                      (missing-macros.as):00003                 ENDM
                      (missing-macros.as):00004         
                      (missing-macros.as):00005         ;Look-down drawing method symbols referenced in macros but definitions removed
                      (missing-macros.as):00006         ;before ROM went to Radio Shack for production.
     0000             (missing-macros.as):00007         DFLASK  EQU     0
     0000             (missing-macros.as):00008         DRING   EQU     0
     0000             (missing-macros.as):00009         DSCROL  EQU     0
     0000             (missing-macros.as):00010         DSHIEL  EQU     0
     0000             (missing-macros.as):00011         DSWORD  EQU     0
     0000             (missing-macros.as):00012         DTORCH  EQU     0
                      (missing-macros.as):00013         
0000                  (missing-macros.as):00014         NOCALL  MACR
                      (missing-macros.as):00015                 ENDM
                      (missing-macros.as):00016         
0000                  (missing-macros.as):00017         ATM1    MACR
                      (missing-macros.as):00018                 FCB     1
                      (missing-macros.as):00019                 FDB     \1
                      (missing-macros.as):00020                 ENDM
                      (missing-macros.as):00021         
0000                  (missing-macros.as):00022         ATM2    MACR
                      (missing-macros.as):00023                 FCB     2
                      (missing-macros.as):00024                 FDB     \1
                      (missing-macros.as):00025                 FDB     \2
                      (missing-macros.as):00026                 ENDM
                      (missing-macros.as):00027         
0000                  (missing-macros.as):00028         ATM3    MACR
                      (missing-macros.as):00029                 FCB     3
                      (missing-macros.as):00030                 FDB     \1
                      (missing-macros.as):00031                 FDB     \2
                      (missing-macros.as):00032                 FDB     \3
                      (missing-macros.as):00033                 ENDM
                      (missing-macros.as):00034         
0000                  (missing-macros.as):00035         SVORG   MACR
0000                  (missing-macros.as):00036         SVX     SET     \1
0000                  (missing-macros.as):00037         SVY     SET     \2
                      (missing-macros.as):00038                 FCB     \1,\2,V$REL
                      (missing-macros.as):00039                 ENDM
                      (missing-macros.as):00040         
0000                  (missing-macros.as):00041         SVECT   MACR
                      (missing-macros.as):00042                 FCB     ((((\1-SVX)/2)&$000F)*16)+(((\2-SVY)/2)&$000F)
0000                  (missing-macros.as):00043         SVX     SET     \1
0000                  (missing-macros.as):00044         SVY     SET     \2
                      (missing-macros.as):00045                 ENDM
                      (missing-macros.as):00046                 
0000                  (missing-macros.as):00047         SVEND   MACR
                      (missing-macros.as):00048                 SVNEW
                      (missing-macros.as):00049                 FCB     V$END
                      (missing-macros.as):00050                 ENDM
                      (missing-macros.as):00051                 
0000                  (missing-macros.as):00052         SVNEW   MACR
                      (missing-macros.as):00053                 FCB     V$ABS
                      (missing-macros.as):00054                 ENDM
                      (    DAGGORATH.ASM):00090         
                      (    DAGGORATH.ASM):00091                 INCLUDE CD.ASM           ;Common Definition File
                      (           CD.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00002         ;  C O M M O N   D E F I N I T I O N S
                      (           CD.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00004         ;
                      (           CD.ASM):00005         ;  'CMPX' opcode
                      (           CD.ASM):00006         ;
     008C             (           CD.ASM):00007         SKIP2   EQU     $8C
                      (           CD.ASM):00008         ;
                      (           CD.ASM):00009         ;  Bit Position Mnemonics
                      (           CD.ASM):00010         ;
     0001             (           CD.ASM):00011         BIT0    EQU     %00000001
     0002             (           CD.ASM):00012         BIT1    EQU     %00000010
     0004             (           CD.ASM):00013         BIT2    EQU     %00000100
     0008             (           CD.ASM):00014         BIT3    EQU     %00001000
     0010             (           CD.ASM):00015         BIT4    EQU     %00010000
     0020             (           CD.ASM):00016         BIT5    EQU     %00100000
     0040             (           CD.ASM):00017         BIT6    EQU     %01000000
     0080             (           CD.ASM):00018         BIT7    EQU     %10000000
                      (           CD.ASM):00019         ;
                      (           CD.ASM):00020         ;
     0000             (           CD.ASM):00021         DEBFLG  EQU     0               ;debug flag.
                      (           CD.ASM):00022         
                      (           CD.ASM):00023         
                      (           CD.ASM):00024         
                      (           CD.ASM):00025         ;
                      (           CD.ASM):00026         ; ASCII Character Mnemonics
                      (           CD.ASM):00027         ;
     0000             (           CD.ASM):00028         C.NUL   EQU     $00
     0001             (           CD.ASM):00029         C.SOH   EQU     $01
     0002             (           CD.ASM):00030         C.STX   EQU     $02
     0003             (           CD.ASM):00031         C.ETX   EQU     $03
     0004             (           CD.ASM):00032         C.EOT   EQU     $04
     0005             (           CD.ASM):00033         C.ENQ   EQU     $05
     0006             (           CD.ASM):00034         C.ACK   EQU     $06
     0007             (           CD.ASM):00035         C.BEL   EQU     $07
     0008             (           CD.ASM):00036         C.BS    EQU     $08
     0009             (           CD.ASM):00037         C.HT    EQU     $09
     000A             (           CD.ASM):00038         C.LF    EQU     $0A
     000B             (           CD.ASM):00039         C.VT    EQU     $0B
     000C             (           CD.ASM):00040         C.FF    EQU     $0C
     000D             (           CD.ASM):00041         C.CR    EQU     $0D
     000E             (           CD.ASM):00042         C.SO    EQU     $0E
     000F             (           CD.ASM):00043         C.SI    EQU     $0F
     0010             (           CD.ASM):00044         C.DLE   EQU     $10
     0011             (           CD.ASM):00045         C.DC1   EQU     $11
     0012             (           CD.ASM):00046         C.DC2   EQU     $12
     0013             (           CD.ASM):00047         C.DC3   EQU     $13
     0014             (           CD.ASM):00048         C.DC4   EQU     $14
     0015             (           CD.ASM):00049         C.NAK   EQU     $15
     0016             (           CD.ASM):00050         C.SYN   EQU     $16
     0017             (           CD.ASM):00051         C.ETB   EQU     $17
     0018             (           CD.ASM):00052         C.CAN   EQU     $18
     0019             (           CD.ASM):00053         C.EM    EQU     $19
     001A             (           CD.ASM):00054         C.SUB   EQU     $1A
     001B             (           CD.ASM):00055         C.ESC   EQU     $1B
     001C             (           CD.ASM):00056         C.FS    EQU     $1C
     001D             (           CD.ASM):00057         C.GS    EQU     $1D
     001E             (           CD.ASM):00058         C.RS    EQU     $1E
     001F             (           CD.ASM):00059         C.US    EQU     $1F
     0020             (           CD.ASM):00060         C.SP    EQU     $20
     007F             (           CD.ASM):00061         C.DEL   EQU     $7F
                      (           CD.ASM):00062         
                      (           CD.ASM):00063         
                      (           CD.ASM):00064         
                      (           CD.ASM):00065         ;
                      (           CD.ASM):00066         ;  Internal Character Codes
                      (           CD.ASM):00067         ;
     0000             (           CD.ASM):00068         I.SP    EQU     $00             ;<SP> space
     001B             (           CD.ASM):00069         I.EXCL  EQU     $1B             ;exclamation point
     001C             (           CD.ASM):00070         I.BAR   EQU     $1C             ;underline
     001D             (           CD.ASM):00071         I.QUES  EQU     $1D             ;question mark
     001E             (           CD.ASM):00072         I.DOT   EQU     $1E             ;period
     001F             (           CD.ASM):00073         I.CR    EQU     $1F             ;carriage return
     0020             (           CD.ASM):00074         I.SHL   EQU     $20             ;small heart (left)
     0021             (           CD.ASM):00075         I.SHR   EQU     $21             ;small heart (right)
     0022             (           CD.ASM):00076         I.LHL   EQU     $22             ;large heart (left)
     0023             (           CD.ASM):00077         I.LHR   EQU     $23             ;large heart (right)
     0024             (           CD.ASM):00078         I.BS    EQU     $24             ;<BS> backspace
                      (           CD.ASM):00079         ;
                      (           CD.ASM):00080         ;  Display Area RAM Definitions
                      (           CD.ASM):00081         ;
     1800             (           CD.ASM):00082         G6.LEN  EQU     6144            ;length of Graphics-6 display buffers
                      (           CD.ASM):00083         ;
     1000             (           CD.ASM):00084         D0$BAS  EQU     $1000           ;Resolution Graphics-6 Display #0
     1300             (           CD.ASM):00085         D0.LEN  EQU     32*19*8         ;32 bytes * 19 lines * 8 scan lines
     2300             (           CD.ASM):00086         D0$END  EQU     D0$BAS+D0.LEN   ;ending addr
     2046             (           CD.ASM):00087         D0.SAM  EQU     $2046           ;magic SAM bits
                      (           CD.ASM):00088         ;
     2800             (           CD.ASM):00089         D1$BAS  EQU     $2800           ;Resolution Graphics-6 display buffer
     1300             (           CD.ASM):00090         D1.LEN  EQU     32*19*8         ;32 bytes * 19 lines * 8 scan lines
     3B00             (           CD.ASM):00091         D1$END  EQU     D1$BAS+D1.LEN   ;ending addr
     20A6             (           CD.ASM):00092         D1.SAM  EQU     $20A6           ;magic SAM bits!
                      (           CD.ASM):00093         
                      (           CD.ASM):00094         
                      (           CD.ASM):00095         
                      (           CD.ASM):00096         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00097         ;  V E C T O R   L I S T   C O M M A N D S
                      (           CD.ASM):00098         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00099         ;
                      (           CD.ASM):00100         ;  These are special command codes to the vector list driver:
                      (           CD.ASM):00101         ;
     00FF             (           CD.ASM):00102         V$NEW   EQU     $FF             ;start new sequence
     00FE             (           CD.ASM):00103         V$END   EQU     $FE             ;end sequence
     00FD             (           CD.ASM):00104         V$JMP   EQU     $FD             ;chain to addr specified by next word
     00FC             (           CD.ASM):00105         V$REL   EQU     $FC             ;enter short vector mode
     00FB             (           CD.ASM):00106         V$JSR   EQU     $FB             ;jump to vector list subroutine
     00FA             (           CD.ASM):00107         V$RTS   EQU     $FA             ;return from vector list subroutine
     0000             (           CD.ASM):00108         V$ABS   EQU     $00             ;return to absolute mode
                      (           CD.ASM):00109         
                      (           CD.ASM):00110         
                      (           CD.ASM):00111         
                      (           CD.ASM):00112         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00113         ;  C O L O R   C O M P U T E R   D E F I N I T I O N S
                      (           CD.ASM):00114         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00115         ;
                      (           CD.ASM):00116         ;
                      (           CD.ASM):00117         ; Condition Code Mnemonics
                      (           CD.ASM):00118         
     0080             (           CD.ASM):00119         CC.E    EQU     BIT7
     0040             (           CD.ASM):00120         CC.F    EQU     BIT6
     0020             (           CD.ASM):00121         CC.H    EQU     BIT5
     0010             (           CD.ASM):00122         CC.I    EQU     BIT4
     0008             (           CD.ASM):00123         CC.N    EQU     BIT3
     0004             (           CD.ASM):00124         CC.Z    EQU     BIT2
     0002             (           CD.ASM):00125         CC.V    EQU     BIT1
     0001             (           CD.ASM):00126         CC.C    EQU     BIT0
                      (           CD.ASM):00127         ;
                      (           CD.ASM):00128         ; Interrupt Vector Addresses
                      (           CD.ASM):00129         ;
     0100             (           CD.ASM):00130         V$SWI3  EQU     $0100
     0103             (           CD.ASM):00131         V$SWI2  EQU     $0103
     0106             (           CD.ASM):00132         V$SWI   EQU     $0106
     0109             (           CD.ASM):00133         V$NMI   EQU     $0109
     010C             (           CD.ASM):00134         V$IRQ   EQU     $010C
     010F             (           CD.ASM):00135         V$FIRQ  EQU     $010F
                      (           CD.ASM):00136         ;
                      (           CD.ASM):00137         ; BASIC ROM Routines
                      (           CD.ASM):00138         ;
     A000             (           CD.ASM):00139         POLCAT  EQU     $A000
     A002             (           CD.ASM):00140         CHROUT  EQU     $A002
     A004             (           CD.ASM):00141         CSRDON  EQU     $A004
     A006             (           CD.ASM):00142         BLKIN   EQU     $A006
     A008             (           CD.ASM):00143         BLKOUT  EQU     $A008
     A00A             (           CD.ASM):00144         JOYIN   EQU     $A00A
     A00C             (           CD.ASM):00145         WRTLDR  EQU     $A00C
                      (           CD.ASM):00146         ;
                      (           CD.ASM):00147         ; PIA Definitions
                      (           CD.ASM):00148         ;
     FF00             (           CD.ASM):00149         PIA$0   EQU     $FF00
     FF20             (           CD.ASM):00150         PIA$1   EQU     $FF20
     0000             (           CD.ASM):00151         P.PIIOA EQU     0
     0001             (           CD.ASM):00152         P.PICRA EQU     1
     0002             (           CD.ASM):00153         P.PIIOB EQU     2
     0003             (           CD.ASM):00154         P.PICRB EQU     3
                      (           CD.ASM):00155         
                      (           CD.ASM):00156         
                      (           CD.ASM):00157         
                      (           CD.ASM):00158         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00159         ;  D U N G E O N   D E F I N I T I O N S
                      (           CD.ASM):00160         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00161         ;
                      (           CD.ASM):00162         ;  Horizontal Maze Features
                      (           CD.ASM):00163         ;
     0000             (           CD.ASM):00164         HF.PAS  EQU     0               ;open passage
     0001             (           CD.ASM):00165         HF.DOR  EQU     1               ;regular door
     0002             (           CD.ASM):00166         HF.SDR  EQU     2               ;secret door
     0003             (           CD.ASM):00167         HF.WAL  EQU     3               ;solid wall
                      (           CD.ASM):00168         ;
                      (           CD.ASM):00169         ;  Vertical Maze Features
                      (           CD.ASM):00170         ;
     0000             (           CD.ASM):00171         VF.HUP  EQU     0               ;hole up
     0001             (           CD.ASM):00172         VF.LUP  EQU     1               ;ladder up
     0002             (           CD.ASM):00173         VF.HDN  EQU     2               ;hole down
     0003             (           CD.ASM):00174         VF.LDN  EQU     3               ;ladder down
                      (           CD.ASM):00175         ;
                      (           CD.ASM):00176         ;  Object Classes
                      (           CD.ASM):00177         ;
     0000             (           CD.ASM):00178         K.FLAS  EQU     0               ;flask
     0001             (           CD.ASM):00179         K.RING  EQU     1               ;ring
     0002             (           CD.ASM):00180         K.SCRO  EQU     2               ;scroll
     0003             (           CD.ASM):00181         K.SHIE  EQU     3               ;shield
     0004             (           CD.ASM):00182         K.SWOR  EQU     4               ;sword
     0005             (           CD.ASM):00183         K.TORC  EQU     5               ;torch
                      (           CD.ASM):00184         
                      (           CD.ASM):00185         
                      (           CD.ASM):00186         
                      (           CD.ASM):00187         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00188         ;  T A S K   C O N T R O L   B L O C K S
                      (           CD.ASM):00189         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     0000             (           CD.ASM):00190         OFF     SET     0
     0000             (           CD.ASM):00191         P.TCPTR EQU     OFF             ;linked list pointer
     0002             (           CD.ASM):00192         P.TCTIM EQU     OFF+2           ;countdown timer
     0003             (           CD.ASM):00193         P.TCRTN EQU     OFF+3           ;task address
     0005             (           CD.ASM):00194         P.TCDTA EQU     OFF+5           ;data block pointer
     0007             (           CD.ASM):00195         TC.LEN  EQU     OFF+7           ;length of TCB
                      (           CD.ASM):00196         ;
                      (           CD.ASM):00197         ;  Queue Disposition Codes
                      (           CD.ASM):00198         ;
     0000             (           CD.ASM):00199         Q.NUL   EQU     0               ;null queue
     0002             (           CD.ASM):00200         Q.JIF   EQU     2               ;jiffy queue
     0004             (           CD.ASM):00201         Q.TEN   EQU     4               ;tenth queue
     0006             (           CD.ASM):00202         Q.SEC   EQU     6               ;second queue
     0008             (           CD.ASM):00203         Q.MIN   EQU     8               ;minute queue
     000A             (           CD.ASM):00204         Q.HOU   EQU     10              ;hour queue
     000C             (           CD.ASM):00205         Q.SCD   EQU     12              ;scheduler queue
                      (           CD.ASM):00206         
                      (           CD.ASM):00207         
                      (           CD.ASM):00208         
                      (           CD.ASM):00209         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00210         ;  T E X T   D I S P L A Y   C O N T R O L   B L O C K S
                      (           CD.ASM):00211         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     0000             (           CD.ASM):00212         OFF     SET     0
     0000             (           CD.ASM):00213         P.TXBAS EQU     OFF             ;
     0002             (           CD.ASM):00214         P.TXCNT EQU     OFF+2           ;
     0004             (           CD.ASM):00215         P.TXCUR EQU     OFF+4           ;
     0006             (           CD.ASM):00216         P.TXINV EQU     OFF+6           ;
     0007             (           CD.ASM):00217         P.TXSGL EQU     OFF+7           ;
     0008             (           CD.ASM):00218         TX.LEN  EQU     OFF+8           ;length of TXB
                      (           CD.ASM):00219         
                      (           CD.ASM):00220         
                      (           CD.ASM):00221         
                      (           CD.ASM):00222         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00223         ;  V E C T O R   D I S P L A Y   C O N T R O L   B L O C K S
                      (           CD.ASM):00224         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     0000             (           CD.ASM):00225         OFF     SET     0
     0000             (           CD.ASM):00226         P.VDBAS EQU     OFF             ;base address
     0002             (           CD.ASM):00227         P.VDEND EQU     OFF+2           ;end address
     0004             (           CD.ASM):00228         P.VDSAM EQU     OFF+4           ;magic SAM bits
     0006             (           CD.ASM):00229         VD.LEN  EQU     OFF+6           ;length of VDB
                      (           CD.ASM):00230         
                      (           CD.ASM):00231         
                      (           CD.ASM):00232         
                      (           CD.ASM):00233         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00234         ;  A T T A C K   P A R A M E T E R   B L O C K
                      (           CD.ASM):00235         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     0000             (           CD.ASM):00236         OFF     SET     0
     0000             (           CD.ASM):00237         P.ATPOW EQU     OFF             ;power
     0002             (           CD.ASM):00238         P.ATMGO EQU     OFF+2           ;magic offense
     0003             (           CD.ASM):00239         P.ATMGD EQU     OFF+3           ;magic defense
     0004             (           CD.ASM):00240         P.ATPHO EQU     OFF+4           ;physical offense
     0005             (           CD.ASM):00241         P.ATPHD EQU     OFF+5           ;physical defense
     0006             (           CD.ASM):00242         P.ATXXX EQU     OFF+6           ;filler
     000A             (           CD.ASM):00243         P.ATDAM EQU     OFF+10          ;damage
     000C             (           CD.ASM):00244         AT.LEN  EQU     OFF+12          ;length of ATB
                      (           CD.ASM):00245         
                      (           CD.ASM):00246         
                      (           CD.ASM):00247         
                      (           CD.ASM):00248         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00249         ;  C R E A T U R E   C O N T R O L   B L O C K S
                      (           CD.ASM):00250         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00251         ;
     000C             (           CD.ASM):00252         CTYPES  EQU     12              ;number of creature types
                      (           CD.ASM):00253         ;
     0000             (           CD.ASM):00254         OFF     SET     0
     0000             (           CD.ASM):00255         P.CCPOW EQU     OFF             ;power
     0002             (           CD.ASM):00256         P.CCMGO EQU     OFF+2           ;magic offense
     0003             (           CD.ASM):00257         P.CCMGD EQU     OFF+3           ;magic defense
     0004             (           CD.ASM):00258         P.CCPHO EQU     OFF+4           ;physical offense
     0005             (           CD.ASM):00259         P.CCPHD EQU     OFF+5           ;physical defense
     0006             (           CD.ASM):00260         P.CCTMV EQU     OFF+6           ;movement delay time
     0007             (           CD.ASM):00261         P.CCTAT EQU     OFF+7           ;attack delay time
     0008             (           CD.ASM):00262         P.CCOBJ EQU     OFF+8           ;object list pointer
     000A             (           CD.ASM):00263         P.CCDAM EQU     OFF+10          ;damage
     000C             (           CD.ASM):00264         P.CCUSE EQU     OFF+12          ;"in-use" flag
     000D             (           CD.ASM):00265         P.CCTYP EQU     OFF+13          ;creature type
     000E             (           CD.ASM):00266         P.CCDIR EQU     OFF+14          ;direction of travel
     000F             (           CD.ASM):00267         P.CCROW EQU     OFF+15          ;row
     0010             (           CD.ASM):00268         P.CCCOL EQU     OFF+16          ;column
     0011             (           CD.ASM):00269         CC.LEN  EQU     OFF+17          ;length of CCB
                      (           CD.ASM):00270         
                      (           CD.ASM):00271         
                      (           CD.ASM):00272         
                      (           CD.ASM):00273         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00274         ;  C R E A T U R E   D E F I N I T I O N   B L O C K S
                      (           CD.ASM):00275         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     0000             (           CD.ASM):00276         OFF     SET     0
     0000             (           CD.ASM):00277         P.CDPOW EQU     OFF             ;power
     0002             (           CD.ASM):00278         P.CDMGO EQU     OFF+2           ;magic offense
     0003             (           CD.ASM):00279         P.CDMGD EQU     OFF+3           ;magic defense
     0004             (           CD.ASM):00280         P.CDPHO EQU     OFF+4           ;physical offense
     0005             (           CD.ASM):00281         P.CDPHD EQU     OFF+5           ;physical defense
     0006             (           CD.ASM):00282         P.CDTMV EQU     OFF+6           ;movement delay time
     0007             (           CD.ASM):00283         P.CDTAT EQU     OFF+7           ;attack delay time
     0008             (           CD.ASM):00284         CD.LEN  EQU     OFF+8           ;length of CDB
                      (           CD.ASM):00285         
                      (           CD.ASM):00286         
                      (           CD.ASM):00287         
                      (           CD.ASM):00288         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00289         ;  O B J E C T   C O N T R O L   B L O C K S
                      (           CD.ASM):00290         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     0000             (           CD.ASM):00291         OFF     SET     0
     0000             (           CD.ASM):00292         P.OCPTR EQU     OFF             ;linked list pointer
     0002             (           CD.ASM):00293         P.OCROW EQU     OFF+2           ;row
     0003             (           CD.ASM):00294         P.OCCOL EQU     OFF+3           ;column
     0004             (           CD.ASM):00295         P.OCLVL EQU     OFF+4           ;level
     0005             (           CD.ASM):00296         P.OCOWN EQU     OFF+5           ;ownership byte
     0006             (           CD.ASM):00297         P.OCXXX EQU     OFF+6           ;type bytes
     0009             (           CD.ASM):00298         P.OCTYP EQU     OFF+9           ;object type
     000A             (           CD.ASM):00299         P.OCCLS EQU     OFF+10          ;object class
     000B             (           CD.ASM):00300         P.OCREV EQU     OFF+11          ;revelation power requirement
     000C             (           CD.ASM):00301         P.OCMGO EQU     OFF+12          ;magic offense
     000D             (           CD.ASM):00302         P.OCPHO EQU     OFF+13          ;physical offense
     000E             (           CD.ASM):00303         OC.LEN  EQU     OFF+14          ;length of OCB
                      (           CD.ASM):00304         
                      (           CD.ASM):00305         
                      (           CD.ASM):00306         
                      (           CD.ASM):00307         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00308         ;  O B J E C T   D E F I N I T I O N   B L O C K S
                      (           CD.ASM):00309         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     0000             (           CD.ASM):00310         OFF     SET     0
     0000             (           CD.ASM):00311         P.ODCLS EQU     OFF             ;object class
     0001             (           CD.ASM):00312         P.ODREV EQU     OFF+1           ;revelation power requirement
     0002             (           CD.ASM):00313         P.ODMGO EQU     OFF+2           ;magic offense
     0003             (           CD.ASM):00314         P.ODPHO EQU     OFF+3           ;physical offense
     0004             (           CD.ASM):00315         OD.LEN  EQU     OFF+4           ;length of ODB
                      (           CD.ASM):00316         
                      (           CD.ASM):00317         
                      (           CD.ASM):00318         
                      (           CD.ASM):00319         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00320         ;  D I R E C T   P A G E   D E F I N I T I O N S
                      (           CD.ASM):00321         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00322         ;
                      (           CD.ASM):00323                 ORG     $0200           ;where our DP resides
     02               (           CD.ASM):00324                         SETDP   $02             ;tell the assembler
                      (           CD.ASM):00325         ;
                      (           CD.ASM):00326         ;
     0200             (           CD.ASM):00327         DP.BEG  EQU     *               ;first location in DP
                      (           CD.ASM):00328         ;
                      (           CD.ASM):00329         ;  RAM Initialized by ONCE
                      (           CD.ASM):00330         ;
0200                  (           CD.ASM):00331         BIGZER  RMB     1               ;overlapped 16-bit zero
0201                  (           CD.ASM):00332         BIGONE  RMB     2               ;overlapped 16-bit one
0203                  (           CD.ASM):00333         NEGONE  RMB     2               ;16-bit negative one
0205                  (           CD.ASM):00334         VCNTRX  RMB     2               ;X-coordinate of centroid
0207                  (           CD.ASM):00335         VCNTRY  RMB     2               ;Y-coordinate of centroid
                      (           CD.ASM):00336         ;
0209                  (           CD.ASM):00337         FLIP    RMB     2               ;pointer to VDB on display
020B                  (           CD.ASM):00338         FLOP    RMB     2               ;pointer to VDB being updated
                      (           CD.ASM):00339         ;
020D                  (           CD.ASM):00340         AUTPTR  RMB     2               ;index into AUTTAB
020F                  (           CD.ASM):00341         OCBPTR  RMB     2               ;index into OCBLND
0211                  (           CD.ASM):00342         LINPTR  RMB     2               ;index into LINBUF
                      (           CD.ASM):00343         ;
0213                  (           CD.ASM):00344         PROW    RMB     1               ;player position
0214                  (           CD.ASM):00345         PCOL    RMB     1               ;   .
0215                  (           CD.ASM):00346         POBJWT  RMB     2               ;weight of all objects
     0217             (           CD.ASM):00347         PLRBLK  EQU     *               ;player ATB base addr
0217                  (           CD.ASM):00348         PPOW    RMB     2               ;power
                      (           CD.ASM):00349         ;
0219                  (           CD.ASM):00350         PMGO    RMB     1               ;magic offense
021A                  (           CD.ASM):00351         PMGD    RMB     1               ;magic defense
021B                  (           CD.ASM):00352         PPHO    RMB     1               ;physical offense
021C                  (           CD.ASM):00353         PPHD    RMB     1               ;physical defense
021D                  (           CD.ASM):00354         PLHAND  RMB     2               ;left hand
021F                  (           CD.ASM):00355         PRHAND  RMB     2               ;right hand
0221                  (           CD.ASM):00356         PDAM    RMB     2               ;damage
                      (           CD.ASM):00357         ;
0223                  (           CD.ASM):00358         PDIR    RMB     1               ;player facing direction
0224                  (           CD.ASM):00359         PTORCH  RMB     2               ;torch in use
0226                  (           CD.ASM):00360         PRLITE  RMB     1               ;regular light
0227                  (           CD.ASM):00361         PMLITE  RMB     1               ;magic light
0228                  (           CD.ASM):00362         FAINT   RMB     1               ;non-zero means we have fainted
0229                  (           CD.ASM):00363         BAGPTR  RMB     2               ;what we are carrying
022B                  (           CD.ASM):00364         FRZFLG  RMB     1               ;"freeze" all creatures flag
                      (           CD.ASM):00365         
                      (           CD.ASM):00366         
                      (           CD.ASM):00367         
                      (           CD.ASM):00368         ;
                      (           CD.ASM):00369         ;  VDG (MC6847) Control RAM
                      (           CD.ASM):00370         ;
022C                  (           CD.ASM):00371         VDGINV  RMB     1               ;Inverse Video Mode
                      (           CD.ASM):00372         ;                               ;   0 = Light on Dark
                      (           CD.ASM):00373         ;                               ;  -1 = Dark on Light
                      (           CD.ASM):00374         ;
                      (           CD.ASM):00375         ;  VECTOR Generator RAM
                      (           CD.ASM):00376         ;
022D                  (           CD.ASM):00377         VCTFAD  RMB     1               ;amount of fade ($FF - invisible)
022E                  (           CD.ASM):00378         FADCNT  RMB     1               ;fade count (used by VECTOR)
                      (           CD.ASM):00379         ;
022F                  (           CD.ASM):00380         Y0      RMB     2               ;starting Y
0231                  (           CD.ASM):00381         X0      RMB     2               ;starting X
0233                  (           CD.ASM):00382         Y1      RMB     2               ;ending Y
0235                  (           CD.ASM):00383         X1      RMB     2               ;ending X
                      (           CD.ASM):00384         ;
0237                  (           CD.ASM):00385         XX      RMB     3               ;running-X coordinate
023A                  (           CD.ASM):00386         YY      RMB     3               ;running-Y coordinate
023D                  (           CD.ASM):00387         DX      RMB     3               ;running-X increment
0240                  (           CD.ASM):00388         DY      RMB     3               ;running-Y increment
                      (           CD.ASM):00389         ;
0243                  (           CD.ASM):00390         LENGTH  RMB     2               ;dot count
0245                  (           CD.ASM):00391         DELTAX  RMB     1               ;display-X address change
0246                  (           CD.ASM):00392         DELTAY  RMB     1               ;display-Y address change
0247                  (           CD.ASM):00393         VDBAS   RMB     2               ;display base addr
0249                  (           CD.ASM):00394         VDEND   RMB     2               ;display end addr
                      (           CD.ASM):00395         ;
                      (           CD.ASM):00396         ;  VCTLST (Vector List Processor) RAM
                      (           CD.ASM):00397         ;
024B                  (           CD.ASM):00398         VXOFF   RMB     2               ;X-offset value
024D                  (           CD.ASM):00399         VYOFF   RMB     2               ;Y-offset value
024F                  (           CD.ASM):00400         VXSCAL  RMB     1               ;multiplicative scale factor in X
0250                  (           CD.ASM):00401         VYSCAL  RMB     1               ;multiplicative scale factor in Y
                      (           CD.ASM):00402         ;
0251                  (           CD.ASM):00403         DRWFLG  RMB     1               ;flag indicates if starting (Y,X) set
0252                  (           CD.ASM):00404         TX      RMB     2               ;true X
0254                  (           CD.ASM):00405         TY      RMB     2               ;true Y
                      (           CD.ASM):00406         ;
                      (           CD.ASM):00407         ;  Sound Generator RAM
                      (           CD.ASM):00408         ;
     0256             (           CD.ASM):00409         SNDRAM  EQU     *               ;where sound RAM starts
0256                  (           CD.ASM):00410         SNDRND  RMB     3               ;sound random number generator
0259                  (           CD.ASM):00411         SNSAV   RMB     2               ;scratch area
025B                  (           CD.ASM):00412         SNENVS  RMB     2               ;envelope generator start
025D                  (           CD.ASM):00413         SNENVD  RMB     2               ;envelope generator delta
025F                  (           CD.ASM):00414         SNSAVA  RMB     2               ;alternate save location
0261                  (           CD.ASM):00415         SNVOL   RMB     1               ;volume level
0262                  (           CD.ASM):00416         SNDLAY  RMB     1               ;RC circuit delay
0263                  (           CD.ASM):00417         FREQ1   RMB     2               ;storage
0265                  (           CD.ASM):00418         FREQ2   RMB     2               ;storage
0267                  (           CD.ASM):00419         SNOTE1  RMB     2               ;music note 1
0269                  (           CD.ASM):00420         SNOTE2  RMB     2               ;music note 2
                      (           CD.ASM):00421         ;
                      (           CD.ASM):00422         ; Random Number Generator RAM
                      (           CD.ASM):00423         ;
026B                  (           CD.ASM):00424         SEED    RMB     3               ;General Purpose Random Number
                      (           CD.ASM):00425         
                      (           CD.ASM):00426         
                      (           CD.ASM):00427         
                      (           CD.ASM):00428         ;
                      (           CD.ASM):00429         ; Dungeon Viewer RAM definitions
                      (           CD.ASM):00430         ;
026E                  (           CD.ASM):00431         RLIGHT  RMB     1               ;regular light
026F                  (           CD.ASM):00432         MLIGHT  RMB     1               ;magic light
0270                  (           CD.ASM):00433         OLIGHT  RMB     1               ;old lighting value (fainting)
0271                  (           CD.ASM):00434         OROW    RMB     1               ;row
0272                  (           CD.ASM):00435         OCOL    RMB     1               ;column
0273                  (           CD.ASM):00436         HLFSTP  RMB     1               ;half-step forward flag
0274                  (           CD.ASM):00437         BAKSTP  RMB     1               ;half-step backward flag
0275                  (           CD.ASM):00438         MAGFLG  RMB     1               ;magic light flag
0276                  (           CD.ASM):00439         PASFLG  RMB     1               ;passage flag used for peek-a-boo
0277                  (           CD.ASM):00440         AUTFLG  RMB     1               ;auto-play flag
                      (           CD.ASM):00441         ;
                      (           CD.ASM):00442         ; Parser Ram
                      (           CD.ASM):00443         ;
0278                  (           CD.ASM):00444         PARFLG  RMB     1               ;successful match flag
0279                  (           CD.ASM):00445         PARCNT  RMB     1               ;loop counter
027A                  (           CD.ASM):00446         VERIFY  RMB     1               ;verify on/off flag
027B                  (           CD.ASM):00447         FULFLG  RMB     1               ;full word match
                      (           CD.ASM):00448         ;
                      (           CD.ASM):00449         ; Dungeon Generator RAM definitions
                      (           CD.ASM):00450         ;
027C                  (           CD.ASM):00451         DROW    RMB     1               ;row
027D                  (           CD.ASM):00452         DCOL    RMB     1               ;column
027E                  (           CD.ASM):00453         DST     RMB     1               ;distance to travel
027F                  (           CD.ASM):00454         CELCNT  RMB     2               ;number of cells created
0281                  (           CD.ASM):00455         LEVEL   RMB     1               ;maze level value
0282                  (           CD.ASM):00456         CMXPTR  RMB     2               ;index into CMXLND
0284                  (           CD.ASM):00457         LVLPTR  RMB     2               ;index into LVLVDG
0286                  (           CD.ASM):00458         VFTPTR  RMB     2               ;index into VFTTAB
                      (           CD.ASM):00459         ;
                      (           CD.ASM):00460         ;  Dungeon Subroutine Parameters
0288                  (           CD.ASM):00461         ROW     RMB     1               ;row position
0289                  (           CD.ASM):00462         COL     RMB     1               ;column position
028A                  (           CD.ASM):00463         DIR     RMB     1               ;temp dir holder
028B                  (           CD.ASM):00464         RANGE   RMB     1               ;temp sight range holder
                      (           CD.ASM):00465         ;
                      (           CD.ASM):00466         ;  Object Subroutine Parameters
                      (           CD.ASM):00467         ;
028C                  (           CD.ASM):00468         OBJCNT  RMB     1               ;used by ONCE (object distribution)
028D                  (           CD.ASM):00469         OBJLVL  RMB     1               ;used by ONCE (object distribution)
028E                  (           CD.ASM):00470         OBJTYP  RMB     1               ;object type
028F                  (           CD.ASM):00471         OBJCLS  RMB     1               ;object class
0290                  (           CD.ASM):00472         SPEFLG  RMB     1               ;specific object flag
0291                  (           CD.ASM):00473         OFINDF  RMB     1               ;OCB table ptr "rewind" flag
0292                  (           CD.ASM):00474         OFINDP  RMB     2               ;OCB table ptr
0294                  (           CD.ASM):00475         MAPFLG  RMB     1               ;used by scrolls
                      (           CD.ASM):00476         
                      (           CD.ASM):00477         
                      (           CD.ASM):00478         
                      (           CD.ASM):00479         ;
                      (           CD.ASM):00480         ;  CLOCK RAM
                      (           CD.ASM):00481         ;
     0295             (           CD.ASM):00482         TIMBEG  EQU     *               ;where the timers live
0295                  (           CD.ASM):00483         JIFFY   RMB     1               ;JIFFY counter
0296                  (           CD.ASM):00484         TENTH   RMB     1               ;TENTH counter
0297                  (           CD.ASM):00485         SECOND  RMB     1               ;SECOND counter
0298                  (           CD.ASM):00486         MINUTE  RMB     1               ;MINUTE counter
0299                  (           CD.ASM):00487         HOUR    RMB     1               ;HOUR counter
029A                  (           CD.ASM):00488         DAY     RMB     1               ;DAY counter
     029B             (           CD.ASM):00489         TIMEND  EQU     *               ;end of timers
                      (           CD.ASM):00490         ;
029B                  (           CD.ASM):00491         SLEEP   RMB     1               ;system SLEEP counter
029C                  (           CD.ASM):00492         NOISEF  RMB     1               ;noise flag
029D                  (           CD.ASM):00493         NOISEV  RMB     1               ;noise value
029E                  (           CD.ASM):00494         FADFLG  RMB     1               ;wizard fade-in flag
                      (           CD.ASM):00495         ;
                      (           CD.ASM):00496         ;  Queue Pointers
                      (           CD.ASM):00497         ;
     029F             (           CD.ASM):00498         QUEBEG  EQU     *               ;where the queue ptrs live
029F                  (           CD.ASM):00499         NULQUE  RMB     2               ;NULL queue
02A1                  (           CD.ASM):00500         JIFQUE  RMB     2               ;JIFFY queue
02A3                  (           CD.ASM):00501         TENQUE  RMB     2               ;TENth of a second queue
02A5                  (           CD.ASM):00502         SECQUE  RMB     2               ;SECOND queue
02A7                  (           CD.ASM):00503         MINQUE  RMB     2               ;MINUTE queue
02A9                  (           CD.ASM):00504         HOUQUE  RMB     2               ;HOUR queue
02AB                  (           CD.ASM):00505         SCDQUE  RMB     2               ;scheduler queue
     02AD             (           CD.ASM):00506         QUEEND  EQU     *               ;end of queue ptrs
                      (           CD.ASM):00507         ;
                      (           CD.ASM):00508         ;  Heart Ram
                      (           CD.ASM):00509         ;
02AD                  (           CD.ASM):00510         HEARTF  RMB     1               ;heart beat (on/off)
02AE                  (           CD.ASM):00511         HEARTC  RMB     1               ;visual heartbeat countdown counter
02AF                  (           CD.ASM):00512         HEARTR  RMB     1               ;current heart rate
02B0                  (           CD.ASM):00513         HEARTS  RMB     1               ;heart size flag
02B1                  (           CD.ASM):00514         HBEATF  RMB     1               ;audio heartbeat flag
                      (           CD.ASM):00515         ;
                      (           CD.ASM):00516         ;  Display Mode RAM
                      (           CD.ASM):00517         ;
02B2                  (           CD.ASM):00518         DSPMOD  RMB     2               ;display routine in use
02B4                  (           CD.ASM):00519         UPDATE  RMB     1               ;"need to update" flag
02B5                  (           CD.ASM):00520         NEWLUK  RMB     1               ;delayed update flag
02B6                  (           CD.ASM):00521         NEWLIN  RMB     1               ;used by EXAMINE function
02B7                  (           CD.ASM):00522         TXBFLG  RMB     1               ;standard/non-standard i/o flag
                      (           CD.ASM):00523         ;
                      (           CD.ASM):00524         ;  LOAD/SAVE Cassette Function Flags
                      (           CD.ASM):00525         ;
02B8                  (           CD.ASM):00526         ZFLAG   RMB     1               ;load/save (-1/1) flag
                      (           CD.ASM):00527         ;
                      (           CD.ASM):00528         ;  SCHEDuler RAM
                      (           CD.ASM):00529         ;
02B9                  (           CD.ASM):00530         TCBPTR  RMB     2               ;next available TCB
02BB                  (           CD.ASM):00531         RSTART  RMB     1               ;scheduler restart flag
02BC                  (           CD.ASM):00532         KBDHDR  RMB     1               ;"put" pointer
02BD                  (           CD.ASM):00533         KBDTAL  RMB     1               ;"get" pointer
                      (           CD.ASM):00534         
                      (           CD.ASM):00535         
                      (           CD.ASM):00536         
                      (           CD.ASM):00537         ;
                      (           CD.ASM):00538         ;  Line Buffer Routine RAM
                      (           CD.ASM):00539         ;
02BE                  (           CD.ASM):00540         BUFFLG  RMB     1               ;line buffering flag
                      (           CD.ASM):00541         ;
                      (           CD.ASM):00542         ;  COMSWI RAM
                      (           CD.ASM):00543         ;
02BF                  (           CD.ASM):00544         SWIJMP  RMB     2               ;dispatch addr
                      (           CD.ASM):00545         ;
                      (           CD.ASM):00546         ;  Temporary Storage
                      (           CD.ASM):00547         ;
02C1                  (           CD.ASM):00548         T0      RMB     1
02C2                  (           CD.ASM):00549         T1      RMB     1
02C3                  (           CD.ASM):00550         T2      RMB     1
02C4                  (           CD.ASM):00551         T3      RMB     1
02C5                  (           CD.ASM):00552         T4      RMB     1
02C6                  (           CD.ASM):00553         T5      RMB     1
02C7                  (           CD.ASM):00554         T6      RMB     1
02C8                  (           CD.ASM):00555         T7      RMB     1
                      (           CD.ASM):00556         ;
                      (           CD.ASM):00557         ;  Debugging Storage
                      (           CD.ASM):00558         ;
02C9                  (           CD.ASM):00559         D0      RMB     1
02CA                  (           CD.ASM):00560         D1      RMB     1
02CB                  (           CD.ASM):00561         D2      RMB     1
02CC                  (           CD.ASM):00562         D3      RMB     1
02CD                  (           CD.ASM):00563         D4      RMB     1
02CE                  (           CD.ASM):00564         D5      RMB     1
02CF                  (           CD.ASM):00565         D6      RMB     1
02D0                  (           CD.ASM):00566         D7      RMB     1
                      (           CD.ASM):00567         ;
                      (           CD.ASM):00568         ;  Insure Base Page RAM Size
                      (           CD.ASM):00569         ;
     02D1             (           CD.ASM):00570         DP.END  EQU     *               ;last location of direct page
     00D1             (           CD.ASM):00571         DP.LEN  EQU     DP.END-DP.BEG   ;length of DP definitions
                      (           CD.ASM):00572         
                      (           CD.ASM):00573         
                      (           CD.ASM):00574         
                      (           CD.ASM):00575         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00576         ;  C O M M O N   R A M   L O C A T I O N S
                      (           CD.ASM):00577         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           CD.ASM):00578         ;
     02D1             (           CD.ASM):00579         MM.BEG  EQU     *               ;where memory begins
                      (           CD.ASM):00580         ;
                      (           CD.ASM):00581         ;  ASCII Character Buffers
                      (           CD.ASM):00582         ;
02D1                  (           CD.ASM):00583         KBDBUF  RMB     32              ;keyboard circular buffer
02F1                  (           CD.ASM):00584         LINBUF  RMB     32              ;line input buffer
0311                  (           CD.ASM):00585         LINEND  RMB     2               ;line buffer end
0313                  (           CD.ASM):00586         TOKEN   RMB     32              ;token buffer
0333                  (           CD.ASM):00587         TOKEND  RMB     1               ;token buffer end
0334                  (           CD.ASM):00588         STRING  RMB     34              ;ASCII string buffer
0356                  (           CD.ASM):00589         SWCHAR  RMB     10              ;S/W character expansion buffer
0360                  (           CD.ASM):00590         OBJSTR  RMB     32              ;object string names
                      (           CD.ASM):00591         ;
                      (           CD.ASM):00592         ;  Text Control Blocks (TXB)
                      (           CD.ASM):00593         ;
0380                  (           CD.ASM):00594         TXTEXA  RMB     TX.LEN          ;EXAMINE command text screen
0388                  (           CD.ASM):00595         TXTSTS  RMB     TX.LEN          ;Status Line
0390                  (           CD.ASM):00596         TXTPRI  RMB     TX.LEN          ;Primary Text Screen
                      (           CD.ASM):00597         ;
                      (           CD.ASM):00598         ;  Creature Matrix/Control Block (CCB) Storage
                      (           CD.ASM):00599         ;
0398                  (           CD.ASM):00600         CMXLND  RMB     CTYPES*5        ;creature matrix
     03D4             (           CD.ASM):00601         CMXEND  EQU     *               ;   .
                      (           CD.ASM):00602         ;
03D4                  (           CD.ASM):00603         CCBLND  RMB     CC.LEN*32       ;Land of the Creatures
     05F4             (           CD.ASM):00604         CCBEND  EQU     *               ;   .
                      (           CD.ASM):00605         ;
                      (           CD.ASM):00606         ;  Dungeon Maze RAM
                      (           CD.ASM):00607         ;
05F4                  (           CD.ASM):00608         MAZLND  RMB     32*32           ;The "Maze"
     09F4             (           CD.ASM):00609         MAZEND  EQU     *               ;   .
                      (           CD.ASM):00610         ;
09F4                  (           CD.ASM):00611         NEIBOR  RMB     9               ;map of surrounding cells
                      (           CD.ASM):00612         ;
                      (           CD.ASM):00613         ;  Task Control Block Storage
                      (           CD.ASM):00614         ;
09FD                  (           CD.ASM):00615         TCBLND  RMB     TC.LEN*38       ;Land of the TCBs
     0B07             (           CD.ASM):00616         TCBEND  EQU     *               ;   .
                      (           CD.ASM):00617         ;
                      (           CD.ASM):00618         ;  Object Control Block  (OCB) Storage
                      (           CD.ASM):00619         ;
0B07                  (           CD.ASM):00620         EMPHND  RMB     OC.LEN          ;empty hand holder
                      (           CD.ASM):00621         ;
0B15                  (           CD.ASM):00622         OCBLND  RMB     OC.LEN*72       ;Land of the OCBs
     0F05             (           CD.ASM):00623         OCBEND  EQU     *               ;   .
                      (           CD.ASM):00624         ;
     0F05             (           CD.ASM):00625         MM.END  EQU     *               ;last location of memory
                      (           CD.ASM):00626         
                      (           CD.ASM):00627         
                      (           CD.ASM):00628         
                      (           CD.ASM):00629         ;
                      (           CD.ASM):00630         ;  Stack Area
                      (           CD.ASM):00631         ;
     1000             (           CD.ASM):00632         PDL     EQU     $1000           ;where the push-down-list starts
     00FB             (           CD.ASM):00633         PD.LEN  EQU     $1000-MM.END    ;length of push-down list
                      (           CD.ASM):00634         ;
                      (           CD.ASM):00635         ;;;;;        END
                      (    DAGGORATH.ASM):00092                 INCLUDE ONCE.ASM         ;Once only Initialization
                      (         ONCE.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         ONCE.ASM):00002         ;  O N C E - O N L Y   I N I T I A L Z I A T I O N
                      (         ONCE.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         ONCE.ASM):00004         ;
                      (         ONCE.ASM):00005         ;
                      (         ONCE.ASM):00006         ;  ONCE: Once-only Initialization
                      (         ONCE.ASM):00007         ;
                      (         ONCE.ASM):00008                 ORG     $C000
     C000             (         ONCE.ASM):00009         ONCE    EQU     *               ;in the beginning...
                      (         ONCE.ASM):00010         ;
                      (         ONCE.ASM):00011         ;  DEMO/GAME Start-Up
                      (         ONCE.ASM):00012         ;
C000 CEC0D1           (         ONCE.ASM):00013         DEMO    LDU     #DEMO10         ;initialize RAM
C003 2003             (         ONCE.ASM):00014                 BRA     COMINI          ;    .
                      (         ONCE.ASM):00015         ;
C005 CEC124           (         ONCE.ASM):00016         GAME    LDU     #GAME10         ;initialize RAM/fall into COMINI
                      (         ONCE.ASM):00017         
                      (         ONCE.ASM):00018         
                      (         ONCE.ASM):00019         
                      (         ONCE.ASM):00020         ;
                      (         ONCE.ASM):00021         ;  COMINI: Common Initialization Routine
                      (         ONCE.ASM):00022         ;
                      (         ONCE.ASM):00023         ;  Inputs:
                      (         ONCE.ASM):00024         ;       U - return addr
                      (         ONCE.ASM):00025         ;
     C008             (         ONCE.ASM):00026         COMINI  EQU     *               ;--- start of procedure COMINI
C008 10CE1000         (         ONCE.ASM):00027                 LDS     #PDL            ;set stack pointer
                      (         ONCE.ASM):00028         ;  Program PIA$0
                      (         ONCE.ASM):00029         ;
C00C 8EFF00           (         ONCE.ASM):00030                 LDX     #PIA$0          ;PIA$0 addr
C00F CC34FA           (         ONCE.ASM):00031                 LDD     #$34FA          ;bit patterns
C012 A703             (         ONCE.ASM):00032                 STA     P.PICRB,X       ;SEL2=0, Disable IRQ to CPU
C014 A701             (         ONCE.ASM):00033                 STA     P.PICRA,X       ;SEL1=0, Disable IRQ to CPU
                      (         ONCE.ASM):00034         ;
                      (         ONCE.ASM):00035         ;  Program PIA$1
                      (         ONCE.ASM):00036         ;
C016 8EFF20           (         ONCE.ASM):00037                 LDX     #PIA$1          ;PIA$1 addr
C019 A701             (         ONCE.ASM):00038                 STA     P.PICRA,X       ;Cassette Motor OFF, Disable FIRQ to CPU
C01B 6F03             (         ONCE.ASM):00039                 CLR     P.PICRB,X       ;program inputs/outputs
C01D E702             (         ONCE.ASM):00040                 STB     P.PIIOB,X       ;Outputs: VDG(b7-b3), 1-Bit Sound(b1)
C01F 863C             (         ONCE.ASM):00041                 LDA     #$3C            ;Six Bit Sounds ON, Disable FIRQ to CPU
C021 A703             (         ONCE.ASM):00042                 STA     P.PICRB,X       ;   .
                      (         ONCE.ASM):00043         ;
                      (         ONCE.ASM):00044         ;  Set SAM and VDG modes
                      (         ONCE.ASM):00045         ;
C023 CC2046           (         ONCE.ASM):00046                 LDD     #D0.SAM         ;magic SAM bits!
C026 BDC26A           (         ONCE.ASM):00047                 JSR     SAM             ;turn on graphics screen
C029 86F8             (         ONCE.ASM):00048                 LDA     #%11111000      ;insure VDG and SAM are in sync
C02B A702             (         ONCE.ASM):00049                 STA     P.PIIOB,X       ;   .
                      (         ONCE.ASM):00050         ;
                      (         ONCE.ASM):00051         ;  Zero All Of RAM
                      (         ONCE.ASM):00052         ;
C02D 8E0200           (         ONCE.ASM):00053                 LDX     #$0200          ;clear all of our RAM
C030 6F80             (         ONCE.ASM):00054         CINI10  CLR     ,X+             ;zero next location
C032 8C4000           (         ONCE.ASM):00055                 CMPX    #$4000          ;done yet?
C035 25F9             (         ONCE.ASM):00056                 BLO     CINI10          ;   nope
                      (         ONCE.ASM):00057         ;
C037 EFE3             (         ONCE.ASM):00058                 STU     ,--S            ;stack return addr
C039 8602             (         ONCE.ASM):00059                 LDA     #2              ;org the DP @ $0200
C03B 1F8B             (         ONCE.ASM):00060                 TFR     A,DP            ;   .
                      (         ONCE.ASM):00061         ;
                      (         ONCE.ASM):00062         ;  Initialize RAM Locations
                      (         ONCE.ASM):00063         ;
C03D 108ED81F         (         ONCE.ASM):00064                 LDY     #RAMDAT         ;RAM initialization start addr
C041 A6A0             (         ONCE.ASM):00065         CINI20  LDA     ,Y+             ;load byte count
C043 2741             (         ONCE.ASM):00066                 BEQ     CINI40          ;   we are done
C045 AEA1             (         ONCE.ASM):00067                 LDX     ,Y++            ;load addr
C047 8D02             (         ONCE.ASM):00068                 BSR     COPY            ;invoke copy function
C049 20F6             (         ONCE.ASM):00069                 BRA     CINI20          ;loop
                      (         ONCE.ASM):00070         
                      (         ONCE.ASM):00071         
                      (         ONCE.ASM):00072         
                      (         ONCE.ASM):00073         ;
                      (         ONCE.ASM):00074         ;   COPY: Byte Copy Routine
                      (         ONCE.ASM):00075         ;
                      (         ONCE.ASM):00076         ;  Inputs:
                      (         ONCE.ASM):00077         ;       A - Byte Count
                      (         ONCE.ASM):00078         ;       X - Destination Addr
                      (         ONCE.ASM):00079         ;       Y - Source Addr
                      (         ONCE.ASM):00080         ;  Returns:
                      (         ONCE.ASM):00081         ;       A - Zero
                      (         ONCE.ASM):00082         ;       X - Destination Addr + Byte Count
                      (         ONCE.ASM):00083         ;       Y - Source Addr + Byte Count
                      (         ONCE.ASM):00084         ;
C04B E6A0             (         ONCE.ASM):00085         COPY    LDB     ,Y+             ;load source byte
C04D E780             (         ONCE.ASM):00086                 STB     ,X+             ;store into destination
C04F 4A               (         ONCE.ASM):00087                 DECA                    ;decrement byte count
C050 26F9             (         ONCE.ASM):00088                 BNE     COPY            ;round and round
C052 39               (         ONCE.ASM):00089                 RTS                     ;bye
                      (         ONCE.ASM):00090         ;
                      (         ONCE.ASM):00091         ;  SYSTCB: Create System TCBs
                      (         ONCE.ASM):00092         ;
                      (         ONCE.ASM):00093         ;  Returns:
                      (         ONCE.ASM):00094         ;       Y - ptr to RAM initialization data
                      (         ONCE.ASM):00095         ;
C053 3477             (         ONCE.ASM):00096         SYSTCB  PSHS    CC,A,B,X,Y,U    ;save regs
C055 1A10             (         ONCE.ASM):00097                 ORCC    #CC.I           ;disable interrupts
C057 8E029F           (         ONCE.ASM):00098                 LDX     #QUEBEG         ;reset all queue ptrs
C05A 6F80             (         ONCE.ASM):00099         STCB10  CLR     ,X+             ;   .
C05C 8C02AD           (         ONCE.ASM):00100                 CMPX    #QUEEND         ;   .
C05F 25F9             (         ONCE.ASM):00101                 BLO     STCB10          ;   .
                      (         ONCE.ASM):00102         ;
C061 8E09FD           (         ONCE.ASM):00103                 LDX     #TCBLND         ;reinitialize TCB area
C064 9FB9             (         ONCE.ASM):00104                 STX     TCBPTR          ;   .
C066 6F80             (         ONCE.ASM):00105         STCB20  CLR     ,X+             ;   .
C068 8C0B07           (         ONCE.ASM):00106                 CMPX    #TCBEND         ;   .
C06B 25F9             (         ONCE.ASM):00107                 BLO     STCB20          ;   .
                      (         ONCE.ASM):00108         ;
C06D 108ED813         (         ONCE.ASM):00109                 LDY     #TCBDAT         ;where TCB data resides
C071 0ABB             (         ONCE.ASM):00110                 DEC     RSTART          ;flag SCHEDULER restart
C073 CC000C           (         ONCE.ASM):00111                 LDD     #Q.SCD          ;TCBs start in SCHEDuler queue
                      (         ONCE.ASM):00112         ;
C076 AEA1             (         ONCE.ASM):00113         STCB30  LDX     ,Y++            ;load routine name
C078 270A             (         ONCE.ASM):00114                 BEQ     STCB99          ;   done
C07A BDC260           (         ONCE.ASM):00115                 JSR     GETTCB          ;allocate a new TCB
C07D AF43             (         ONCE.ASM):00116                 STX     P.TCRTN,U       ;store in TCB
C07F BDC221           (         ONCE.ASM):00117                 JSR     QUEADD          ;add TCB to the correct queue
C082 20F2             (         ONCE.ASM):00118                 BRA     STCB30          ;loop for next TCB
                      (         ONCE.ASM):00119         ;
C084 35F7             (         ONCE.ASM):00120         STCB99  PULS    CC,A,B,X,Y,U,PC ;restore regs/exit
                      (         ONCE.ASM):00121         
                      (         ONCE.ASM):00122         
                      (         ONCE.ASM):00123         
                      (         ONCE.ASM):00124         ;
                      (         ONCE.ASM):00125         ;  Create All Objects
                      (         ONCE.ASM):00126         ;
C086 8DCB             (         ONCE.ASM):00127         CINI40  BSR     SYSTCB          ;create system TCBs
C088 CEDAC8           (         ONCE.ASM):00128                 LDU     #OMXTAB         ;distribution table base addr
C08B 4F               (         ONCE.ASM):00129                 CLRA                    ;reset object type
                      (         ONCE.ASM):00130         ;
C08C E6C4             (         ONCE.ASM):00131         CINI42  LDB     ,U              ;load entry
C08E C40F             (         ONCE.ASM):00132                 ANDB    #$0F            ;separate object count
C090 D78C             (         ONCE.ASM):00133                 STB     OBJCNT          ;   .
                      (         ONCE.ASM):00134         ;
C092 E6C0             (         ONCE.ASM):00135                 LDB     ,U+             ;re-load entry/advance ptr
C094 54               (         ONCE.ASM):00136                 LSRB                    ;extract maximum object level
C095 54               (         ONCE.ASM):00137                 LSRB                    ;   .
C096 54               (         ONCE.ASM):00138                 LSRB                    ;   .
C097 54               (         ONCE.ASM):00139                 LSRB                    ;   .
C098 D78D             (         ONCE.ASM):00140                 STB     OBJLVL          ;   .
                      (         ONCE.ASM):00141         ;
C09A 3F               (         ONCE.ASM):00142         CINI44  SWI                     ;create the object
C09B 17               (         ONCE.ASM):00143                 FCB     OBIRTH          ;   .
C09C 6A05             (         ONCE.ASM):00144                 DEC     P.OCOWN,X       ;mark as creature owned
C09E 5C               (         ONCE.ASM):00145                 INCB                    ;go down a level
C09F C105             (         ONCE.ASM):00146                 CMPB    #5              ;at bottom?
C0A1 2F02             (         ONCE.ASM):00147                 BLE     CINI46          ;   not yet
C0A3 D68D             (         ONCE.ASM):00148                 LDB     OBJLVL          ;at bottom - start again
                      (         ONCE.ASM):00149         ;
C0A5 0A8C             (         ONCE.ASM):00150         CINI46  DEC     OBJCNT          ;one less object to create
C0A7 26F1             (         ONCE.ASM):00151                 BNE     CINI44          ;   not done yet
                      (         ONCE.ASM):00152         ;
C0A9 4C               (         ONCE.ASM):00153                 INCA                    ;advance to the next object
C0AA 1183DADA         (         ONCE.ASM):00154                 CMPU    #OMXEND         ;done yet?
C0AE 25DC             (         ONCE.ASM):00155                 BLO     CINI42          ;   nope
                      (         ONCE.ASM):00156         
                      (         ONCE.ASM):00157         
                      (         ONCE.ASM):00158         
                      (         ONCE.ASM):00159         ;
                      (         ONCE.ASM):00160         ;  Display COPYRIGHT Notice
                      (         ONCE.ASM):00161         ;
C0B0 CE0388           (         ONCE.ASM):00162                 LDU     #TXTSTS         ;string i/o to status line
C0B3 0AB7             (         ONCE.ASM):00163                 DEC     TXBFLG          ;   .
C0B5 3F               (         ONCE.ASM):00164                 SWI                     ;clear the status line
C0B6 0A               (         ONCE.ASM):00165                 FCB     CLRSTS          ;   .
                      (         ONCE.ASM):00166         ;
C0B7 3F               (         ONCE.ASM):00167                 SWI                     ;from on the high...
C0B8 02               (         ONCE.ASM):00168                 FCB     OUTSTI          ;   .
C0B9 F8               (         ONCE.ASM):00169                 FCB     %11111000       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0BA DF               (         ONCE.ASM):00170                 FCB     %11011111       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0BB 0C               (         ONCE.ASM):00171                 FCB     %00001100       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0BC C9               (         ONCE.ASM):00172                 FCB     %11001001       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0BD 27               (         ONCE.ASM):00173                 FCB     %00100111       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0BE 45               (         ONCE.ASM):00174                 FCB     %01000101       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0BF 00               (         ONCE.ASM):00175                 FCB     %00000000       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0C0 02               (         ONCE.ASM):00176                 FCB     %00000010       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0C1 65               (         ONCE.ASM):00177                 FCB     %01100101       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0C2 C1               (         ONCE.ASM):00178                 FCB     %11000001       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0C3 03               (         ONCE.ASM):00179                 FCB     %00000011       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0C4 52               (         ONCE.ASM):00180                 FCB     %01010010       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0C5 39               (         ONCE.ASM):00181                 FCB     %00111001       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0C6 3C               (         ONCE.ASM):00182                 FCB     %00111100       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0C7 00               (         ONCE.ASM):00183                 FCB     %00000000       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0C8 68               (         ONCE.ASM):00184                 FCB     %01101000       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0C9 DA               (         ONCE.ASM):00185                 FCB     %11011010       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0CA CC               (         ONCE.ASM):00186                 FCB     %11001100       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0CB 63               (         ONCE.ASM):00187                 FCB     %01100011       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0CC 09               (         ONCE.ASM):00188                 FCB     %00001001       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
C0CD 48               (         ONCE.ASM):00189                 FCB     %01001000       ;COPYRIGHT  DYNA MICRO  MCMLXXXII
                      (         ONCE.ASM):00190         ;
C0CE 0FB7             (         ONCE.ASM):00191         PSTS90  CLR     TXBFLG          ;restore standard i/o
C0D0 39               (         ONCE.ASM):00192                 RTS                     ;go home
                      (         ONCE.ASM):00193         
                      (         ONCE.ASM):00194         
                      (         ONCE.ASM):00195         
                      (         ONCE.ASM):00196         ;
                      (         ONCE.ASM):00197         ;  Arm the ABORT function
                      (         ONCE.ASM):00198         ;
C0D1 0A77             (         ONCE.ASM):00199         DEMO10  DEC     AUTFLG          ;indicate AUTOPLAY mode
C0D3 8D3F             (         ONCE.ASM):00200                 BSR     IRQSYN          ;enable/sync on IRQ
                      (         ONCE.ASM):00201         ;
                      (         ONCE.ASM):00202         ;  Coming Attractions...
                      (         ONCE.ASM):00203         ;
C0D5 8EDF47           (         ONCE.ASM):00204                 LDX     #WIZ1           ;use the crescent wizzard
C0D8 0A9E             (         ONCE.ASM):00205                 DEC     FADFLG          ;fade
C0DA 3F               (         ONCE.ASM):00206                 SWI                     ;(don't erase status line!)
C0DB 14               (         ONCE.ASM):00207                 FCB     WIZIN0          ;   .
                      (         ONCE.ASM):00208         ;
C0DC 3F               (         ONCE.ASM):00209                 SWI                     ;welcome message (part I)
C0DD 02               (         ONCE.ASM):00210                 FCB     OUTSTI          ;   .
C0DE 9F               (         ONCE.ASM):00211                 FCB     %10011111       ;^I DARE YE ENTER...^
C0DF D2               (         ONCE.ASM):00212                 FCB     %11010010       ;^I DARE YE ENTER...^
C0E0 02               (         ONCE.ASM):00213                 FCB     %00000010       ;^I DARE YE ENTER...^
C0E1 06               (         ONCE.ASM):00214                 FCB     %00000110       ;^I DARE YE ENTER...^
C0E2 45               (         ONCE.ASM):00215                 FCB     %01000101       ;^I DARE YE ENTER...^
C0E3 06               (         ONCE.ASM):00216                 FCB     %00000110       ;^I DARE YE ENTER...^
C0E4 4A               (         ONCE.ASM):00217                 FCB     %01001010       ;^I DARE YE ENTER...^
C0E5 02               (         ONCE.ASM):00218                 FCB     %00000010       ;^I DARE YE ENTER...^
C0E6 BA               (         ONCE.ASM):00219                 FCB     %10111010       ;^I DARE YE ENTER...^
C0E7 85               (         ONCE.ASM):00220                 FCB     %10000101       ;^I DARE YE ENTER...^
C0E8 97               (         ONCE.ASM):00221                 FCB     %10010111       ;^I DARE YE ENTER...^
C0E9 BD               (         ONCE.ASM):00222                 FCB     %10111101       ;^I DARE YE ENTER...^
C0EA EF               (         ONCE.ASM):00223                 FCB     %11101111       ;^I DARE YE ENTER...^
C0EB 80               (         ONCE.ASM):00224                 FCB     %10000000       ;^I DARE YE ENTER...^
                      (         ONCE.ASM):00225         ;
C0EC 3F               (         ONCE.ASM):00226                 SWI                     ;welcome message (part II)
C0ED 02               (         ONCE.ASM):00227                 FCB     OUTSTI          ;   .
C0EE F7               (         ONCE.ASM):00228                 FCB     %11110111       ;...THE DUNGEONS OF DAGGORATH!!!
C0EF BD               (         ONCE.ASM):00229                 FCB     %10111101       ;...THE DUNGEONS OF DAGGORATH!!!
C0F0 EA               (         ONCE.ASM):00230                 FCB     %11101010       ;...THA DUNGEONS OF DAGGORATH!!!
C0F1 20               (         ONCE.ASM):00231                 FCB     %00100000       ;...THE DUNGEONS OF DAGGORATH!!!
C0F2 A0               (         ONCE.ASM):00232                 FCB     %10100000       ;...THE DUNGEONS OF DAGGORITH!!!
C0F3 25               (         ONCE.ASM):00233                 FCB     %00100101       ;...THE DUJGEONS OF DAGGORATH!!!
C0F4 5C               (         ONCE.ASM):00234                 FCB     %01011100       ;...THE DUNGEONS OF DAGGORATH!!!
C0F5 72               (         ONCE.ASM):00235                 FCB     %01110010       ;...THE DUNGEONS OF DAGGORATH!!!
C0F6 BD               (         ONCE.ASM):00236                 FCB     %10111101       ;...THE DUNGEONS OF DAGGORATH!!!
C0F7 D3               (         ONCE.ASM):00237                 FCB     %11010011       ;...THE DUNGEONS OF DAGGORATH!!!
C0F8 03               (         ONCE.ASM):00238                 FCB     %00000011       ;...THE DUNGEONS OF DAGGORATH!!!
C0F9 CC               (         ONCE.ASM):00239                 FCB     %11001100       ;...THE DUNGEONS OF DAGGORITH!!!
C0FA 02               (         ONCE.ASM):00240                 FCB     %00000010       ;...THE DUNGEONS OF DAGGORATH!!!
C0FB 04               (         ONCE.ASM):00241                 FCB     %00000100       ;...THE DUNGEONS OF DAGGORATH!!!
C0FC E7               (         ONCE.ASM):00242                 FCB     %11100111       ;...THE DUNGEONS OF DAGGORATH!!!
C0FD 7C               (         ONCE.ASM):00243                 FCB     %01111100       ;...THE DUNGEONS OF DAGGORATH!!!
C0FE 83               (         ONCE.ASM):00244                 FCB     %10000011       ;...THE DUNGEONS OF DAGGORATH!!!
C0FF 44               (         ONCE.ASM):00245                 FCB     %01000100       ;...THE DUNGEONS OF DAGGORATH!!!
C100 6F               (         ONCE.ASM):00246                 FCB     %01101111       ;...THE DUNGEONS OF DAGGORATH!!!
C101 7B               (         ONCE.ASM):00247                 FCB     %01111011       ;...THE DUNGEONS OF DAGGORATH!!!
                      (         ONCE.ASM):00248         
                      (         ONCE.ASM):00249         
                      (         ONCE.ASM):00250         
C102 3F               (         ONCE.ASM):00251                 SWI                     ;display message for a while
C103 10               (         ONCE.ASM):00252                 FCB     WAIT            ;   .
C104 3F               (         ONCE.ASM):00253                 SWI                     ;   .
C105 10               (         ONCE.ASM):00254                 FCB     WAIT            ;   .
                      (         ONCE.ASM):00255         ;
C106 3F               (         ONCE.ASM):00256                 SWI                     ;now fade the wizard out
C107 15               (         ONCE.ASM):00257                 FCB     WIZOUT          ;   .
C108 3F               (         ONCE.ASM):00258                 SWI                     ;blank the screen
C109 09               (         ONCE.ASM):00259                 FCB     ZFLOP           ;   .
C10A 0AB4             (         ONCE.ASM):00260                 DEC     UPDATE          ;   .
C10C 13               (         ONCE.ASM):00261                 SYNC                    ;   .
                      (         ONCE.ASM):00262         ;
                      (         ONCE.ASM):00263         ;  Create Autoplay Dungeon/Drop Player into it
                      (         ONCE.ASM):00264         ;
C10D 8602             (         ONCE.ASM):00265                 LDA     #2              ;level three
C10F CED80C           (         ONCE.ASM):00266                 LDU     #DEMDAT         ;use demo initialization data
C112 2021             (         ONCE.ASM):00267                 BRA     GAME20          ;   .
                      (         ONCE.ASM):00268         
                      (         ONCE.ASM):00269         
                      (         ONCE.ASM):00270         
                      (         ONCE.ASM):00271         ;
                      (         ONCE.ASM):00272         ;  IRQSYN: Enable and Synchronize on IRQ
                      (         ONCE.ASM):00273         ;
C114 CC343C           (         ONCE.ASM):00274         IRQSYN  LDD     #$343C          ;bit patterns
C117 B7FF21           (         ONCE.ASM):00275                 STA     P.PICRA+PIA$1   ;turn off cassette motor
C11A F7FF23           (         ONCE.ASM):00276                 STB     P.PICRB+PIA$1   ;enable Six BIT Sounds
C11D 4C               (         ONCE.ASM):00277                 INCA                    ;ACCA <- $35
C11E B7FF03           (         ONCE.ASM):00278                 STA     P.PICRB+PIA$0   ;SEL2=0, IRQ on falling edge FS
C121 3CEF             (         ONCE.ASM):00279                 CWAI    #~(CC.I&$00FF)  ;synchronize on first IRQ
C123 39               (         ONCE.ASM):00280                 RTS
                      (         ONCE.ASM):00281         ;
                      (         ONCE.ASM):00282         ;  Game Initialization
                      (         ONCE.ASM):00283         ;
C124 8DEE             (         ONCE.ASM):00284         GAME10  BSR     IRQSYN          ;enable/sync on IRQ
                      (         ONCE.ASM):00285         ;
C126 CC100B           (         ONCE.ASM):00286                 LDD     #$100B          ;set initial position
C129 DD13             (         ONCE.ASM):00287                 STD     PROW            ;   .
C12B 0F17             (         ONCE.ASM):00288                 CLR     PPOW            ;correct power settings
                      (         ONCE.ASM):00289         
C12D 867F             (         ONCE.ASM):00290                 LDA     #$7F            ; NAB - Max power.
C12F DD17             (         ONCE.ASM):00291                 STD     PPOW
                      (         ONCE.ASM):00292         
C131 4F               (         ONCE.ASM):00293                 CLRA                    ;start on level 0
C132 CED810           (         ONCE.ASM):00294                 LDU     #GAMDAT         ;game initialization data
                      (         ONCE.ASM):00295         
                      (         ONCE.ASM):00296         
                      (         ONCE.ASM):00297         
                      (         ONCE.ASM):00298         ;
                      (         ONCE.ASM):00299         ;  Common DEMO/GAME Code
                      (         ONCE.ASM):00300         ;
C135 3F               (         ONCE.ASM):00301         GAME20  SWI                     ;display filler message
C136 16               (         ONCE.ASM):00302                 FCB     PREPAR          ;   .
C137 3F               (         ONCE.ASM):00303                 SWI                     ;create the new level
C138 1A               (         ONCE.ASM):00304                 FCB     NEWLVL          ;   .
                      (         ONCE.ASM):00305         ;
                      (         ONCE.ASM):00306         ;  Create and Stow Objects into Bag
                      (         ONCE.ASM):00307         ;
C139 108E0229         (         ONCE.ASM):00308                 LDY     #BAGPTR         ;load ptr to bag
C13D A6C0             (         ONCE.ASM):00309         GAME30  LDA     ,U+             ;load next object type
C13F 2B12             (         ONCE.ASM):00310                 BMI     GAME40          ;   done
C141 3F               (         ONCE.ASM):00311                 SWI                     ;create the object
C142 17               (         ONCE.ASM):00312                 FCB     OBIRTH          ;   .
C143 6C05             (         ONCE.ASM):00313                 INC     P.OCOWN,X       ;mark as player owned
C145 1E13             (         ONCE.ASM):00314                 EXG     X,U             ;   .
C147 3F               (         ONCE.ASM):00315                 SWI                     ;   .
C148 18               (         ONCE.ASM):00316                 FCB     OCBFIL          ;   .
C149 1E13             (         ONCE.ASM):00317                 EXG     X,U             ;   .
C14B 6F0B             (         ONCE.ASM):00318                 CLR     P.OCREV,X       ;reveal the object
C14D AFA4             (         ONCE.ASM):00319                 STX     P.OCPTR,Y       ;append to bag list
C14F 1F12             (         ONCE.ASM):00320                 TFR     X,Y             ;advance to next object
C151 20EA             (         ONCE.ASM):00321                 BRA     GAME30          ;loop until done
                      (         ONCE.ASM):00322         ;
C153 0D77             (         ONCE.ASM):00323         GAME40  TST     AUTFLG          ;autoplay?
C155 2713             (         ONCE.ASM):00324                 BEQ     GAME50          ;   nope - normal startup
                      (         ONCE.ASM):00325         ;
C157 0A9B             (         ONCE.ASM):00326                 DEC     SLEEP           ;turn off scheduler
C159 8ECDBA           (         ONCE.ASM):00327                 LDX     #MAPPER         ;throw up map display
C15C 9FB2             (         ONCE.ASM):00328                 STX     DSPMOD          ;   .
C15E 0A94             (         ONCE.ASM):00329                 DEC     MAPFLG          ;show everything
C160 3F               (         ONCE.ASM):00330                 SWI                     ;   .
C161 0E               (         ONCE.ASM):00331                 FCB     PUPDAT          ;   .
C162 3F               (         ONCE.ASM):00332                 SWI                     ;   .
C163 10               (         ONCE.ASM):00333                 FCB     WAIT            ;   .
C164 3F               (         ONCE.ASM):00334                 SWI                     ;   .
C165 10               (         ONCE.ASM):00335                 FCB     WAIT            ;   .
C166 0F9B             (         ONCE.ASM):00336                 CLR     SLEEP           ;wake up
                      (         ONCE.ASM):00337         ;
C168 13               (         ONCE.ASM):00338                 SYNC                    ;delay for AUTOPLAY synchronization
C169 13               (         ONCE.ASM):00339                 SYNC                    ;   .
                      (         ONCE.ASM):00340         ;
C16A 3F               (         ONCE.ASM):00341         GAME50  SWI                     ;initial view
C16B 19               (         ONCE.ASM):00342                 FCB     INIVU           ;   .
C16C 3F               (         ONCE.ASM):00343                 SWI                     ;fake the prompt
C16D 0F               (         ONCE.ASM):00344                 FCB     PROMPT          ;   .
C16E 7EC1F9           (         ONCE.ASM):00345                 JMP     SCHED           ;fall into the scheduler
                      (         ONCE.ASM):00346         ;
                      (         ONCE.ASM):00347         ;;;;;        END
                      (    DAGGORATH.ASM):00093                 INCLUDE COMMON.ASM       ;Common Operating System Routines
                      (       COMMON.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMMON.ASM):00002         ;  T H E   S C H E D U L E R
                      (       COMMON.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMMON.ASM):00004         ;
                      (       COMMON.ASM):00005         ;  The scheduler utilizes the 'Round-Robin' algorithm.
                      (       COMMON.ASM):00006         ;  Tasks are executed one-at-a-time, with each running
                      (       COMMON.ASM):00007         ;  to completion.  Tasks should be as short as possible
                      (       COMMON.ASM):00008         ;  to insure all tasks run within their time windows.
                      (       COMMON.ASM):00009         ;
                      (       COMMON.ASM):00010         ;  SCDQUE is a 16-bit address pointing at a linked
                      (       COMMON.ASM):00011         ;  list of TCB's which make up the scheduling queue.
                      (       COMMON.ASM):00012         ;
                      (       COMMON.ASM):00013         ;  Upon task completion, the registers should have the
                      (       COMMON.ASM):00014         ;  following values:
                      (       COMMON.ASM):00015         ;
                      (       COMMON.ASM):00016         ;       A - New Countdown Time (Optional)
                      (       COMMON.ASM):00017         ;
                      (       COMMON.ASM):00018         ;       B - Queue Pointer or Zero (destroy the TCB)
                      (       COMMON.ASM):00019         ;
                      (       COMMON.ASM):00020         
                      (       COMMON.ASM):00021         
                      (       COMMON.ASM):00022         
                      (       COMMON.ASM):00023         ;
                      (       COMMON.ASM):00024         ;  GETBUF: Gets the next buffer from the cassette
                      (       COMMON.ASM):00025         ;
                      (       COMMON.ASM):00026         ;  Inputs:
                      (       COMMON.ASM):00027         ;       X - buffer addr
                      (       COMMON.ASM):00028         ;  Returns:
                      (       COMMON.ASM):00029         ;       A - zero if no errors
                      (       COMMON.ASM):00030         ;       B - block type
                      (       COMMON.ASM):00031         ;       X - buffer addr updated (if no errors)
                      (       COMMON.ASM):00032         ;       Z - condition code set if no errors
                      (       COMMON.ASM):00033         ;
C171 BF007E           (       COMMON.ASM):00034         GETBUF  STX     >$007E          ;set the buffer addr
C174 103F             (       COMMON.ASM):00035                 SWI2                    ;read the next block
C176 06               (       COMMON.ASM):00036                 FCB     BLKIN-$A000     ;   .
C177 4D               (       COMMON.ASM):00037                 TSTA                    ;set condition codes
C178 1026DEAB         (       COMMON.ASM):00038                 LBNE    $A027           ;   restart the world if error
C17C F6007C           (       COMMON.ASM):00039                 LDB     >$007C          ;load the block type
C17F 39               (       COMMON.ASM):00040                 RTS                     ;bye
                      (       COMMON.ASM):00041         ;
                      (       COMMON.ASM):00042         ;  PIETAP: Initialize PIA's for Tape Operations
                      (       COMMON.ASM):00043         ;
C180 CEFF00           (       COMMON.ASM):00044         PIATAP  LDU     #PIA$0          ;addr of PIA #0 ($FF00)
C183 CC343C           (       COMMON.ASM):00045                 LDD     #$343C          ;magic PIA bit patterns
C186 A743             (       COMMON.ASM):00046                 STA     P.PICRB,U       ;SEL2=0, Disable IRQ to CPU
C188 B7FF23           (       COMMON.ASM):00047                 STA     P.PICRB+PIA$1   ;Six Bit Sounds OFF, Disable FIRQ to CPU
C18B F7FF21           (       COMMON.ASM):00048                 STB     P.PICRA+PIA$1   ;Cassette Motor ON, Disable FIRQ to CPU
C18E 39               (       COMMON.ASM):00049                 RTS
                      (       COMMON.ASM):00050         ;
                      (       COMMON.ASM):00051         ;  TAPDLY: Delay to insure motor has started
                      (       COMMON.ASM):00052         ;
C18F 9E00             (       COMMON.ASM):00053         TAPDLY  LDX     BIGZER          ;insure motor is running
C191 301F             (       COMMON.ASM):00054         TDLY10  LEAX    -1,X            ;   .
C193 26FC             (       COMMON.ASM):00055                 BNE     TDLY10          ;   .
C195 39               (       COMMON.ASM):00056                 RTS                     ;bye
                      (       COMMON.ASM):00057         
                      (       COMMON.ASM):00058         
                      (       COMMON.ASM):00059         
                      (       COMMON.ASM):00060         ;
                      (       COMMON.ASM):00061         ;  SAVE: Process the Game Save Function
                      (       COMMON.ASM):00062         ;
C196 8DE8             (       COMMON.ASM):00063         SAVE    BSR     PIATAP          ;init PIA's for tape operations
C198 8DF5             (       COMMON.ASM):00064                 BSR     TAPDLY          ;delay for a while
C19A 8DF3             (       COMMON.ASM):00065                 BSR     TAPDLY          ;   .
                      (       COMMON.ASM):00066         ;
                      (       COMMON.ASM):00067         ;  Write NAMEFILE Block
                      (       COMMON.ASM):00068         ;
C19C 103F             (       COMMON.ASM):00069                 SWI2                    ;write the leader
C19E 0C               (       COMMON.ASM):00070                 FCB     WRTLDR-$A000    ;   .
C19F 103F             (       COMMON.ASM):00071                 SWI2                    ;write the name file block
C1A1 08               (       COMMON.ASM):00072                 FCB     BLKOUT-$A000    ;   .
                      (       COMMON.ASM):00073         ;
                      (       COMMON.ASM):00074         ;  Write DATA Blocks
                      (       COMMON.ASM):00075         ;
C1A2 8DEB             (       COMMON.ASM):00076                 BSR     TAPDLY          ;delay for a while
C1A4 103F             (       COMMON.ASM):00077                 SWI2                    ;write second leader
C1A6 0C               (       COMMON.ASM):00078                 FCB     WRTLDR-$A000    ;   .
                      (       COMMON.ASM):00079         ;
C1A7 8E0200           (       COMMON.ASM):00080                 LDX     #DP.BEG         ;start of save area
C1AA CC0180           (       COMMON.ASM):00081         SAVE10  LDD     #$0180          ;128-byte DATA blocks
C1AD FD007C           (       COMMON.ASM):00082                 STD     >$007C          ;   .
C1B0 BF007E           (       COMMON.ASM):00083                 STX     >$007E          ;buffer addr
C1B3 103F             (       COMMON.ASM):00084                 SWI2                    ;write the next block
C1B5 08               (       COMMON.ASM):00085                 FCB     BLKOUT-$A000    ;   .
C1B6 8C0F05           (       COMMON.ASM):00086                 CMPX    #MM.END         ;done yet?
C1B9 25EF             (       COMMON.ASM):00087                 BLO     SAVE10          ;   nope
                      (       COMMON.ASM):00088         ;
                      (       COMMON.ASM):00089         ;  Write EOF Block
                      (       COMMON.ASM):00090         ;
C1BB FF007C           (       COMMON.ASM):00091                 STU     >$007C          ;end of file block ($FF00)
C1BE 103F             (       COMMON.ASM):00092                 SWI2                    ;   .
C1C0 08               (       COMMON.ASM):00093                 FCB     BLKOUT-$A000    ;   .
C1C1 8DCC             (       COMMON.ASM):00094                 BSR     TAPDLY          ;some blank tape
C1C3 202B             (       COMMON.ASM):00095                 BRA     LOAD90          ;drop into common code
                      (       COMMON.ASM):00096         
                      (       COMMON.ASM):00097         
                      (       COMMON.ASM):00098         
                      (       COMMON.ASM):00099         ;
                      (       COMMON.ASM):00100         ;  LOAD: Process Game Restore Function
                      (       COMMON.ASM):00101         ;
C1C5 8DB9             (       COMMON.ASM):00102         LOAD    BSR     PIATAP          ;init PIA's for tape operations
C1C7 103F             (       COMMON.ASM):00103                 SWI2                    ;get into bit sync
C1C9 04               (       COMMON.ASM):00104                 FCB     CSRDON-$A000    ;   .
                      (       COMMON.ASM):00105         ;
                      (       COMMON.ASM):00106         ;  Search For Correct File
                      (       COMMON.ASM):00107         ;
C1CA DE0B             (       COMMON.ASM):00108         LOAD10  LDU     FLOP            ;use alternate screen as buffer
C1CC AEC4             (       COMMON.ASM):00109                 LDX     P.VDBAS,U       ;   .
C1CE 8DA1             (       COMMON.ASM):00110                 BSR     GETBUF          ;get the next bufferful
C1D0 26F8             (       COMMON.ASM):00111                 BNE     LOAD10          ;   not a file header
                      (       COMMON.ASM):00112         ;
                      (       COMMON.ASM):00113         ;  Compare filenames
                      (       COMMON.ASM):00114         ;
C1D2 AEC4             (       COMMON.ASM):00115                 LDX     P.VDBAS,U       ;cassette buffer addr
C1D4 CE0313           (       COMMON.ASM):00116                 LDU     #TOKEN          ;TOKEN buffer addr
C1D7 C608             (       COMMON.ASM):00117                 LDB     #8              ;eight characters in filename
C1D9 A680             (       COMMON.ASM):00118         LOAD12  LDA     ,X+             ;load next char
C1DB A1C0             (       COMMON.ASM):00119                 CMPA    ,U+             ;did we match
C1DD 26E6             (       COMMON.ASM):00120                 BNE     LOAD            ;   nope - get next cassette buffer
C1DF 5A               (       COMMON.ASM):00121                 DECB                    ;one less to match
C1E0 26F7             (       COMMON.ASM):00122                 BNE     LOAD12          ;   until we have a complete match
                      (       COMMON.ASM):00123         ;
                      (       COMMON.ASM):00124         ;  We found our file...
                      (       COMMON.ASM):00125         ;
C1E2 103F             (       COMMON.ASM):00126                 SWI2                    ;re-synchronize
C1E4 04               (       COMMON.ASM):00127                 FCB     CSRDON-$A000    ;   .
C1E5 8E0200           (       COMMON.ASM):00128                 LDX     #$0200          ;start of restore area
C1E8 8D87             (       COMMON.ASM):00129         LOAD20  BSR     GETBUF          ;get the next buffer
C1EA 2AFC             (       COMMON.ASM):00130                 BPL     LOAD20          ;   not done yet
                      (       COMMON.ASM):00131         ;
                      (       COMMON.ASM):00132         ;  Restart the Game
                      (       COMMON.ASM):00133         ;
C1EC 10CE1000         (       COMMON.ASM):00134                 LDS     #PDL            ;reset the stack ptr
                      (       COMMON.ASM):00135         ;
C1F0 BDC114           (       COMMON.ASM):00136         LOAD90  JSR     IRQSYN          ;enable/sync on IRQ
C1F3 0FB8             (       COMMON.ASM):00137                 CLR     ZFLAG           ;indicate tape operation complete
C1F5 3F               (       COMMON.ASM):00138                 SWI                     ;show what is going on
C1F6 19               (       COMMON.ASM):00139                 FCB     INIVU           ;   .
C1F7 3F               (       COMMON.ASM):00140                 SWI                     ;prompt the human
C1F8 0F               (       COMMON.ASM):00141                 FCB     PROMPT          ;   .
                      (       COMMON.ASM):00142         
                      (       COMMON.ASM):00143         
                      (       COMMON.ASM):00144         
                      (       COMMON.ASM):00145         ;
                      (       COMMON.ASM):00146         ;  SCHED: The "Merry-Go-Round"
                      (       COMMON.ASM):00147         ;
C1F9 CE02AB           (       COMMON.ASM):00148         SCHED   LDU     #SCDQUE         ;start at queue head
C1FC 0FBB             (       COMMON.ASM):00149                 CLR     RSTART          ;reset "restart" flag
C1FE 1F32             (       COMMON.ASM):00150         SCHED0  TFR     U,Y             ;curr TCB becomes prev TCB
                      (       COMMON.ASM):00151         ;
                      (       COMMON.ASM):00152         ;  Check for TAPE functions
                      (       COMMON.ASM):00153         ;
C200 0DB8             (       COMMON.ASM):00154         SCHED1  TST     ZFLAG           ;check for load/save (-1/1)
C202 2E92             (       COMMON.ASM):00155                 BGT     SAVE            ;   .
C204 2BBF             (       COMMON.ASM):00156                 BMI     LOAD            ;   .
                      (       COMMON.ASM):00157         ;
                      (       COMMON.ASM):00158         ;  Process next entry in SCDQUE
                      (       COMMON.ASM):00159         ;
C206 EEC4             (       COMMON.ASM):00160                 LDU     P.TCPTR,U       ;advance curr TCB ptr
C208 27EF             (       COMMON.ASM):00161                 BEQ     SCHED           ;   start again if tail reached
                      (       COMMON.ASM):00162         ;
                      (       COMMON.ASM):00163         ;  Execute the selected task
                      (       COMMON.ASM):00164         ;
C20A 3460             (       COMMON.ASM):00165                 PSHS    Y,U             ;save TCB pointers
C20C ADD803           (       COMMON.ASM):00166                 JSR     [P.TCRTN,U]     ;dispatch to routine
C20F 3560             (       COMMON.ASM):00167                 PULS    Y,U             ;restore TCB pointers
                      (       COMMON.ASM):00168         ;
                      (       COMMON.ASM):00169         ;  Do we need to restart?
                      (       COMMON.ASM):00170         ;
C211 0DBB             (       COMMON.ASM):00171                 TST     RSTART          ;check restart flag?
C213 26E4             (       COMMON.ASM):00172                 BNE     SCHED           ;   we need to start again
                      (       COMMON.ASM):00173         ;
                      (       COMMON.ASM):00174         ;  Check disposition upon execution completion
                      (       COMMON.ASM):00175         ;
C215 C10C             (       COMMON.ASM):00176                 CMPB    #Q.SCD          ;leave in the SCHED queue?
C217 27E5             (       COMMON.ASM):00177                 BEQ     SCHED0          ;   yes - process next TCB
                      (       COMMON.ASM):00178         ;
                      (       COMMON.ASM):00179         ;  Remove TCB from SCHED and add to appropriate queue
                      (       COMMON.ASM):00180         ;
C219 8D21             (       COMMON.ASM):00181                 BSR     QUERMV          ;de-link current TCB from chain
C21B 8D04             (       COMMON.ASM):00182                 BSR     QUEADD          ;reschedule TCB to appropriate queue
C21D 1F23             (       COMMON.ASM):00183                 TFR     Y,U             ;fake previous TCB run
C21F 20DF             (       COMMON.ASM):00184                 BRA     SCHED1          ;process next TCB
                      (       COMMON.ASM):00185         
                      (       COMMON.ASM):00186         
                      (       COMMON.ASM):00187         
                      (       COMMON.ASM):00188         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMMON.ASM):00189         ;  Q U E U E   M A N A G E R
                      (       COMMON.ASM):00190         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMMON.ASM):00191         ;
                      (       COMMON.ASM):00192         ;  All queues are composed of forward linked lists of TCB's.
                      (       COMMON.ASM):00193         ;  Associated with each queue is an initial queue pointer.
                      (       COMMON.ASM):00194         ;  The linked lists are terminated with a null.
                      (       COMMON.ASM):00195         ;
                      (       COMMON.ASM):00196         ;*****
                      (       COMMON.ASM):00197         ;
                      (       COMMON.ASM):00198         ;  QUEADD: Add a TCB to the end of a queue (linked list)
                      (       COMMON.ASM):00199         ;
                      (       COMMON.ASM):00200         ;  Inputs:
                      (       COMMON.ASM):00201         ;       A - Countdown Time (Optional)
                      (       COMMON.ASM):00202         ;       B - Queue Code
                      (       COMMON.ASM):00203         ;       U - pointer to TCB
                      (       COMMON.ASM):00204         ;
C221 3417             (       COMMON.ASM):00205         QUEADD  PSHS    CC,A,B,X        ;save some regs
C223 1A10             (       COMMON.ASM):00206                 ORCC    #CC.I           ;non-interruptible code
C225 A742             (       COMMON.ASM):00207                 STA     P.TCTIM,U       ;store countdown time in TCB
C227 8E029F           (       COMMON.ASM):00208                 LDX     #QUEBEG         ;where the queue ptrs reside
C22A 3A               (       COMMON.ASM):00209                 ABX                     ;determine addr of queue ptr
C22B 4F               (       COMMON.ASM):00210                 CLRA                    ;zap link ptr
C22C 5F               (       COMMON.ASM):00211                 CLRB                    ;   .
C22D EDC4             (       COMMON.ASM):00212                 STD     P.TCPTR,U       '   .
                      (       COMMON.ASM):00213         ;
C22F 10A384           (       COMMON.ASM):00214         QUEAD1  CMPD    ,X              ;search for end of linked list
C232 2704             (       COMMON.ASM):00215                 BEQ     QUEAD2          ;   found it!
C234 AE84             (       COMMON.ASM):00216                 LDX     P.TCPTR,X       ;advance to next TCB
C236 20F7             (       COMMON.ASM):00217                 BRA     QUEAD1          ;loop until we find it
                      (       COMMON.ASM):00218         ;
C238 EF84             (       COMMON.ASM):00219         QUEAD2  STU     ,X              ;link last TCB to new TCB
C23A 3597             (       COMMON.ASM):00220                 PULS    CC,A,B,X,PC     ;restore regs/go home
                      (       COMMON.ASM):00221         ;
                      (       COMMON.ASM):00222         ;  QUERMV: Remove a TCB from a Linked List
                      (       COMMON.ASM):00223         ;
                      (       COMMON.ASM):00224         ;  Inputs:
                      (       COMMON.ASM):00225         ;       U - Ptr to TCB to be removed
                      (       COMMON.ASM):00226         ;       Y - Ptr to previous TCB
                      (       COMMON.ASM):00227         ;
C23C 3411             (       COMMON.ASM):00228         QUERMV  PSHS    CC,X            ;save condition codes
C23E 1A10             (       COMMON.ASM):00229                 ORCC    #CC.I           ;non-interruptible code
C240 AEC4             (       COMMON.ASM):00230                 LDX     P.TCPTR,U       ;get curr TCB link
C242 AFA4             (       COMMON.ASM):00231                 STX     P.TCPTR,Y       ;leapfrog prev TCB past this TCB
C244 3591             (       COMMON.ASM):00232                 PULS    CC,X,PC         ;restore condition codes/go home
                      (       COMMON.ASM):00233         
                      (       COMMON.ASM):00234         
                      (       COMMON.ASM):00235         
                      (       COMMON.ASM):00236         ;
                      (       COMMON.ASM):00237         ;  QUESCN: Process TCB's in the CLOCK queues
                      (       COMMON.ASM):00238         ;
                      (       COMMON.ASM):00239         ;  Inputs:
                      (       COMMON.ASM):00240         ;       U - Queue Pointer
                      (       COMMON.ASM):00241         ;
C246 3474             (       COMMON.ASM):00242         QUESCN  PSHS    B,X,Y,U         ;save some regs
C248 0D9B             (       COMMON.ASM):00243                 TST     SLEEP           ;is the system SLEEPing?
C24A 2612             (       COMMON.ASM):00244                 BNE     QUESC9          ;   yes - don't process queues
                      (       COMMON.ASM):00245         ;
                      (       COMMON.ASM):00246         ;  Traverse the Linked List
                      (       COMMON.ASM):00247         ;
C24C 1F32             (       COMMON.ASM):00248         QUESC0  TFR     U,Y             ;curr TCB becomes prev TCB
C24E EEC4             (       COMMON.ASM):00249                 LDU     P.TCPTR,U       ;advance curr TCB ptr
C250 270C             (       COMMON.ASM):00250                 BEQ     QUESC9          ;   null ptr means tail reached
C252 6A42             (       COMMON.ASM):00251                 DEC     P.TCTIM,U       ;decrement countdown timer
C254 26F6             (       COMMON.ASM):00252                 BNE     QUESC0          ;   time left - process next TCB
                      (       COMMON.ASM):00253         ;
                      (       COMMON.ASM):00254         ;  Reschedule the TCB into SCDQUE
                      (       COMMON.ASM):00255         ;
C256 8DE4             (       COMMON.ASM):00256                 BSR     QUERMV          ;delink curr TCB
C258 C60C             (       COMMON.ASM):00257                 LDB     #Q.SCD          ;load queue code
C25A 8DC5             (       COMMON.ASM):00258                 BSR     QUEADD          ;add TCB to the scheduler queue
C25C 20EE             (       COMMON.ASM):00259                 BRA     QUESC0          ;process next TCB
                      (       COMMON.ASM):00260         ;
C25E 35F4             (       COMMON.ASM):00261         QUESC9  PULS    B,X,Y,U,PC      ;restore regs/go home
                      (       COMMON.ASM):00262         
                      (       COMMON.ASM):00263         
                      (       COMMON.ASM):00264         
                      (       COMMON.ASM):00265         ;!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMMON.ASM):00266         ;  T C B   M A N A G E R    
                      (       COMMON.ASM):00267         ;!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMMON.ASM):00268         ;
                      (       COMMON.ASM):00269         ;  GETTCB: Allocates a TCB
                      (       COMMON.ASM):00270         ;
                      (       COMMON.ASM):00271         ;  Returns:
                      (       COMMON.ASM):00272         ;       U - address of TCB
                      (       COMMON.ASM):00273         ;
C260 3410             (       COMMON.ASM):00274         GETTCB  PSHS    X               ;save regs
C262 DEB9             (       COMMON.ASM):00275                 LDU     TCBPTR          ;ptr to next available TCB
C264 3047             (       COMMON.ASM):00276                 LEAX    TC.LEN,U        ;advance ptr
C266 9FB9             (       COMMON.ASM):00277                 STX     TCBPTR          ;update RAM
C268 3590             (       COMMON.ASM):00278                 PULS    X,PC            ;restore regs/exit
                      (       COMMON.ASM):00279         
                      (       COMMON.ASM):00280         
                      (       COMMON.ASM):00281         
                      (       COMMON.ASM):00282         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMMON.ASM):00283         ;  S A M   P R O G R A M M I N G   R O U T I N E S
                      (       COMMON.ASM):00284         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMMON.ASM):00285         ;
                      (       COMMON.ASM):00286         ;  The Motorola MC6883 Synchronous Address Multiplexer (SAM)
                      (       COMMON.ASM):00287         ;  registers are mapped from $FFC0 to $FFDF.  Each register
                      (       COMMON.ASM):00288         ;  consists of two consecutive bytes.  Writing (any value)
                      (       COMMON.ASM):00289         ;  to the even byte will clear the register.  Writing to the
                      (       COMMON.ASM):00290         ;  odd byte will set the register.
                      (       COMMON.ASM):00291         ;
                      (       COMMON.ASM):00292         ;  The SAM bits are defined as:
                      (       COMMON.ASM):00293         ;
                      (       COMMON.ASM):00294         ;       TY      Map Type (must be zero)
                      (       COMMON.ASM):00295         ;       M1,M0   Map Size:
                      (       COMMON.ASM):00296         ;                  00 - 4K Dynamic
                      (       COMMON.ASM):00297         ;                  01 - 16K Dynamic
                      (       COMMON.ASM):00298         ;                  10 - 64K Dynamic
                      (       COMMON.ASM):00299         ;                  11 - 64K Static
                      (       COMMON.ASM):00300         ;       R1,R0   MPU Rate:
                      (       COMMON.ASM):00301         ;                  00 - 0.9MHz Only (Transparent Refresh)
                      (       COMMON.ASM):00302         ;                  01 - 0.9/1.8MHz  (Transparent Refresh)
                      (       COMMON.ASM):00303         ;                  10 - 1.8MHz Only
                      (       COMMON.ASM):00304         ;                  11 - 1.8MHz Only
                      (       COMMON.ASM):00305         ;       P1      Paging (must be zero)
                      (       COMMON.ASM):00306         ;       F6-F0   Display Offset Page Number (512 bytes/page)
                      (       COMMON.ASM):00307         ;       V2-V0   VDG Mode:
                      (       COMMON.ASM):00308         ;                  000 - Alpha Internal/External, Semi-Graphics 4/6
                      (       COMMON.ASM):00309         ;                  001 - Color/Resolution Graphics-1 (G2C/G2R)
                      (       COMMON.ASM):00310         ;                  010 - Color Graphics-2 (G2C)
                      (       COMMON.ASM):00311         ;                  011 - Resolution Graphics-2 (G2R)
                      (       COMMON.ASM):00312         ;                  100 - Color Graphics-3 (G3C)
                      (       COMMON.ASM):00313         ;                  101 - Resolution Graphics-3 (G3R)
                      (       COMMON.ASM):00314         ;                  110 - Color/Resolution Graphics-6 (G6C/G6R)
                      (       COMMON.ASM):00315         ;                  111 - DMA
                      (       COMMON.ASM):00316         ;
                      (       COMMON.ASM):00317         
                      (       COMMON.ASM):00318         
                      (       COMMON.ASM):00319         
                      (       COMMON.ASM):00320         ;
                      (       COMMON.ASM):00321         ;  SAM:  Reprogram the SAM
                      (       COMMON.ASM):00322         ;
                      (       COMMON.ASM):00323         ;  Inputs:
                      (       COMMON.ASM):00324         ;       A - Bit:  7  6  5  4  3  2  1  0
                      (       COMMON.ASM):00325         ;           SAM:  TY M1 M0 R1 R0 P1 F6 F5
                      (       COMMON.ASM):00326         ;
                      (       COMMON.ASM):00327         ;       B - Bit:  7  6  5  4  3  2  1  0
                      (       COMMON.ASM):00328         ;           SAM:  F4 F3 F2 F1 F0 V2 V1 V0
                      (       COMMON.ASM):00329         ;
C26A 3416             (       COMMON.ASM):00330         SAM     PSHS    A,B,X           ;save regs
C26C 8EFFC0           (       COMMON.ASM):00331                 LDX     #$FFC0          ;SAM base addr
C26F 44               (       COMMON.ASM):00332         SAM10   LSRA                    ;16-bit logical shift right
C270 56               (       COMMON.ASM):00333                 RORB                    ;   .
C271 2503             (       COMMON.ASM):00334                 BCS     SAM12           ;   former LSBit was set
C273 A784             (       COMMON.ASM):00335                 STA     ,X              ;clear the SAM reg (2022 n.b. original was 0,X)
C275 8C               (       COMMON.ASM):00336                 FCB     SKIP2           ;   .
C276 A701             (       COMMON.ASM):00337         SAM12   STA     1,X             ;set the SAM reg
C278 3002             (       COMMON.ASM):00338                 LEAX    2,X             ;advance to next reg
C27A 8CFFD4           (       COMMON.ASM):00339                 CMPX    #$FFD4          ;done yet?
C27D 25F0             (       COMMON.ASM):00340                 BLO     SAM10           ;   nope
C27F 3596             (       COMMON.ASM):00341                 PULS    A,B,X,PC        ;restore regs/exit
                      (       COMMON.ASM):00342         
                      (       COMMON.ASM):00343         
                      (       COMMON.ASM):00344         
                      (       COMMON.ASM):00345         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMMON.ASM):00346         ;  C L O C K   R O U T I N E S
                      (       COMMON.ASM):00347         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMMON.ASM):00348         ;
                      (       COMMON.ASM):00349         ;  CLOCK is the IRQ interrupt service routine.  This routine
                      (       COMMON.ASM):00350         ;  provides a number of functions:
                      (       COMMON.ASM):00351         ;
                      (       COMMON.ASM):00352         ;       * Swaps Graphics-6 Resolution (G6R) Screens
                      (       COMMON.ASM):00353         ;       * Produces 30Hz Buzzing Noise for Opening
                      (       COMMON.ASM):00354         ;       * Maintains Heartbeat/flash
                      (       COMMON.ASM):00355         ;       * Maintains the Time-Of-Day (TOD) Counters
                      (       COMMON.ASM):00356         ;       * Maintains the CLOCK Queues
                      (       COMMON.ASM):00357         ;       * Performs Keyboard Input
                      (       COMMON.ASM):00358         ;
                      (       COMMON.ASM):00359         ;  IRQ is a hardware generated interrupt which occurs at
                      (       COMMON.ASM):00360         ;  1/60th of a second intervals, called a "JIFFY".
                      (       COMMON.ASM):00361         ;
                      (       COMMON.ASM):00362         ;  If location UPDATE is non-zero, CLOCK will swap the display
                      (       COMMON.ASM):00363         ;  screens (by reprogramming the SAM), and will reprogram  the
                      (       COMMON.ASM):00364         ;  VDG to the correct color set.  The SAM requires buffers to
                      (       COMMON.ASM):00365         ;  be on page (512-bytes) boundaries.
                      (       COMMON.ASM):00366         ;
                      (       COMMON.ASM):00367         ;  FLIP is a byte containing the SAM page number of the buffer
                      (       COMMON.ASM):00368         ;  currently being displayed.  FLOP points at the buffer being
                      (       COMMON.ASM):00369         ;  updated.
                      (       COMMON.ASM):00370         ;
                      (       COMMON.ASM):00371         ;  The TOD timers will keep time for 256 days before rolling
                      (       COMMON.ASM):00372         ;  over.
                      (       COMMON.ASM):00373         ;
                      (       COMMON.ASM):00374         ;  The POLCAT routine is a part of the BASIC ROM routines.
                      (       COMMON.ASM):00375         ;  If a character is seen it will be added to the keyboard
                      (       COMMON.ASM):00376         ;  buffer, KBDBUF.
                      (       COMMON.ASM):00377         ;
                      (       COMMON.ASM):00378         ;  The CLOCK queues are linked lists of TCB's.  Each TCB in a
                      (       COMMON.ASM):00379         ;  list has its "countdown" timer decremented.  If a timer has
                      (       COMMON.ASM):00380         ;  expired, the TCB is transferred from the CLOCK queue to the
                      (       COMMON.ASM):00381         ;  SCHED queue for execution.
                      (       COMMON.ASM):00382         ;
                      (       COMMON.ASM):00383         ;  If location SLEEP is non-zero, CLOCK will not scan the queues.
                      (       COMMON.ASM):00384         ;  Instead it will decrement SLEEP once per second and will only
                      (       COMMON.ASM):00385         ;  process the queues when SLEEP becomes zero.  In this way, the
                      (       COMMON.ASM):00386         ;  whole scheduling process can be suspended.
                      (       COMMON.ASM):00387         
                      (       COMMON.ASM):00388         
                      (       COMMON.ASM):00389         
                      (       COMMON.ASM):00390         ;
                      (       COMMON.ASM):00391         ;  CLOCK: IRQ Interrupt Service Routine
                      (       COMMON.ASM):00392         ;
C281 8EFF20           (       COMMON.ASM):00393         CLOCK   LDX     #PIA$1          ;load ptr to PIA #1
C284 A688E3           (       COMMON.ASM):00394                 LDA     P.PICRB-$20,X   ;check for JIFFY interrupt
C287 102A0099         (       COMMON.ASM):00395                 LBPL    CLK90           ;   ignore all but jiffy interrupts
                      (       COMMON.ASM):00396         ;
                      (       COMMON.ASM):00397         ;  Insure Correct DP
                      (       COMMON.ASM):00398         ;
C28B 8602             (       COMMON.ASM):00399                 LDA     #$02            ;org the DP at $0200
C28D 1F8B             (       COMMON.ASM):00400                 TFR     A,DP            ;   .
                      (       COMMON.ASM):00401         ;
                      (       COMMON.ASM):00402         ;  Swap the Display Screens
                      (       COMMON.ASM):00403         ;
C28F 0DB4             (       COMMON.ASM):00404                 TST     UPDATE          ;do we need to update the screen?
C291 270E             (       COMMON.ASM):00405                 BEQ     CLK20           ;   nope
C293 DC09             (       COMMON.ASM):00406                 LDD     FLIP            ;exchange display pointers
C295 DE0B             (       COMMON.ASM):00407                 LDU     FLOP            ;   .
C297 DD0B             (       COMMON.ASM):00408                 STD     FLOP            ;   .
C299 DF09             (       COMMON.ASM):00409                 STU     FLIP            ;   .
C29B EC44             (       COMMON.ASM):00410                 LDD     P.VDSAM,U       ;SAM/VDG page number
C29D 8DCB             (       COMMON.ASM):00411                 BSR     SAM             ;change the SAM address
C29F 0FB4             (       COMMON.ASM):00412                 CLR     UPDATE          ;reset flag
                      (       COMMON.ASM):00413         ;
                      (       COMMON.ASM):00414         ;  30-Hz. Buzzing Sound (used in opening)
                      (       COMMON.ASM):00415         ;
C2A1 0D9C             (       COMMON.ASM):00416         CLK20   TST     NOISEF          ;buzz flag on?
C2A3 2708             (       COMMON.ASM):00417                 BEQ     CLK30           ;   nope
C2A5 039D             (       COMMON.ASM):00418                 COM     NOISEV          ;complement noise value
C2A7 969D             (       COMMON.ASM):00419                 LDA     NOISEV          ;load noise value
C2A9 48               (       COMMON.ASM):00420                 LSLA                    ;adjust position
C2AA 48               (       COMMON.ASM):00421                 LSLA                    ;   .
C2AB A784             (       COMMON.ASM):00422                 STA     P.PIIOA,X       ;output to DAC (bit7-bit2)
                      (       COMMON.ASM):00423         
                      (       COMMON.ASM):00424         
                      (       COMMON.ASM):00425         
                      (       COMMON.ASM):00426         ;
                      (       COMMON.ASM):00427         ;  Heartbeat Sound
                      (       COMMON.ASM):00428         ;
C2AD 0DB1             (       COMMON.ASM):00429         CLK30   TST     HBEATF          ;should we consider making a sound?
C2AF 272F             (       COMMON.ASM):00430                 BEQ     CLK40           ;   nope
C2B1 0AAE             (       COMMON.ASM):00431                 DEC     HEARTC          ;should we make a sound?
C2B3 262B             (       COMMON.ASM):00432                 BNE     CLK40           ;   nope
C2B5 96AF             (       COMMON.ASM):00433                 LDA     HEARTR          ;reset heart beat counter
C2B7 97AE             (       COMMON.ASM):00434                 STA     HEARTC          ;   .
                      (       COMMON.ASM):00435         ;
C2B9 E602             (       COMMON.ASM):00436                 LDB     P.PIIOB,X       ;flip single bit sound output bit
C2BB C802             (       COMMON.ASM):00437                 EORB    #BIT1           ;   .
C2BD E702             (       COMMON.ASM):00438                 STB     P.PIIOB,X       ;   .
                      (       COMMON.ASM):00439         ;
                      (       COMMON.ASM):00440         ;  Heartbeat Status Line Flash (can be disabled)
                      (       COMMON.ASM):00441         ;
C2BF 0DAD             (       COMMON.ASM):00442                 TST     HEARTF          ;process heart beat?
C2C1 271D             (       COMMON.ASM):00443                 BEQ     CLK40           ;   nope
                      (       COMMON.ASM):00444         ;
C2C3 CE0388           (       COMMON.ASM):00445                 LDU     #TXTSTS         ;status TXB
C2C6 AE44             (       COMMON.ASM):00446                 LDX     P.TXCUR,U       ;save current cursor
C2C8 CC000F           (       COMMON.ASM):00447                 LDD     #15             ;position for HEART
C2CB ED44             (       COMMON.ASM):00448                 STD     P.TXCUR,U       ;   .
                      (       COMMON.ASM):00449         ;
C2CD 8620             (       COMMON.ASM):00450                 LDA     #I.SHL          ;small heart left
C2CF 03B0             (       COMMON.ASM):00451                 COM     HEARTS          ;small or large heart?
C2D1 2702             (       COMMON.ASM):00452                 BEQ     CLK32           ;   small
C2D3 8622             (       COMMON.ASM):00453                 LDA     #I.LHL          ;large heart left
                      (       COMMON.ASM):00454         ;
C2D5 BDCA1F           (       COMMON.ASM):00455         CLK32   JSR     TXTDPB          ;deposit char
C2D8 6C45             (       COMMON.ASM):00456                 INC     P.TXCUR+1,U     ;advance cursor position
C2DA 4C               (       COMMON.ASM):00457                 INCA                    ;now process right side
C2DB BDCA1F           (       COMMON.ASM):00458                 JSR     TXTDPB          ;deposit char
C2DE AF44             (       COMMON.ASM):00459                 STX     P.TXCUR,U       ;restore original cursor
                      (       COMMON.ASM):00460         
                      (       COMMON.ASM):00461         
                      (       COMMON.ASM):00462         
                      (       COMMON.ASM):00463         ;
                      (       COMMON.ASM):00464         ;  Update Time-Of-Day (TOD) Counters
                      (       COMMON.ASM):00465         ;
C2E0 CE02A1           (       COMMON.ASM):00466         CLK40   LDU     #JIFQUE         ;always process the jiffy queue
C2E3 BDC246           (       COMMON.ASM):00467                 JSR     QUESCN          ;   .
                      (       COMMON.ASM):00468         ;
C2E6 8E0295           (       COMMON.ASM):00469                 LDX     #JIFFY          ;beginning of timers
C2E9 108EC328         (       COMMON.ASM):00470                 LDY     #ROLTAB         ;table of rollover values
C2ED 6C84             (       COMMON.ASM):00471         CLK42   INC     ,X              ;bump the timer
C2EF 8C029A           (       COMMON.ASM):00472                 CMPX    #DAY            ;are we done?
C2F2 270F             (       COMMON.ASM):00473                 BEQ     CLK50           ;   yes
C2F4 A684             (       COMMON.ASM):00474                 LDA     ,X              ;reach rollover value?
C2F6 A1A0             (       COMMON.ASM):00475                 CMPA    ,Y+             ;   .
C2F8 2D09             (       COMMON.ASM):00476                 BLT     CLK50           ;   nope - done with timers
                      (       COMMON.ASM):00477         ;
C2FA 6F80             (       COMMON.ASM):00478                 CLR     ,X+             ;clear timer/advance to next timer
C2FC 3342             (       COMMON.ASM):00479                 LEAU    2,U             ;advance to next queue
C2FE BDC246           (       COMMON.ASM):00480                 JSR     QUESCN          ;process the queue
C301 20EA             (       COMMON.ASM):00481                 BRA     CLK42           ;loop
                      (       COMMON.ASM):00482         ;
                      (       COMMON.ASM):00483         ;  Perform Keyboard Input
                      (       COMMON.ASM):00484         ;
C303 0D28             (       COMMON.ASM):00485         CLK50   TST     FAINT           ;have we fainted?
C305 261D             (       COMMON.ASM):00486                 BNE     CLK90           ;   yes - don't scan keyboard
                      (       COMMON.ASM):00487         ;
                      (       COMMON.ASM):00488         ;  Determine Scanning Method
                      (       COMMON.ASM):00489         ;
C307 0D77             (       COMMON.ASM):00490                 TST     AUTFLG          ;are we in autoplay?
C309 2711             (       COMMON.ASM):00491                 BEQ     CLK60           ;   nope - use regular i/o rtn
                      (       COMMON.ASM):00492         ;
                      (       COMMON.ASM):00493         ;  AUTOPLAY - Abort upon key depression
                      (       COMMON.ASM):00494         ;
C30B 7FFF02           (       COMMON.ASM):00495                 CLR     P.PIIOB+PIA$0   ;strobe the keyboard
C30E B6FF00           (       COMMON.ASM):00496                 LDA     P.PIIOA+PIA$0   ;collect PIA info
C311 847F             (       COMMON.ASM):00497                 ANDA    #$7F            ;mask out MSBit
C313 817F             (       COMMON.ASM):00498                 CMPA    #$7F            ;any keys depressed?
C315 270D             (       COMMON.ASM):00499                 BEQ     CLK90           ;   nope
                      (       COMMON.ASM):00500         ;
C317 8EC005           (       COMMON.ASM):00501                 LDX     #GAME           ;force transfer upon keystroke
C31A AF6A             (       COMMON.ASM):00502                 STX     10,S            ;   .
                      (       COMMON.ASM):00503         ;
                      (       COMMON.ASM):00504         ;  GAME - Use POLCAT Routine/Buffer Chars
                      (       COMMON.ASM):00505         ;
C31C 103F             (       COMMON.ASM):00506         CLK60   SWI2                    ;scan the keyboard
C31E 00               (       COMMON.ASM):00507                 FCB     POLCAT-$A000    ;   .
C31F 4D               (       COMMON.ASM):00508                 TSTA                    ;check for nulls
C320 2702             (       COMMON.ASM):00509                 BEQ     CLK90           ;   ignore nulls
C322 8D20             (       COMMON.ASM):00510                 BSR     KBDPUT          ;deposit char in buffer
                      (       COMMON.ASM):00511         ;
C324 B6FF02           (       COMMON.ASM):00512         CLK90   LDA     P.PIIOB+PIA$0   ;reset PIA for next interrupt
C327 3B               (       COMMON.ASM):00513                 RTI                     ;dismiss the interrupt
                      (       COMMON.ASM):00514         ;
                      (       COMMON.ASM):00515         ;  ROLTAB: Rollover Values for Timers
C328 06               (       COMMON.ASM):00516         ROLTAB  FCB     6               ;jiffy
C329 0A               (       COMMON.ASM):00517                 FCB     10              ;tenth
                      (       COMMON.ASM):00518         
                      (       COMMON.ASM):00519         
                      (       COMMON.ASM):00520         
C32A 3C               (       COMMON.ASM):00521                 FCB     60              ;second
C32B 3C               (       COMMON.ASM):00522                 FCB     60              ;minute
C32C 18               (       COMMON.ASM):00523                 FCB     24              ;hour
                      (       COMMON.ASM):00524         
                      (       COMMON.ASM):00525         
                      (       COMMON.ASM):00526         
                      (       COMMON.ASM):00527         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMMON.ASM):00528         ;  K E Y B O A R D   S E R V I C E   R O U T I N E S
                      (       COMMON.ASM):00529         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMMON.ASM):00530         ;
                      (       COMMON.ASM):00531         ;  The keyboard service routines use a 32-byte circular
                      (       COMMON.ASM):00532         ;  buffer.  There is no check for buffer overflow/overrun.
                      (       COMMON.ASM):00533         ;
                      (       COMMON.ASM):00534         ;*****
                      (       COMMON.ASM):00535         ;
                      (       COMMON.ASM):00536         ;  KBDGET: Get a character from the buffer
                      (       COMMON.ASM):00537         ;
                      (       COMMON.ASM):00538         ;  Returns:
                      (       COMMON.ASM):00539         ;       A - char
                      (       COMMON.ASM):00540         ;
C32D 3415             (       COMMON.ASM):00541         KBDGET  PSHS    B,X,CC      ;save regs/condition codes
C32F 1A10             (       COMMON.ASM):00542                 ORCC    #CC.I       ;non-interruptible code
C331 4F               (       COMMON.ASM):00543                 CLRA                ;default char if none found
C332 8E02D1           (       COMMON.ASM):00544                 LDX     #KBDBUF     ;load buffer base addr
C335 D6BC             (       COMMON.ASM):00545                 LDB     KBDHDR      ;load GET offset
C337 D1BD             (       COMMON.ASM):00546                 CMPB    KBDTAL      ;empty buffer?
C339 2707             (       COMMON.ASM):00547                 BEQ     KBDGT9      ;   yes
C33B A685             (       COMMON.ASM):00548                 LDA     B,X         ;get the next char
C33D 5C               (       COMMON.ASM):00549                 INCB                ;bump offset
C33E C41F             (       COMMON.ASM):00550                 ANDB    #%00011111  ;wrap at 32 bytes
C340 D7BC             (       COMMON.ASM):00551                 STB     KBDHDR      ;update offset
C342 3595             (       COMMON.ASM):00552         KBDGT9  PULS    B,X,CC,PC   ;restore regs/condition codes/go home
                      (       COMMON.ASM):00553         ;
                      (       COMMON.ASM):00554         ;  KBDPUT: Add a char to the buffer
                      (       COMMON.ASM):00555         ;
                      (       COMMON.ASM):00556         ;  Inputs:
                      (       COMMON.ASM):00557         ;       A - char
                      (       COMMON.ASM):00558         ;
C344 3415             (       COMMON.ASM):00559         KBDPUT  PSHS    B,X,CC          ;save regs/condition codes
C346 1A10             (       COMMON.ASM):00560                 ORCC    #CC.I           ;non-interruptible code
C348 8E02D1           (       COMMON.ASM):00561                 LDX     #KBDBUF         ;load buffer base address
C34B D6BD             (       COMMON.ASM):00562                 LDB     KBDTAL          ;load PUT offset
C34D A785             (       COMMON.ASM):00563                 STA     B,X             ;deposit byte in buffer
C34F 5C               (       COMMON.ASM):00564                 INCB                    ;bump offset
C350 C41F             (       COMMON.ASM):00565                 ANDB    #%00011111      ;wrap at 32 chars
C352 D7BD             (       COMMON.ASM):00566                 STB     KBDTAL          ;update offset
C354 3595             (       COMMON.ASM):00567                 PULS    B,X,CC,PC       ;restore regs/condition codes/go home
                      (       COMMON.ASM):00568         ;
                      (       COMMON.ASM):00569         ;;;;;        END
                      (    DAGGORATH.ASM):00094                 INCLUDE COMSWI.ASM       ;Common SWI Dispatch
                      (       COMSWI.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMSWI.ASM):00002         ;  C O M M O N   S W I   D I S P A T C H
                      (       COMSWI.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMSWI.ASM):00004         
                      (       COMSWI.ASM):00005                 NAM     COMSWI
                      (       COMSWI.ASM):00006         ;     LIBRY  CD.TXT
                      (       COMSWI.ASM):00007         ;        XDEF    SWISER,SW2SER
                      (       COMSWI.ASM):00008         ;        XDEF    PUPSUB,SNDOBJ,OBJNAM,PLOOK
                      (       COMSWI.ASM):00009                 
                      (       COMSWI.ASM):00010         ;        XREF    ASRD4,ASRD5,ASRD6,BITMSK
                      (       COMSWI.ASM):00011         ;        XREF    STSVDB,PRIVDB,VFTTAB,EXAMIO,FNDOBJ
                      (       COMSWI.ASM):00012         ;        XREF    SYSTCB,DGNGEN,CBIRTH,VIEWER,TXTXXX,TXTSCR
                      (       COMSWI.ASM):00013         ;        XREF    ADJTAB,GENTAB,FNDCEL,ODBTAB,COPY,XXXTAB
                      (       COMSWI.ASM):00014         ;        XREF    WIZ1,T.SHI4,T.SW03,T.TOR4
                      (       COMSWI.ASM):00015         ;        PSCT
                      (       COMSWI.ASM):00016         ;
                      (       COMSWI.ASM):00017         ;  SWISER: SWI Interrupt Handler
                      (       COMSWI.ASM):00018         ;
C356 1CEF             (       COMSWI.ASM):00019         SWISER  ANDCC   #~(CC.I&$FF)    ;restore IRQ interrupts
                      (       COMSWI.ASM):00020         ;
C358 AE6A             (       COMSWI.ASM):00021                 LDX     10,S            ;load return addr
C35A A680             (       COMSWI.ASM):00022                 LDA     ,X+             ;load parameter byte
C35C AF6A             (       COMSWI.ASM):00023                 STX     10,S            ;update return addr
                      (       COMSWI.ASM):00024         ;
C35E 8EC388           (       COMSWI.ASM):00025                 LDX     #SWIBEG         ;first entry in dispatch table
C361 CEC99D           (       COMSWI.ASM):00026                 LDU     #SWITAB         ;offset table addr
C364 E6C0             (       COMSWI.ASM):00027         SSER10  LDB     ,U+             ;load next offset
C366 3A               (       COMSWI.ASM):00028                 ABX                     ;add to base addr
C367 4A               (       COMSWI.ASM):00029                 DECA                    ;decrement counter
C368 2AFA             (       COMSWI.ASM):00030                 BPL     SSER10          ;   not done yet
C36A AFE3             (       COMSWI.ASM):00031                 STX     ,--S            ;stack dispatch addr
                      (       COMSWI.ASM):00032         ;
C36C EC63             (       COMSWI.ASM):00033                 LDD     3,S             ;restore regs before dispatching
C36E AE66             (       COMSWI.ASM):00034                 LDX     6,S             ;   .
C370 EE6A             (       COMSWI.ASM):00035                 LDU     10,S            ;   .
C372 ADF1             (       COMSWI.ASM):00036                 JSR     [,S++]          ;disatch to routine/exit
C374 3B               (       COMSWI.ASM):00037                 RTI                     ;dismiss the interrupt
                      (       COMSWI.ASM):00038         ;
                      (       COMSWI.ASM):00039         ;  SW2SER: SWI2 Interrupt Handler
                      (       COMSWI.ASM):00040         ;
C375 5F               (       COMSWI.ASM):00041         SW2SER  CLRB                    ;switch to BASIC dp
C376 1F9B             (       COMSWI.ASM):00042                 TFR     B,DP            ;   .
                      (       COMSWI.ASM):00043         ;
C378 EE6A             (       COMSWI.ASM):00044                 LDU     10,S            ;load return addr
C37A E6C0             (       COMSWI.ASM):00045                 LDB     ,U+             ;load BASIC parameter byte
C37C EF6A             (       COMSWI.ASM):00046                 STU     10,S            ;update return addr
                      (       COMSWI.ASM):00047         ;
C37E CEA000           (       COMSWI.ASM):00048                 LDU     #$A000          ;table base addr
C381 ADD5             (       COMSWI.ASM):00049                 JSR     [B,U]           ;dispatch to routine
                      (       COMSWI.ASM):00050         ;
C383 A761             (       COMSWI.ASM):00051                 STA     1,S             ;return parameters
C385 AF64             (       COMSWI.ASM):00052                 STX     4,S             ;   .
C387 3B               (       COMSWI.ASM):00053                 RTI                     ;bye
                      (       COMSWI.ASM):00054         
                      (       COMSWI.ASM):00055         
                      (       COMSWI.ASM):00056         
                      (       COMSWI.ASM):00057         ;
                      (       COMSWI.ASM):00058         ;
                      (       COMSWI.ASM):00059         ;  NUM: Define SWI Codes
                      (       COMSWI.ASM):00060         ;
                      (       COMSWI.ASM):00061         ;
     0000             (       COMSWI.ASM):00062         FOO     SET     0
                      (       COMSWI.ASM):00063         ;
     0000             (       COMSWI.ASM):00064         SETFAD  EQU     FOO             ;set amount of fade based on RANGE
                      (       COMSWI.ASM):00065         ;
     0001             (       COMSWI.ASM):00066         VCTLST  EQU     FOO+1           ;vector list processor
                      (       COMSWI.ASM):00067         ;
     0002             (       COMSWI.ASM):00068         OUTSTI  EQU     FOO+2           ;string output (string follows)
                      (       COMSWI.ASM):00069         ;
     0003             (       COMSWI.ASM):00070         OUTSTR  EQU     FOO+3           ;string output
                      (       COMSWI.ASM):00071         ;
     0004             (       COMSWI.ASM):00072         OUTCHR  EQU     FOO+4           ;character output
                      (       COMSWI.ASM):00073         ;
     0005             (       COMSWI.ASM):00074         EXPAND  EQU     FOO+5           ;string decompression routine
                      (       COMSWI.ASM):00075         ;
     0006             (       COMSWI.ASM):00076         EXPAN0  EQU     FOO+6           ;   secondary entry point
                      (       COMSWI.ASM):00077         ;
     0007             (       COMSWI.ASM):00078         RANDOM  EQU     FOO+7           ;random number generator
                      (       COMSWI.ASM):00079         ;
     0008             (       COMSWI.ASM):00080         ZFLIP   EQU     FOO+8           ;current screen clear
                      (       COMSWI.ASM):00081         ;
     0009             (       COMSWI.ASM):00082         ZFLOP   EQU     FOO+9           ;alternate screen clear
                      (       COMSWI.ASM):00083         ;
     000A             (       COMSWI.ASM):00084         CLRSTS  EQU     FOO+10          ;status line clear
                      (       COMSWI.ASM):00085         ;
     000B             (       COMSWI.ASM):00086         CLRPRI  EQU     FOO+11          ;primary text area clear
                      (       COMSWI.ASM):00087         ;
     000C             (       COMSWI.ASM):00088         HUPDAT  EQU     FOO+12          ;update the heartrate
                      (       COMSWI.ASM):00089         ;
     000D             (       COMSWI.ASM):00090         STATUS  EQU     FOO+13          ;update the status line
                      (       COMSWI.ASM):00091         ;
     000E             (       COMSWI.ASM):00092         PUPDAT  EQU     FOO+14          ;update the main screen
                      (       COMSWI.ASM):00093         ;
     000F             (       COMSWI.ASM):00094         PROMPT  EQU     FOO+15          ;prompt the human for input
                      (       COMSWI.ASM):00095         ;
     0010             (       COMSWI.ASM):00096         WAIT    EQU     FOO+16          ;wait for a number of jiffies
                      (       COMSWI.ASM):00097         ;
     0011             (       COMSWI.ASM):00098         ZERO    EQU     FOO+17          ;clear RAM
                      (       COMSWI.ASM):00099         ;
     0012             (       COMSWI.ASM):00100         NEGRAM  EQU     FOO+18          ;set RAM to negative one
                      (       COMSWI.ASM):00101         ;
     0013             (       COMSWI.ASM):00102         WIZIN   EQU     FOO+19          ;fade-in
                      (       COMSWI.ASM):00103         ;   
     0014             (       COMSWI.ASM):00104         WIZIN0  EQU     FOO+20          ;   secondary entry point
                      (       COMSWI.ASM):00105         ;
     0015             (       COMSWI.ASM):00106         WIZOUT  EQU     FOO+21          ;fade-out
                      (       COMSWI.ASM):00107         ;
     0016             (       COMSWI.ASM):00108         PREPAR  EQU     FOO+22          ;"PREPARE!" msg on EXAMINE screen
                      (       COMSWI.ASM):00109         ;
     0017             (       COMSWI.ASM):00110         OBIRTH  EQU     FOO+23          ;object creation routine
                      (       COMSWI.ASM):00111         ;
     0018             (       COMSWI.ASM):00112         OCBFIL  EQU     FOO+24          ;OCB filling routine
                      (       COMSWI.ASM):00113         
                      (       COMSWI.ASM):00114         
                      (       COMSWI.ASM):00115         
                      (       COMSWI.ASM):00116         ;
     0019             (       COMSWI.ASM):00117         INIVU   EQU     FOO+25          ;create initial view
                      (       COMSWI.ASM):00118         ;
     001A             (       COMSWI.ASM):00119         NEWLVL  EQU     FOO+26          ;create a new level
                      (       COMSWI.ASM):00120         ;
     001B             (       COMSWI.ASM):00121         ISOUND  EQU     FOO+27          ;   secondary entry point
                      (       COMSWI.ASM):00122         ;
     001C             (       COMSWI.ASM):00123         SOUNDS  EQU     FOO+28          ;sound routines
                      (       COMSWI.ASM):00124         ;
     C388             (       COMSWI.ASM):00125         SWIBEG  EQU     *               ;where the code starts
                      (       COMSWI.ASM):00126         ;
                      (       COMSWI.ASM):00127         ;;;;;        END
                      (    DAGGORATH.ASM):00095                 INCLUDE VCTLST.ASM       ;Display list Processor
                      (       VCTLST.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       VCTLST.ASM):00002         ; D I S P L A Y   L I S T   P R O C E S S O R
                      (       VCTLST.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       VCTLST.ASM):00004         ;
                      (       VCTLST.ASM):00005         ;  Inputs:
                      (       VCTLST.ASM):00006         ;       X - vector list pointer
                      (       VCTLST.ASM):00007         ;       VXSCAL - radix-7 scaling constant for Y
                      (       VCTLST.ASM):00008         ;       VYSCAL - radix-7 scaling constant for Y
                      (       VCTLST.ASM):00009         ;
                      (       VCTLST.ASM):00010         ;  Notes:
                      (       VCTLST.ASM):00011         ;
                      (       VCTLST.ASM):00012         ;       B B B B B B B B
                      (       VCTLST.ASM):00013         ;        ^
                      (       VCTLST.ASM):00014         ;        !
                      (       VCTLST.ASM):00015         ;        +-------------------Radix-7 Binary Point
                      (       VCTLST.ASM):00016         ;
                      (       VCTLST.ASM):00017         ;    Coordinate list is stored in memory as: y,x y,x y,x.....
                      (       VCTLST.ASM):00018         ;
                      (       VCTLST.ASM):00019         ;    Since there are no y values greater than 191, values from
                      (       VCTLST.ASM):00020         ;    192 to 255 are available for use as flags and indicators.
                      (       VCTLST.ASM):00021         ;
                      (       VCTLST.ASM):00022         ;
                      (       VCTLST.ASM):00023         ;
                      (       VCTLST.ASM):00024         ;  SETFAX: Set the Lighting Levels Based on RANGE
                      (       VCTLST.ASM):00025         ;
C388 966E             (       VCTLST.ASM):00026         SETFAX  LDA     RLIGHT          ;assume regular light
C38A 0D75             (       VCTLST.ASM):00027                 TST     MAGFLG          ;   .
C38C 2704             (       VCTLST.ASM):00028                 BEQ     SFAD10          ;   regular light
C38E 966F             (       VCTLST.ASM):00029                 LDA     MLIGHT          ;magic light
C390 0F75             (       VCTLST.ASM):00030                 CLR     MAGFLG          ;reset flag
                      (       VCTLST.ASM):00031         ;
C392 5F               (       VCTLST.ASM):00032         SFAD10  CLRB                    ;assume maximum brightness
C393 8007             (       VCTLST.ASM):00033                 SUBA    #7              ;offset brightness level
C395 908B             (       VCTLST.ASM):00034                 SUBA    RANGE           ;attenuate brightness with distance
C397 2C0A             (       VCTLST.ASM):00035                 BGE     SFAD30          ;   use maximum brightness
                      (       VCTLST.ASM):00036         ;
C399 5A               (       VCTLST.ASM):00037                 DECB                    ;assume total darkness
C39A 81F9             (       VCTLST.ASM):00038                 CMPA    #-7             ;   .
C39C 2F05             (       VCTLST.ASM):00039                 BLE     SFAD30          ;   total darkness
                      (       VCTLST.ASM):00040         ;
C39E 8ECB9E           (       VCTLST.ASM):00041                 LDX     #BITMSK+8       ;magic table base addr
C3A1 E686             (       VCTLST.ASM):00042                 LDB     A,X             ;load lighting value
                      (       VCTLST.ASM):00043         ;
C3A3 D72D             (       VCTLST.ASM):00044         SFAD30  STB     VCTFAD          ;set fade value
C3A5 39               (       VCTLST.ASM):00045         COMRTS  RTS                     ;bye
                      (       VCTLST.ASM):00046         
                      (       VCTLST.ASM):00047         
                      (       VCTLST.ASM):00048         
                      (       VCTLST.ASM):00049         ;
                      (       VCTLST.ASM):00050         ;  VCTLSX: Vector List Processing Routine
                      (       VCTLST.ASM):00051         ;
     C3A6             (       VCTLST.ASM):00052         VCTLSX  EQU     *               ;where it all begins
C3A6 0F51             (       VCTLST.ASM):00053                 CLR     DRWFLG          ;flag - no starting (Y,X)
                      (       VCTLST.ASM):00054         ;
                      (       VCTLST.ASM):00055         ; Test if VCTFAD says to black out this vector list
                      (       VCTLST.ASM):00056         ;
C3A8 962D             (       VCTLST.ASM):00057                 LDA     VCTFAD          ;load fade-out value
C3AA 4C               (       VCTLST.ASM):00058                 INCA                    ;is it $FF?
C3AB 274D             (       VCTLST.ASM):00059                 BEQ     VCTEND          ;   draw nothing/exit
                      (       VCTLST.ASM):00060         ;
                      (       VCTLST.ASM):00061         ; Special Vector List Control Code Processing
                      (       VCTLST.ASM):00062         ;
C3AD E684             (       VCTLST.ASM):00063         VCTL10  LDB     ,X              ;load y-coordinate
C3AF C0FA             (       VCTLST.ASM):00064                 SUBB    #V$RTS          ;special control code?
C3B1 2520             (       VCTLST.ASM):00065                 BCS     VCTABS          ;   no - absolute mode processing
C3B3 3001             (       VCTLST.ASM):00066                 LEAX    1,X             ;advance byte ptr
C3B5 108EC3BD         (       VCTLST.ASM):00067                 LDY     #VCTDIS         ;dispatch table addr
C3B9 E6A5             (       VCTLST.ASM):00068                 LDB     B,Y             ;load offset value
C3BB 6EA5             (       VCTLST.ASM):00069                 JMP     B,Y             ;   .
                      (       VCTLST.ASM):00070         ;
     C3BD             (       VCTLST.ASM):00071         VCTDIS  EQU     *               ;dispatch table
C3BD 10               (       VCTLST.ASM):00072                 FCB     VCTRTS-VCTDIS   ;($FA) - V$RTS
C3BE 06               (       VCTLST.ASM):00073                 FCB     VCTJSR-VCTDIS   ;($FB) - V$JSR
C3BF 5E               (       VCTLST.ASM):00074                 FCB     VCTREL-VCTDIS   ;($FC) - V$REL
C3C0 0D               (       VCTLST.ASM):00075                 FCB     VCTJMP-VCTDIS   ;($FD) - V$JMP
C3C1 3D               (       VCTLST.ASM):00076                 FCB     VCTEND-VCTDIS   ;($FE) - V$END
C3C2 12               (       VCTLST.ASM):00077                 FCB     VCTNEW-VCTDIS   ;($FF) - V$NEW
                      (       VCTLST.ASM):00078         
                      (       VCTLST.ASM):00079         
                      (       VCTLST.ASM):00080         
                      (       VCTLST.ASM):00081         ;
                      (       VCTLST.ASM):00082         ;  VCTJSR: Jump to Vector List Subroutine
                      (       VCTLST.ASM):00083         ;
C3C3 EC81             (       VCTLST.ASM):00084         VCTJSR  LDD     ,X++            ;load subroutine addr
C3C5 AFE3             (       VCTLST.ASM):00085                 STX     ,--S            ;store return addr
C3C7 1F01             (       VCTLST.ASM):00086                 TFR     D,X             ;process subroutine
C3C9 8C               (       VCTLST.ASM):00087                 FCB     SKIP2           ;drop into V$NEW...
                      (       VCTLST.ASM):00088         ;
                      (       VCTLST.ASM):00089         ;  VCTJMP: Jump to a New Vector List
                      (       VCTLST.ASM):00090         ;
C3CA AE84             (       VCTLST.ASM):00091         VCTJMP  LDX     ,X              ;load new vector list addr
C3CC 8C               (       VCTLST.ASM):00092                 FCB     SKIP2           ;drop into V$NEW...
                      (       VCTLST.ASM):00093         ;
                      (       VCTLST.ASM):00094         ;  VCTRTS: Return from Vector List Subroutine
                      (       VCTLST.ASM):00095         ;
C3CD AEE1             (       VCTLST.ASM):00096         VCTRTS  LDX     ,S++            ;load return addr/drop into V$NEW...
                      (       VCTLST.ASM):00097         ;
                      (       VCTLST.ASM):00098         ;  VCTNEW: Start a new vector list
                      (       VCTLST.ASM):00099         ;
C3CF 0F51             (       VCTLST.ASM):00100         VCTNEW  CLR     DRWFLG          ;indicate we should get new start
C3D1 20DA             (       VCTLST.ASM):00101                 BRA     VCTL10          ;loop for next coordinates
                      (       VCTLST.ASM):00102         
                      (       VCTLST.ASM):00103         
                      (       VCTLST.ASM):00104         
                      (       VCTLST.ASM):00105         ;
                      (       VCTLST.ASM):00106         ;  VCTABS: Absolute Mode Processing
                      (       VCTLST.ASM):00107         ;
C3D3 0D51             (       VCTLST.ASM):00108         VCTABS  TST     DRWFLG          ;have we set starting coordinates?
C3D5 2606             (       VCTLST.ASM):00109                 BNE     VABS00          ;   yes
                      (       VCTLST.ASM):00110         ;
C3D7 8D0D             (       VCTLST.ASM):00111                 BSR     VABS20          ;set starting coordinates
C3D9 0A51             (       VCTLST.ASM):00112                 DEC     DRWFLG          ;say we have started
C3DB 20D0             (       VCTLST.ASM):00113                 BRA     VCTL10          ;loop for next coordinates
                      (       VCTLST.ASM):00114         ;
C3DD 8D05             (       VCTLST.ASM):00115         VABS00  BSR     VABS10          ;set end point
C3DF BDCABF           (       VCTLST.ASM):00116                 JSR     VECTOR          ;draw the vector/exit
C3E2 20C9             (       VCTLST.ASM):00117                 BRA     VCTL10          ;loop for next coordinates
                      (       VCTLST.ASM):00118         ;
C3E4 8D15             (       VCTLST.ASM):00119         VABS10  BSR     NEWOLD          ;end point becomes beginning
C3E6 E680             (       VCTLST.ASM):00120         VABS20  LDB     ,X+             ;load Y-coordinate
C3E8 D754             (       VCTLST.ASM):00121                 STB     TY              ;store absolute value
C3EA 8D18             (       VCTLST.ASM):00122                 BSR     ASCALY          ;scale Y-coordinate
C3EC D307             (       VCTLST.ASM):00123                 ADDD    VCNTRY          ;add Y-centroid
C3EE DD33             (       VCTLST.ASM):00124                 STD     Y1              ;store new end point
                      (       VCTLST.ASM):00125         ;
C3F0 E680             (       VCTLST.ASM):00126                 LDB     ,X+             ;load X-coordinate
C3F2 D752             (       VCTLST.ASM):00127                 STB     TX              ;store absolute value
C3F4 8D14             (       VCTLST.ASM):00128                 BSR     ASCALX          ;scale X-coordinate
C3F6 D305             (       VCTLST.ASM):00129                 ADDD    VCNTRX          ;add X-centroid
C3F8 DD35             (       VCTLST.ASM):00130                 STD     X1              ;store new end point
C3FA 39               (       VCTLST.ASM):00131         VCTEND  RTS                     ;done
                      (       VCTLST.ASM):00132         
                      (       VCTLST.ASM):00133         
                      (       VCTLST.ASM):00134         
                      (       VCTLST.ASM):00135         ;
                      (       VCTLST.ASM):00136         ;  NEWOLD:  Copy Ending (Y,X) to Starting (Y,X)
                      (       VCTLST.ASM):00137         ;
C3FB DC33             (       VCTLST.ASM):00138         NEWOLD  LDD     Y1              ;copy Y-end points
C3FD DD2F             (       VCTLST.ASM):00139                 STD     Y0              ;   .
C3FF DC35             (       VCTLST.ASM):00140                 LDD     X1              ;copy X-end points
C401 DD31             (       VCTLST.ASM):00141                 STD     X0              ;   .
C403 39               (       VCTLST.ASM):00142                 RTS                     ;done
                      (       VCTLST.ASM):00143         ;
                      (       VCTLST.ASM):00144         ;  mSCALc: Scale Coordinates
                      (       VCTLST.ASM):00145         ;
                      (       VCTLST.ASM):00146         ;  Where:
                      (       VCTLST.ASM):00147         ;       m - (R)elative or (A)bsolute
                      (       VCTLST.ASM):00148         ;       c - (Y)-coordinate or (X)-coordinate
                      (       VCTLST.ASM):00149         ;  Inputs:
                      (       VCTLST.ASM):00150         ;       A - Y/X coordinate
                      (       VCTLST.ASM):00151         ;  Returns:
                      (       VCTLST.ASM):00152         ;       D - Y/X coordinate scaled
C404 9650             (       VCTLST.ASM):00153         ASCALY  LDA     VYSCAL          ;load Y-scaling value
C406 D008             (       VCTLST.ASM):00154                 SUBB    VCNTRY+1        ;distance from centroid
C408 2004             (       VCTLST.ASM):00155                 BRA     ASCA10          ;   .
C40A 964F             (       VCTLST.ASM):00156         ASCALX  LDA     VXSCAL          ;load X-scaling value    
C40C D006             (       VCTLST.ASM):00157                 SUBB    VCNTRX+1        ;distance from centroid
C40E 2503             (       VCTLST.ASM):00158         ASCA10  BCS     SCAL10          ;   negative
                      (       VCTLST.ASM):00159         ;
C410 3D               (       VCTLST.ASM):00160         SCAL00  MUL                     ;perform scaling
C411 2005             (       VCTLST.ASM):00161                 BRA     SCAL20          ;   .
                      (       VCTLST.ASM):00162         ;
C413 50               (       VCTLST.ASM):00163         SCAL10  NEGB                    ;absolute value for scaling
C414 3D               (       VCTLST.ASM):00164                 MUL                     ;unsigned multiply
C415 BDCAA1           (       VCTLST.ASM):00165                 JSR     NEGD            ;fix sign
C418 7ED3AE           (       VCTLST.ASM):00166         SCAL20  JMP     ASRD7           ;RADIX-7/exit
                      (       VCTLST.ASM):00167         ;
                      (       VCTLST.ASM):00168         
                      (       VCTLST.ASM):00169         
                      (       VCTLST.ASM):00170         
                      (       VCTLST.ASM):00171         ;
                      (       VCTLST.ASM):00172         ;  VCTREL: Relative Mode Processing
                      (       VCTLST.ASM):00173         ;
C41B A680             (       VCTLST.ASM):00174         VCTREL  LDA     ,X+             ;check for V$ABS
C41D 27B0             (       VCTLST.ASM):00175                 BEQ     VCTNEW          ;   saw V$ABS/simulate V$NEW/done
C41F 8DDA             (       VCTLST.ASM):00176                 BSR     NEWOLD          ;copy end points to start ponits
                      (       VCTLST.ASM):00177         ;
                      (       VCTLST.ASM):00178         ; Extract Y-coordinate nybble
                      (       VCTLST.ASM):00179         ;
C421 E61F             (       VCTLST.ASM):00180                 LDB     -1,X            ;recover original data byte
C423 57               (       VCTLST.ASM):00181                 ASRB                    ;MSNibble into LSNibble (signed)
C424 57               (       VCTLST.ASM):00182                 ASRB
C425 57               (       VCTLST.ASM):00183                 ASRB
C426 57               (       VCTLST.ASM):00184                 ASRB
C427 58               (       VCTLST.ASM):00185                 LSLB                    ;range (-16:14)
C428 DB54             (       VCTLST.ASM):00186                 ADDB    TY              ;effect relative change in absolute
C42A D754             (       VCTLST.ASM):00187                 STB     TY              ;   .
C42C 8DD6             (       VCTLST.ASM):00188                 BSR     ASCALY          ;scale y-coordinate
C42E D307             (       VCTLST.ASM):00189                 ADDD    VCNTRY          ;add Y-centroid
C430 DD33             (       VCTLST.ASM):00190                 STD     Y1              ;store as new end point
                      (       VCTLST.ASM):00191         ;
                      (       VCTLST.ASM):00192         ; Extract and process X-coordinate nybble.
                      (       VCTLST.ASM):00193         ;
C432 E61F             (       VCTLST.ASM):00194                 LDB     -1,X            ;recover original data byte
C434 C40F             (       VCTLST.ASM):00195                 ANDB    #%00001111      ;extract LSNibble
C436 C508             (       VCTLST.ASM):00196                 BITB    #%00001000      ;check "sign bit"
C438 2702             (       VCTLST.ASM):00197                 BEQ     VREL20          ;   positive
C43A CAF0             (       VCTLST.ASM):00198                 ORB     #%11110000      ;sign extend
C43C 58               (       VCTLST.ASM):00199         VREL20  LSLB                    ;range (-16:14)
C43D DB52             (       VCTLST.ASM):00200                 ADDB    TX              ;effect relative change
C43F D752             (       VCTLST.ASM):00201                 STB     TX              ;   .
C441 8DC7             (       VCTLST.ASM):00202                 BSR     ASCALX          ;scale x-coordinate
C443 D305             (       VCTLST.ASM):00203                 ADDD    VCNTRX          ;add x-centroid
C445 DD35             (       VCTLST.ASM):00204                 STD     X1              ;store new end point
                      (       VCTLST.ASM):00205         ;
C447 BDCABF           (       VCTLST.ASM):00206                 JSR     VECTOR          ;draw the vector
C44A 20CF             (       VCTLST.ASM):00207                 BRA     VCTREL          ;loop until V$ABS is seen
                      (       VCTLST.ASM):00208         ;
                      (       VCTLST.ASM):00209         ;;;;;        END
                      (    DAGGORATH.ASM):00096                 INCLUDE TXTSER.ASM       ;Text Service Routine
                      (       TXTSER.ASM):00001         ;        TTL TXTSER - Text Service Routines
                      (       TXTSER.ASM):00002         ;
                      (       TXTSER.ASM):00003         ;  TXTSTI: Compressed String Output Immediate
                      (       TXTSER.ASM):00004         ;          Called via COMSWI.
                      (       TXTSER.ASM):00005         ;  Inputs:
                      (       TXTSER.ASM):00006         ;       PC - points to compressed
                      (       TXTSER.ASM):00007         ;  Returns:
                      (       TXTSER.ASM):00008         ;       PC <-- PC + (length of string)
                      (       TXTSER.ASM):00009         ;
C44C AE6C             (       TXTSER.ASM):00010         TXTSTI  LDX     12,S            ;load string addr
C44E 3F               (       TXTSER.ASM):00011                 SWI                     ;expand the string
C44F 05               (       TXTSER.ASM):00012                 FCB     EXPAND          ;   .
C450 AF6C             (       TXTSER.ASM):00013                 STX     12,S            ;update the return addr
C452 8E0335           (       TXTSER.ASM):00014                 LDX     #STRING+1       ;expanded string addr
C455 8C               (       TXTSER.ASM):00015                 FCB     SKIP2           ;drop into TXTSTR
                      (       TXTSER.ASM):00016         ;
                      (       TXTSER.ASM):00017         ;  TXTSTR: Output a character string to the display
                      (       TXTSER.ASM):00018         ;          Called via COMSWI.
                      (       TXTSER.ASM):00019         ;  Input:
                      (       TXTSER.ASM):00020         ;       X - pointer to string
                      (       TXTSER.ASM):00021         ;
C456 3F               (       TXTSER.ASM):00022         TSTR10  SWI                     ;print the char
C457 04               (       TXTSER.ASM):00023                 FCB     OUTCHR          ;   .
C458 A680             (       TXTSER.ASM):00024         TXTSTR  LDA     ,X+             ;get next char
C45A 2AFA             (       TXTSER.ASM):00025                 BPL     TSTR10          ;   loop until terminator ($FF)
C45C 39               (       TXTSER.ASM):00026                 RTS                     ;exit
                      (       TXTSER.ASM):00027         ;
                      (       TXTSER.ASM):00028         ;  TXTCHR: Output a character to the screen
                      (       TXTSER.ASM):00029         ;          Called via COMSWI.
                      (       TXTSER.ASM):00030         ;
                      (       TXTSER.ASM):00031         ;  Input:
                      (       TXTSER.ASM):00032         ;       A - Char to write
                      (       TXTSER.ASM):00033         ;
C45D 0DB7             (       TXTSER.ASM):00034         TXTCHR  TST     TXBFLG          ;do standard i/o?
C45F 2603             (       TXTSER.ASM):00035                 BNE     TCHR10          ;   nope
C461 CE0390           (       TXTSER.ASM):00036                 LDU     #TXTPRI         ;i/o to primary text area
                      (       TXTSER.ASM):00037         ;
C464 AE44             (       TXTSER.ASM):00038         TCHR10  LDX     P.TXCUR,U       ;load cursor position
C466 BDC9BA           (       TXTSER.ASM):00039                 JSR     TXTXXX          ;dispatch to routine
C469 AC42             (       TXTSER.ASM):00040                 CMPX    P.TXCNT,U       ;need to scroll?
C46B 2503             (       TXTSER.ASM):00041                 BLO     TCHR99          ;   nope
C46D BDC9DC           (       TXTSER.ASM):00042                 JSR     TXTSCR          ;scroll one line
C470 AF44             (       TXTSER.ASM):00043         TCHR99  STX     P.TXCUR,U       ;update cursor position
C472 39               (       TXTSER.ASM):00044                 RTS                     ;go home
                      (       TXTSER.ASM):00045         ;
                      (       TXTSER.ASM):00046         ;;;;;        END
                      (    DAGGORATH.ASM):00097                 INCLUDE EXPAND.ASM       ;Byte Expansion Routine
                      (       EXPAND.ASM):00001         ;  EXPAND: 5-Bit Character String Expansion Routine
                      (       EXPAND.ASM):00002         ;
                      (       EXPAND.ASM):00003         ;  Inputs:
                      (       EXPAND.ASM):00004         ;       X - pointer to 5-bit string
                      (       EXPAND.ASM):00005         ;       U - expansion buffer addr (EXPAN0 only)
                      (       EXPAND.ASM):00006         ;  Returns:
                      (       EXPAND.ASM):00007         ;       X - points past 5-bit string
                      (       EXPAND.ASM):00008         ;       STRING - expanded 5-bit character string
                      (       EXPAND.ASM):00009         ;
C473 CE0335           (       EXPAND.ASM):00010         EXPANX  LDU     #STRING+1       ;default expansion buffer addr
     C476             (       EXPAND.ASM):00011         EXPA00  EQU     *               ;secondary entry point
                      (       EXPAND.ASM):00012         ;
                      (       EXPAND.ASM):00013         ;  Expand 5-Bit Character String
                      (       EXPAND.ASM):00014         ;
C476 315F             (       EXPAND.ASM):00015                 LEAY    -1,U            ;IY <- 5-bit offset counter address
C478 6FA4             (       EXPAND.ASM):00016                 CLR     ,Y              ;reset 5-bit char offset (2022 n.b. original was 0,Y)
C47A 8D14             (       EXPAND.ASM):00017                 BSR     GETFIV          ;get first 5-bit char
C47C 1F98             (       EXPAND.ASM):00018                 TFR     B,A             ;use as byte count
                      (       EXPAND.ASM):00019         ;
C47E 8D10             (       EXPAND.ASM):00020         EXPA10  BSR     GETFIV          ;get the next 5-bit character
C480 E7C0             (       EXPAND.ASM):00021                 STB     ,U+             ;buffer bytes...
C482 4A               (       EXPAND.ASM):00022                 DECA                    ;decrement byte count
C483 2AF9             (       EXPAND.ASM):00023                 BPL     EXPA10          ;   loop until done
C485 A7C4             (       EXPAND.ASM):00024                 STA     ,U              ;terminate buffer with $FF
                      (       EXPAND.ASM):00025         ;
                      (       EXPAND.ASM):00026         ;  Strings Terminate on Byte Boundaries
                      (       EXPAND.ASM):00027         ;
C487 6DA4             (       EXPAND.ASM):00028                 TST     ,Y              ;are we already on byte boundary? (2022 n.b. original was 0,Y)
C489 2702             (       EXPAND.ASM):00029                 BEQ     EXPA90          ;   yes
C48B 3001             (       EXPAND.ASM):00030                 LEAX    1,X             ;advance to next byte
                      (       EXPAND.ASM):00031         ;
                      (       EXPAND.ASM):00032         ;  Found our man...
                      (       EXPAND.ASM):00033         ;
C48D AF66             (       EXPAND.ASM):00034         EXPA90  STX     6,S             ;return parameter
C48F 39               (       EXPAND.ASM):00035                 RTS                     ;that's all folks!!!
                      (       EXPAND.ASM):00036         
                      (       EXPAND.ASM):00037         
                      (       EXPAND.ASM):00038         
                      (       EXPAND.ASM):00039         ;
                      (       EXPAND.ASM):00040         ;  GETFIV: Get the next 5-bit Char
                      (       EXPAND.ASM):00041         ;
                      (       EXPAND.ASM):00042         ;  Inputs:
                      (       EXPAND.ASM):00043         ;       X - pointer to compressed string (byte pointer)
                      (       EXPAND.ASM):00044         ;       0,Y - 5-bit offset counter
                      (       EXPAND.ASM):00045         ;  Returns:
                      (       EXPAND.ASM):00046         ;       B - 5-bit character
                      (       EXPAND.ASM):00047         ;       X - updated
                      (       EXPAND.ASM):00048         ;       0,Y - updated
                      (       EXPAND.ASM):00049         ;
C490 3442             (       EXPAND.ASM):00050         GETFIV  PSHS    A,U             ;save regs
                      (       EXPAND.ASM):00051         ;
                      (       EXPAND.ASM):00052         ;  Dispatch to correct routine
                      (       EXPAND.ASM):00053         ;
C492 A6A4             (       EXPAND.ASM):00054                 LDA     ,Y              ;use 5-bit char offset as index (2022 n.b. original was 0,Y)
C494 CEC4A6           (       EXPAND.ASM):00055                 LDU     #FIVDSP         ;table base addr
C497 A6C6             (       EXPAND.ASM):00056                 LDA     A,U             ;load offset value
C499 ADC6             (       EXPAND.ASM):00057                 JSR     A,U             ;dispatch
                      (       EXPAND.ASM):00058         ;
                      (       EXPAND.ASM):00059         ;  Update 5-bit Offset Counter
                      (       EXPAND.ASM):00060         ;
C49B A6A4             (       EXPAND.ASM):00061                 LDA     ,Y              ;advance 5-bit offset counter (2022 n.b. original was 0,Y)
C49D 4C               (       EXPAND.ASM):00062                 INCA                    ;   .
C49E 8407             (       EXPAND.ASM):00063                 ANDA    #7              ;MOD 8
C4A0 A7A4             (       EXPAND.ASM):00064                 STA     ,Y             ;   .  (2022 n.b. original was 0,Y)
                      (       EXPAND.ASM):00065         ;
                      (       EXPAND.ASM):00066         ;  Return Byte
                      (       EXPAND.ASM):00067         ;
C4A2 C41F             (       EXPAND.ASM):00068                 ANDB    #$1F            ;use only lower 5-bits
C4A4 35C2             (       EXPAND.ASM):00069                 PULS    A,U,PC          ;restore regs/exit
                      (       EXPAND.ASM):00070         
                      (       EXPAND.ASM):00071         
                      (       EXPAND.ASM):00072         
                      (       EXPAND.ASM):00073         ;
                      (       EXPAND.ASM):00074         ;  5-bit Character Extraction Routine Dispatch Table
                      (       EXPAND.ASM):00075         ;
C4A6 08               (       EXPAND.ASM):00076         FIVDSP  FCB     CHAR00-FIVDSP
C4A7 0E               (       EXPAND.ASM):00077                 FCB     CHAR10-FIVDSP
C4A8 13               (       EXPAND.ASM):00078                 FCB     CHAR20-FIVDSP
C4A9 17               (       EXPAND.ASM):00079                 FCB     CHAR30-FIVDSP
C4AA 1C               (       EXPAND.ASM):00080                 FCB     CHAR40-FIVDSP
C4AB 21               (       EXPAND.ASM):00081                 FCB     CHAR50-FIVDSP
C4AC 25               (       EXPAND.ASM):00082                 FCB     CHAR60-FIVDSP
C4AD 2A               (       EXPAND.ASM):00083                 FCB     CHAR70-FIVDSP
                      (       EXPAND.ASM):00084         ;
                      (       EXPAND.ASM):00085         ;  5-bit Char Extraction Routines
                      (       EXPAND.ASM):00086         ;
C4AE E684             (       EXPAND.ASM):00087         CHAR00  LDB     ,X              ;load byte
C4B0 54               (       EXPAND.ASM):00088         CHAR02  LSRB                    ;shift into position
C4B1 54               (       EXPAND.ASM):00089         CHAR04  LSRB                    ;   .
C4B2 54               (       EXPAND.ASM):00090         CHAR06  LSRB                    ;   .
C4B3 39               (       EXPAND.ASM):00091                 RTS                     ;done
                      (       EXPAND.ASM):00092         ;
C4B4 EC80             (       EXPAND.ASM):00093         CHAR10  LDD     ,X+             ;load byte (across boundary)
C4B6 7ED3B0           (       EXPAND.ASM):00094                 JMP     ASRD6           ;shift into position/exit
                      (       EXPAND.ASM):00095         ;
C4B9 E684             (       EXPAND.ASM):00096         CHAR20  LDB     ,X              ;load byte
C4BB 20F5             (       EXPAND.ASM):00097                 BRA     CHAR06          ;shift into position/exit
                      (       EXPAND.ASM):00098         ;
C4BD EC80             (       EXPAND.ASM):00099         CHAR30  LDD     ,X+             ;load byte (across boundary)
C4BF 7ED3B4           (       EXPAND.ASM):00100                 JMP     ASRD4           ;shift into position/exit
                      (       EXPAND.ASM):00101         ;
C4C2 EC80             (       EXPAND.ASM):00102         CHAR40  LDD     ,X+             ;load byte (across boundary)
C4C4 7ED3AE           (       EXPAND.ASM):00103                 JMP     ASRD7           ;shift into position/exit
                      (       EXPAND.ASM):00104         ;
C4C7 E684             (       EXPAND.ASM):00105         CHAR50  LDB     ,X              ;load byte
C4C9 20E6             (       EXPAND.ASM):00106                 BRA     CHAR04          ;shift into position/exit
                      (       EXPAND.ASM):00107         ;
C4CB EC80             (       EXPAND.ASM):00108         CHAR60  LDD     ,X+             ;load byte (across boundary)
C4CD 7ED3B2           (       EXPAND.ASM):00109                 JMP     ASRD5           ;shift into position/exit
                      (       EXPAND.ASM):00110         ;
C4D0 E680             (       EXPAND.ASM):00111         CHAR70  LDB     ,X+             ;load byte
C4D2 39               (       EXPAND.ASM):00112                 RTS                     ;already in position/exit
                      (       EXPAND.ASM):00113         ;;;;;        END
                      (    DAGGORATH.ASM):00098                 INCLUDE RANDOM.ASM       ;Random Number Generator
                      (       RANDOM.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       RANDOM.ASM):00002         ;  R A N D O M   N U M B E R   G E N E R A T O R
                      (       RANDOM.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       RANDOM.ASM):00004         ;
                      (       RANDOM.ASM):00005         ; General Purpose Random Number Generator
                      (       RANDOM.ASM):00006         ; by the Polynomial Method.
                      (       RANDOM.ASM):00007         ;
                      (       RANDOM.ASM):00008         ;      Returns an 8-bit random number in ACCA.
                      (       RANDOM.ASM):00009         ;
C4D3 8E0008           (       RANDOM.ASM):00010         RANDOX  LDX     #$0008          ;initialize shift counter
C4D6 5F               (       RANDOM.ASM):00011         RND1    CLRB                    ;clear feedback byte
C4D7 108E0008         (       RANDOM.ASM):00012                 LDY     #$0008
C4DB 966D             (       RANDOM.ASM):00013                 LDA     SEED+2          ;load byte containing feedback bits
C4DD 84E1             (       RANDOM.ASM):00014                 ANDA    #$E1            ;mask all except feedback bits
C4DF 48               (       RANDOM.ASM):00015         RND2    LSLA                    ;shift feedback bits into carry
C4E0 2401             (       RANDOM.ASM):00016                 BCC     RND3
C4E2 5C               (       RANDOM.ASM):00017                 INCB                    ;count numnber of ones
C4E3 313F             (       RANDOM.ASM):00018         RND3    LEAY    -1,Y            ;loop eight times
C4E5 26F8             (       RANDOM.ASM):00019                 BNE     RND2
C4E7 54               (       RANDOM.ASM):00020                 LSRB                    ;shift LSB of feedback into carry
C4E8 096B             (       RANDOM.ASM):00021                 ROL     SEED            ;24-bit shift
C4EA 096C             (       RANDOM.ASM):00022                 ROL     SEED+1
C4EC 096D             (       RANDOM.ASM):00023                 ROL     SEED+2
C4EE 301F             (       RANDOM.ASM):00024                 LEAX    -1,X            ;shift eight times
C4F0 26E4             (       RANDOM.ASM):00025                 BNE     RND1
C4F2 966B             (       RANDOM.ASM):00026                 LDA     SEED            ;grab output value
C4F4 A763             (       RANDOM.ASM):00027                 STA     3,S             ;modify A on the way out...
C4F6 39               (       RANDOM.ASM):00028                 RTS                     ;exit
                      (       RANDOM.ASM):00029         ;;;;;        END
                      (    DAGGORATH.ASM):00099                 INCLUDE CLEAR.ASM        ;Display Clearing Routine
                      (        CLEAR.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (        CLEAR.ASM):00002         ;  D I S P L A Y   C L E A R I N G   R O U T I N E
                      (        CLEAR.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (        CLEAR.ASM):00004         ;
C4F7 DE09             (        CLEAR.ASM):00005         ZFLIPX  LDU     FLIP            ;current VDB ptr
C4F9 8C               (        CLEAR.ASM):00006                 FCB     SKIP2           ;   .
C4FA DE0B             (        CLEAR.ASM):00007         ZFLOPX  LDU     FLOP            ;alternate VDB ptr
C4FC D62C             (        CLEAR.ASM):00008                 LDB     VDGINV          ;load inverse mode value
C4FE 8D1B             (        CLEAR.ASM):00009                 BSR     CLEAR           ;clear the screen
C500 EF6A             (        CLEAR.ASM):00010                 STU     10,S            ;return the VDB ptr
C502 39               (        CLEAR.ASM):00011                 RTS                     ;bye
                      (        CLEAR.ASM):00012         ;
C503 8E0388           (        CLEAR.ASM):00013         CLRSTX  LDX     #TXTSTS         ;home cursor
C506 CED8B3           (        CLEAR.ASM):00014                 LDU     #STSVDB         ;clear both screens
C509 2006             (        CLEAR.ASM):00015                 BRA     CLRSUB          ;   .
                      (        CLEAR.ASM):00016         ;
C50B 8E0390           (        CLEAR.ASM):00017         CLRPRX  LDX     #TXTPRI         ;home cursor
C50E CED8BF           (        CLEAR.ASM):00018                 LDU     #PRIVDB         ;clear both screens
                      (        CLEAR.ASM):00019         ;
C511 6F04             (        CLEAR.ASM):00020         CLRSUB  CLR     P.TXCUR,X       ;home cursor
C513 6F05             (        CLEAR.ASM):00021                 CLR     P.TXCUR+1,X     ;   .
C515 E606             (        CLEAR.ASM):00022                 LDB     P.TXINV,X       ;load inverse flag value
C517 8D02             (        CLEAR.ASM):00023                 BSR     CLEAR           ;clear the screen
C519 3346             (        CLEAR.ASM):00024                 LEAU    VD.LEN,U        ;advance to next VDB
                      (        CLEAR.ASM):00025         ;
C51B 3476             (        CLEAR.ASM):00026         CLEAR   PSHS    A,B,X,Y,U       ;save regs
C51D 1D               (        CLEAR.ASM):00027                 SEX                     ;propogate ACCB across ACCA
C51E 1F02             (        CLEAR.ASM):00028                 TFR     D,Y             ;copy pattern to IY
C520 30C4             (        CLEAR.ASM):00029                 LEAX    P.VDBAS,U       ;load ptr to base addr
C522 EE42             (        CLEAR.ASM):00030                 LDU     P.VDEND,U       ;load last addr
                      (        CLEAR.ASM):00031         ;
C524 3626             (        CLEAR.ASM):00032         CLEAR1  PSHU    D,Y             ;clear 4 bytes at a time
C526 11A384           (        CLEAR.ASM):00033                 CMPU    ,X              ;   .
C529 26F9             (        CLEAR.ASM):00034                 BNE     CLEAR1          ;loop until done
C52B 35F6             (        CLEAR.ASM):00035                 PULS    A,B,X,Y,U,PC    ;restore regs/exit
                      (        CLEAR.ASM):00036         ;
                      (        CLEAR.ASM):00037         ;;;;;        END
                      (    DAGGORATH.ASM):00100                 INCLUDE HUPDAT.ASM       ;Heart Update Routine
                      (       HUPDAT.ASM):00001         ;
                      (       HUPDAT.ASM):00002         ;  HUPDAX:  Update the heart rate
                      (       HUPDAT.ASM):00003         ;
                      (       HUPDAT.ASM):00004         ;  Note:
                      (       HUPDAT.ASM):00005         ;              (P * 64)
                      (       HUPDAT.ASM):00006         ;       J = --------------- - 19
                      (       HUPDAT.ASM):00007         ;             P + (D * 2)
                      (       HUPDAT.ASM):00008         ;
                      (       HUPDAT.ASM):00009         ;  Where:
                      (       HUPDAT.ASM):00010         ;       J = jiffy delay count (HEARTR)
                      (       HUPDAT.ASM):00011         ;       P = power (PPOW)
                      (       HUPDAT.ASM):00012         ;       D = damage (PDAM)
                      (       HUPDAT.ASM):00013         ;
                      (       HUPDAT.ASM):00014         ;  All calculations are done with 24-bit arithmatic.
                      (       HUPDAT.ASM):00015         ;
                      (       HUPDAT.ASM):00016         ;  Temp Storage:
                      (       HUPDAT.ASM):00017         ;       T0 - denominator (24-bit)
                      (       HUPDAT.ASM):00018         ;       T1 -      "
                      (       HUPDAT.ASM):00019         ;       T2 -      "
                      (       HUPDAT.ASM):00020         ;       T3 - numerator (24-bit)
                      (       HUPDAT.ASM):00021         ;       T4 -     "
                      (       HUPDAT.ASM):00022         ;       T5 -     "
                      (       HUPDAT.ASM):00023         ;       T6 - dividend (8-bit)
                      (       HUPDAT.ASM):00024         ;
     C52D             (       HUPDAT.ASM):00025         HUPDAX  EQU     *               ;the beginning
                      (       HUPDAT.ASM):00026         ;
                      (       HUPDAT.ASM):00027         ;  Calculate numerator
                      (       HUPDAT.ASM):00028         ;
C52D 0FC1             (       HUPDAT.ASM):00029         HUPD00  CLR     T0              ;(p*64)
C52F DC17             (       HUPDAT.ASM):00030                 LDD     PPOW            ;   .
C531 DDC2             (       HUPDAT.ASM):00031                 STD     T1              ;   .
C533 8606             (       HUPDAT.ASM):00032                 LDA     #6              ;   (64=2**6)
C535 08C3             (       HUPDAT.ASM):00033         HUPD10  LSL     T2              ;least significant byte
C537 09C2             (       HUPDAT.ASM):00034                 ROL     T1              ;middle byte
C539 09C1             (       HUPDAT.ASM):00035                 ROL     T0              ;most significant byte
C53B 4A               (       HUPDAT.ASM):00036                 DECA                    ;   .
C53C 26F7             (       HUPDAT.ASM):00037                 BNE     HUPD10          ;   .
                      (       HUPDAT.ASM):00038         ;
                      (       HUPDAT.ASM):00039         ;  Calculate denominator
                      (       HUPDAT.ASM):00040         ;
C53E 4F               (       HUPDAT.ASM):00041                 CLRA                    ; NAB - IDDQD
C53F 5F               (       HUPDAT.ASM):00042                 CLRB
C540 DD21             (       HUPDAT.ASM):00043                 STD PDAM
                      (       HUPDAT.ASM):00044         
C542 0FC4             (       HUPDAT.ASM):00045                 CLR     T3              ;(d*2)
C544 DC21             (       HUPDAT.ASM):00046                 LDD     PDAM            ;   .
C546 DDC5             (       HUPDAT.ASM):00047                 STD     T4              ;   .
C548 08C6             (       HUPDAT.ASM):00048                 LSL     T5              ;least significant byte
C54A 09C5             (       HUPDAT.ASM):00049                 ROL     T4              ;middle byte
C54C 09C4             (       HUPDAT.ASM):00050                 ROL     T3              ;most significant byte
C54E DC17             (       HUPDAT.ASM):00051                 LDD     PPOW            ;(p+(d*2))
C550 D3C5             (       HUPDAT.ASM):00052                 ADDD    T4              ;   .
C552 DDC5             (       HUPDAT.ASM):00053                 STD     T4              ;   .
C554 D6C4             (       HUPDAT.ASM):00054                 LDB     T3              ;   .
C556 C900             (       HUPDAT.ASM):00055                 ADCB    #0              ;   .
C558 D7C4             (       HUPDAT.ASM):00056                 STB     T3              ;   .
                      (       HUPDAT.ASM):00057         
                      (       HUPDAT.ASM):00058         
                      (       HUPDAT.ASM):00059         
                      (       HUPDAT.ASM):00060         ;
                      (       HUPDAT.ASM):00061         ;  Calculate divident
                      (       HUPDAT.ASM):00062         ;
C55A 0FC7             (       HUPDAT.ASM):00063                 CLR     T6              ;reset dividend
C55C DCC2             (       HUPDAT.ASM):00064         HUPD20  LDD     T1              ;16 LSBits of numerator
C55E 93C5             (       HUPDAT.ASM):00065                 SUBD    T4              ;subtract 16 LSBits of denominator
C560 DDC2             (       HUPDAT.ASM):00066                 STD     T1              ;store back into numerator
C562 96C1             (       HUPDAT.ASM):00067                 LDA     T0              ;8 MSBits of numerator
C564 92C4             (       HUPDAT.ASM):00068                 SBCA    T3              ;sub 8 LSBits of denominator + carry
C566 97C1             (       HUPDAT.ASM):00069                 STA     T0              ;store back into numerator
C568 0CC7             (       HUPDAT.ASM):00070                 INC     T6              ;bump dividend
C56A 24F0             (       HUPDAT.ASM):00071                 BCC     HUPD20          ;loop until numerator goes negative
                      (       HUPDAT.ASM):00072         ;
                      (       HUPDAT.ASM):00073         ;  Update the heartrate
                      (       HUPDAT.ASM):00074         ;
C56C 96C7             (       HUPDAT.ASM):00075                 LDA     T6              ;load dividend
C56E 8013             (       HUPDAT.ASM):00076                 SUBA    #19             ;subtract nineteen
C570 97AF             (       HUPDAT.ASM):00077                 STA     HEARTR          ;store as new heartrate
                      (       HUPDAT.ASM):00078         ;
                      (       HUPDAT.ASM):00079         ;  Are we unconscious (fainted)?
                      (       HUPDAT.ASM):00080         ;
C572 0D28             (       HUPDAT.ASM):00081                 TST     FAINT           ;check the flag
C574 2627             (       HUPDAT.ASM):00082                 BNE     HUPD40          ;   we are out cold!
                      (       HUPDAT.ASM):00083         ;
C576 8103             (       HUPDAT.ASM):00084                 CMPA    #3              ;should we faint?
C578 2E3C             (       HUPDAT.ASM):00085                 BGT     HUPD90          ;   nope
                      (       HUPDAT.ASM):00086         ;
                      (       HUPDAT.ASM):00087         ;  Special Effects - Fainting
                      (       HUPDAT.ASM):00088         ;
C57A 3F               (       HUPDAT.ASM):00089                 SWI                     ;clear primary text area
C57B 0B               (       HUPDAT.ASM):00090                 FCB     CLRPRI          ;   .
C57C 966E             (       HUPDAT.ASM):00091                 LDA     RLIGHT          ;save RLIGHT for later
C57E 9770             (       HUPDAT.ASM):00092                 STA     OLIGHT          ;   .
                      (       HUPDAT.ASM):00093         ;
C580 0A6F             (       HUPDAT.ASM):00094         HUPD30  DEC     MLIGHT          ;reduce lighting
C582 AD9F02B2         (       HUPDAT.ASM):00095                 JSR     [DSPMOD]        ;show the new view
C586 0AB4             (       HUPDAT.ASM):00096                 DEC     UPDATE          ;request and wait for screen update
C588 13               (       HUPDAT.ASM):00097                 SYNC                    ;   .
C589 0A6E             (       HUPDAT.ASM):00098                 DEC     RLIGHT          ;lower lighting
C58B 966E             (       HUPDAT.ASM):00099                 LDA     RLIGHT          ;done?
C58D 81F8             (       HUPDAT.ASM):00100                 CMPA    #-8             ;   .
C58F 2EEF             (       HUPDAT.ASM):00101                 BGT     HUPD30          ;   nope
                      (       HUPDAT.ASM):00102         ;
C591 3F               (       HUPDAT.ASM):00103         HUPD32  SWI                     ;insure screen is blank
C592 09               (       HUPDAT.ASM):00104                 FCB     ZFLOP           ;   .
C593 0AB4             (       HUPDAT.ASM):00105                 DEC     UPDATE          ;   .
C595 0A28             (       HUPDAT.ASM):00106                 DEC     FAINT           ;indicate we have fainted
C597 0FBC             (       HUPDAT.ASM):00107                 CLR     KBDHDR          ;insure empty buffer
C599 0FBD             (       HUPDAT.ASM):00108                 CLR     KBDTAL          ;   .
C59B 2019             (       HUPDAT.ASM):00109                 BRA     HUPD90          ;   .
                      (       HUPDAT.ASM):00110         
                      (       HUPDAT.ASM):00111         
                      (       HUPDAT.ASM):00112         
                      (       HUPDAT.ASM):00113         ;
                      (       HUPDAT.ASM):00114         ;  We Fainted - should we recover?
                      (       HUPDAT.ASM):00115         ;
C59D 8104             (       HUPDAT.ASM):00116         HUPD40  CMPA    #4              ;should we get up?
C59F 2F15             (       HUPDAT.ASM):00117                 BLE     HUPD90          ;   nope
                      (       HUPDAT.ASM):00118         ;
C5A1 AD9F02B2         (       HUPDAT.ASM):00119         HUPD42  JSR     [DSPMOD]        ;create the new scene
C5A5 0AB4             (       HUPDAT.ASM):00120                 DEC     UPDATE          ;request screen update
C5A7 13               (       HUPDAT.ASM):00121                 SYNC                    ;   .
C5A8 0C6F             (       HUPDAT.ASM):00122                 INC     MLIGHT          ;increase lighting
C5AA 0C6E             (       HUPDAT.ASM):00123                 INC     RLIGHT          ;   .
C5AC 966E             (       HUPDAT.ASM):00124                 LDA     RLIGHT          ;done yet?
C5AE 9170             (       HUPDAT.ASM):00125                 CMPA    OLIGHT          ;   .
C5B0 2FEF             (       HUPDAT.ASM):00126                 BLE     HUPD42          ;   nope
                      (       HUPDAT.ASM):00127         ;
C5B2 0F28             (       HUPDAT.ASM):00128                 CLR     FAINT           ;time to waike up
C5B4 3F               (       HUPDAT.ASM):00129                 SWI                     ;fake the prompt
C5B5 0F               (       HUPDAT.ASM):00130                 FCB     PROMPT          ;   .
                      (       HUPDAT.ASM):00131         ;
                      (       HUPDAT.ASM):00132         ;  Check for Death
                      (       HUPDAT.ASM):00133         ;
C5B6 9E17             (       HUPDAT.ASM):00134         HUPD90  LDX     PPOW            ;more power than damage?
C5B8 9C21             (       HUPDAT.ASM):00135                 CMPX    PDAM            ;   .
C5BA 2501             (       HUPDAT.ASM):00136                 BLO     DEATH           ;   bought the farm
C5BC 39               (       HUPDAT.ASM):00137                 RTS                     ;bye
                      (       HUPDAT.ASM):00138         ;
                      (       HUPDAT.ASM):00139         ;  We have a dead player on our hands...
                      (       HUPDAT.ASM):00140         ;
C5BD 8EDF47           (       HUPDAT.ASM):00141         DEATH   LDX     #WIZ1           ;the crescent wizzard
C5C0 0A9E             (       HUPDAT.ASM):00142                 DEC     FADFLG          ;(fade-in)
C5C2 3F               (       HUPDAT.ASM):00143                 SWI                     ;   (clear the status line)
C5C3 13               (       HUPDAT.ASM):00144                 FCB     WIZIN           ;   .
                      (       HUPDAT.ASM):00145         ;
C5C4 3F               (       HUPDAT.ASM):00146                 SWI                     ;give final rites...
C5C5 02               (       HUPDAT.ASM):00147                 FCB     OUTSTI          ;   .
C5C6 FF               (       HUPDAT.ASM):00148                 FCB     %11111111       ;^ YET ANOTHER DOES NOT RETURN...
C5C7 C1               (       HUPDAT.ASM):00149                 FCB     %11000001       ;^ YET ANOTHER DOES NOT RETURN...
C5C8 92               (       HUPDAT.ASM):00150                 FCB     %10010010       ;^ YET ANOTHER DOES NOT RETURN...
C5C9 D0               (       HUPDAT.ASM):00151                 FCB     %11010000       ;^ YET ANOTHER DOES NOT RETURN...
C5CA 01               (       HUPDAT.ASM):00152                 FCB     %00000001       ;^ YET ANOTHER DOES NOT RETURN...
C5CB 73               (       HUPDAT.ASM):00153                 FCB     %01110011       ;^ YET ANOTHER DOES NOT RETURN...
C5CC E8               (       HUPDAT.ASM):00154                 FCB     %11101000       ;^ YET ANOTHER DOES NOT RETURN...
C5CD 82               (       HUPDAT.ASM):00155                 FCB     %10000010       ;^ YET ANOTHER DOES NOT RETURN...
C5CE C8               (       HUPDAT.ASM):00156                 FCB     %11001000       ;^ YET ANOTHER DOES NOT RETURN...
C5CF 04               (       HUPDAT.ASM):00157                 FCB     %00000100       ;^ YET ANOTHER DOES NOT RETURN...
C5D0 79               (       HUPDAT.ASM):00158                 FCB     %01111001       ;^ YET ANOTHER DOES NOT RETURN...
C5D1 66               (       HUPDAT.ASM):00159                 FCB     %01100110       ;^ YET ANOTHER DOES NOT RETURN...
C5D2 07               (       HUPDAT.ASM):00160                 FCB     %00000111       ;^ YET ANOTHER DOES NOT RETURN...
C5D3 3E               (       HUPDAT.ASM):00161                 FCB     %00111110       ;^ YET ANOTHER DOES NOT RETURN...
C5D4 80               (       HUPDAT.ASM):00162                 FCB     %10000000       ;^ YET ANOTHER DOES NOT RETURN...
C5D5 91               (       HUPDAT.ASM):00163                 FCB     %10010001       ;^ YET ANOTHER DOES NOT RETURN...
C5D6 69               (       HUPDAT.ASM):00164                 FCB     %01101001       ;^ YET ANOTHER DOES NOT RETURN...
C5D7 59               (       HUPDAT.ASM):00165                 FCB     %01011001       ;^ YET ANOTHER DOES NOT RETURN...
C5D8 3B               (       HUPDAT.ASM):00166                 FCB     %00111011       ;^ YET ANOTHER DOES NOT RETURN...
C5D9 DE               (       HUPDAT.ASM):00167                 FCB     %11011110       ;^ YET ANOTHER DOES NOT RETURN...
C5DA F0               (       HUPDAT.ASM):00168                 FCB     %11110000       ;^ YET ANOTHER DOES NOT RETURN...
                      (       HUPDAT.ASM):00169         
                      (       HUPDAT.ASM):00170         
                      (       HUPDAT.ASM):00171         
C5DB 0F28             (       HUPDAT.ASM):00172                 CLR     FAINT           ;force GAME restart on char
C5DD 0A77             (       HUPDAT.ASM):00173                 DEC     AUTFLG          ;   .
C5DF 20FE             (       HUPDAT.ASM):00174                 BRA     *               ;then loop forever
                      (       HUPDAT.ASM):00175         ;;;;;        END
                      (    DAGGORATH.ASM):00101                 INCLUDE STATUS.ASM       ;Status Line Update Routine
                      (       STATUS.ASM):00001         ;
                      (       STATUS.ASM):00002         ;  STATUX: Status line Update Routine
                      (       STATUS.ASM):00003         ;
C5E1 CE0388           (       STATUS.ASM):00004         STATUX  LDU     #TXTSTS         ;i/o to status line
C5E4 0AB7             (       STATUS.ASM):00005                 DEC     TXBFLG          ;   .
                      (       STATUS.ASM):00006         ;
C5E6 962C             (       STATUS.ASM):00007                 LDA     VDGINV          ;set status line inverse byte
C5E8 43               (       STATUS.ASM):00008                 COMA                    ;   .
C5E9 A746             (       STATUS.ASM):00009                 STA     P.TXINV,U       ;   .
                      (       STATUS.ASM):00010         ;
                      (       STATUS.ASM):00011         ;  Left hand
                      (       STATUS.ASM):00012         ;
C5EB 4F               (       STATUS.ASM):00013                 CLRA                    ;clear left hand text area
C5EC 5F               (       STATUS.ASM):00014                 CLRB                    ;   .
C5ED 8D22             (       STATUS.ASM):00015                 BSR     SPACES          ;   .
                      (       STATUS.ASM):00016         ;
C5EF ED44             (       STATUS.ASM):00017                 STD     P.TXCUR,U       ;home the cursor
C5F1 9E1D             (       STATUS.ASM):00018                 LDX     PLHAND          ;display what left hand is holding
C5F3 8D2A             (       STATUS.ASM):00019                 BSR     OBJNAM          ;   .
C5F5 3F               (       STATUS.ASM):00020                 SWI
C5F6 03               (       STATUS.ASM):00021                 FCB     OUTSTR          ;print the string
                      (       STATUS.ASM):00022         ;
                      (       STATUS.ASM):00023         ;  Right hand
                      (       STATUS.ASM):00024         ;
C5F7 CC0011           (       STATUS.ASM):00025                 LDD     #17             ;clear right hand text area
C5FA 8D15             (       STATUS.ASM):00026                 BSR     SPACES          ;   .
                      (       STATUS.ASM):00027         ;
C5FC 9E1F             (       STATUS.ASM):00028                 LDX     PRHAND          ;determine right hand object
C5FE 8D1F             (       STATUS.ASM):00029                 BSR     OBJNAM          ;   .
C600 1F12             (       STATUS.ASM):00030                 TFR     X,Y             ;make copy of string ptr
                      (       STATUS.ASM):00031         ;
                      (       STATUS.ASM):00032         ;  Right justify
                      (       STATUS.ASM):00033         ;
C602 CC0021           (       STATUS.ASM):00034                 LDD     #33             ;count backwards
C605 5A               (       STATUS.ASM):00035         STAT10  DECB                    ;decrement
C606 6DA0             (       STATUS.ASM):00036                 TST     ,Y+             ;look for end of string
C608 2AFB             (       STATUS.ASM):00037                 BPL     STAT10          ;not found
                      (       STATUS.ASM):00038         ;
C60A ED44             (       STATUS.ASM):00039                 STD     P.TXCUR,U       ;position cursor
C60C 3F               (       STATUS.ASM):00040                 SWI
C60D 03               (       STATUS.ASM):00041                 FCB     OUTSTR          ;print the string
                      (       STATUS.ASM):00042         ;
C60E 0FB7             (       STATUS.ASM):00043                 CLR     TXBFLG          ;resume standard i/o
C610 39               (       STATUS.ASM):00044                 RTS                     ;done
                      (       STATUS.ASM):00045         
                      (       STATUS.ASM):00046         
                      (       STATUS.ASM):00047         
                      (       STATUS.ASM):00048         ;
                      (       STATUS.ASM):00049         ;  SPACES: Print 15 spaces
                      (       STATUS.ASM):00050         ;
                      (       STATUS.ASM):00051         ;  Inputs:
                      (       STATUS.ASM):00052         ;       D - cursor position
                      (       STATUS.ASM):00053         ;       U - TXB pointer
C611 3406             (       STATUS.ASM):00054         SPACES  PSHS    A,B             ;save regs
C613 ED44             (       STATUS.ASM):00055                 STD     P.TXCUR,U       ;position cursor
C615 CC000F           (       STATUS.ASM):00056                 LDD     #(I.SP*256)|15       ;space,,15
C618 3F               (       STATUS.ASM):00057         SPACE1  SWI
C619 04               (       STATUS.ASM):00058                 FCB     OUTCHR          ;output the char
C61A 5A               (       STATUS.ASM):00059                 DECB
C61B 26FB             (       STATUS.ASM):00060                 BNE     SPACE1          ;LOOP
C61D 3586             (       STATUS.ASM):00061                 PULS    A,B,PC          ;restore regs
                      (       STATUS.ASM):00062         
                      (       STATUS.ASM):00063         
                      (       STATUS.ASM):00064         
                      (       STATUS.ASM):00065         ;
                      (       STATUS.ASM):00066         ;   OBJNAM: Return string pointer for given object
                      (       STATUS.ASM):00067         ;
                      (       STATUS.ASM):00068         ;   Inputs:
                      (       STATUS.ASM):00069         ;          X - OCB pointer
                      (       STATUS.ASM):00070         ;
                      (       STATUS.ASM):00071         ;   Returns:
                      (       STATUS.ASM):00072         ;         X - object name string pointer
                      (       STATUS.ASM):00073         ;
C61F 3466             (       STATUS.ASM):00074         OBJNAM  PSHS    A,B,Y,U
C621 3184             (       STATUS.ASM):00075                 LEAY    ,X              ;copy OCB ptr (setting CC) (2022 n.b. original was 0,X)
C623 2605             (       STATUS.ASM):00076                 BNE     ONAM10          ;valid pointer
                      (       STATUS.ASM):00077         ;
C625 8EC658           (       STATUS.ASM):00078                 LDX     #M$EMPT         ;empty string
C628 201A             (       STATUS.ASM):00079                 BRA     ONAM99          ;   .
                      (       STATUS.ASM):00080         ;
                      (       STATUS.ASM):00081         ;  Decide what form to use
                      (       STATUS.ASM):00082         ;
C62A CE0313           (       STATUS.ASM):00083         ONAM10  LDU     #TOKEN          ;buffer addr
C62D 6D2B             (       STATUS.ASM):00084                 TST     P.OCREV,Y       ;has the object been revealed?
C62F 2609             (       STATUS.ASM):00085                 BNE     ONAM20          ;   nope - use generic only
                      (       STATUS.ASM):00086         ;
                      (       STATUS.ASM):00087         ;  Copy  <adjective> to buffer
                      (       STATUS.ASM):00088         ;
C631 A629             (       STATUS.ASM):00089                 LDA     P.OCTYP,Y       ;load type
C633 8ED92B           (       STATUS.ASM):00090                 LDX     #ADJTAB+1       ;packed strings
C636 8D0E             (       STATUS.ASM):00091                 BSR     COPY$           ;copy to buffer
                      (       STATUS.ASM):00092         ;
C638 6F5F             (       STATUS.ASM):00093                 CLR     -1,U            ;use space as separator
                      (       STATUS.ASM):00094         ;
                      (       STATUS.ASM):00095         ;  Copy  <generic>  to buffer
                      (       STATUS.ASM):00096         ;
C63A A62A             (       STATUS.ASM):00097         ONAM20  LDA     P.OCCLS,Y       ;class determines generic name
C63C 8ED9A2           (       STATUS.ASM):00098                 LDX     #GENTAB+1       ;packed strings
C63F 8D05             (       STATUS.ASM):00099                 BSR     COPY$           ;copy to buffer
                      (       STATUS.ASM):00100         ;
C641 8E0313           (       STATUS.ASM):00101                 LDX     #TOKEN          ;return buffer addr
C644 35E6             (       STATUS.ASM):00102         ONAM99  PULS    A,B,Y,U,PC      ;EXIT
                      (       STATUS.ASM):00103         ;
                      (       STATUS.ASM):00104         
                      (       STATUS.ASM):00105         
                      (       STATUS.ASM):00106         
                      (       STATUS.ASM):00107         ;
                      (       STATUS.ASM):00108         ;  COPY$: Copy String from Packed Array to Buffer
                      (       STATUS.ASM):00109         ;
C646 3412             (       STATUS.ASM):00110         COPY$   PSHS    A,X             ;save regs
C648 3F               (       STATUS.ASM):00111         COPY10  SWI
C649 05               (       STATUS.ASM):00112                 FCB     EXPAND          ;expand the 5-bit string
C64A 4A               (       STATUS.ASM):00113                 DECA                    ;is this the string we want?
C64B 2AFB             (       STATUS.ASM):00114                 BPL     COPY10          ;   nope
C64D 8E0336           (       STATUS.ASM):00115                 LDX     #STRING+2       ;load string addr
                      (       STATUS.ASM):00116         ;
                      (       STATUS.ASM):00117         ;  Copy string to buffer
                      (       STATUS.ASM):00118         ;
C650 A680             (       STATUS.ASM):00119         COPY20  LDA     ,X+             ;load next char
C652 A7C0             (       STATUS.ASM):00120                 STA     ,U+             ;copy to destination
C654 2AFA             (       STATUS.ASM):00121                 BPL     COPY20          ;loop
                      (       STATUS.ASM):00122         ;
C656 3592             (       STATUS.ASM):00123                 PULS    A,X,PC          ;exit
                      (       STATUS.ASM):00124         ;
C658 050D101419FF     (       STATUS.ASM):00125         M$EMPT  FCB     $05,$0D,$10,$14,$19,$FF ;'EMPTY'
                      (       STATUS.ASM):00126         ;
                      (       STATUS.ASM):00127         ;;;;;        END
                      (    DAGGORATH.ASM):00102                 INCLUDE PUPDAT.ASM       ;Update the Screen
                      (       PUPDAT.ASM):00001         ;  PUPDAX: Update the screen
                      (       PUPDAT.ASM):00002         ;
C65E 0D28             (       PUPDAT.ASM):00003         PUPDAX  TST     FAINT           ;are we unconscious?
C660 2605             (       PUPDAT.ASM):00004                 BNE     PUPD99          ;   yes - don't do anything
                      (       PUPDAT.ASM):00005         ;
C662 8D04             (       PUPDAT.ASM):00006                 BSR     PUPSUB          ;generate next display in FLOP
C664 0AB4             (       PUPDAT.ASM):00007                 DEC     UPDATE          ;request screen switch
C666 13               (       PUPDAT.ASM):00008                 SYNC                    ;wait for it to happen
C667 39               (       PUPDAT.ASM):00009         PUPD99  RTS                     ;exit
                      (       PUPDAT.ASM):00010         ;
C668 3476             (       PUPDAT.ASM):00011         PUPSUB  PSHS    A,B,X,Y,U       ;save some regs
C66A DC26             (       PUPDAT.ASM):00012                 LDD     PRLITE          ;load player regular/magic light values
C66C DE24             (       PUPDAT.ASM):00013                 LDU     PTORCH          ;load torch OCB ptr
C66E 2704             (       PUPDAT.ASM):00014                 BEQ     PSUB10          ;   no torch!
C670 AB47             (       PUPDAT.ASM):00015                 ADDA    P.OCXXX+1,U     ;add regular light component
C672 EB48             (       PUPDAT.ASM):00016                 ADDB    P.OCXXX+2,U     ;add magic light component
C674 DD6E             (       PUPDAT.ASM):00017         PSUB10  STD     RLIGHT          ;store player values
                      (       PUPDAT.ASM):00018         ;
C676 AD9F02B2         (       PUPDAT.ASM):00019                 JSR     [DSPMOD]        ;create new screen in FLOP
C67A 35F6             (       PUPDAT.ASM):00020                 PULS    A,B,X,Y,U,PC    ;restore regs/go home
                      (       PUPDAT.ASM):00021         ;;;;;        END
                      (    DAGGORATH.ASM):00103                 INCLUDE MISC.ASM         ;Misc Service Routines
                      (         MISC.ASM):00001         ;       TTL MISC - Miscellaneous SWI Routines
                      (         MISC.ASM):00002         ;
                      (         MISC.ASM):00003         ;  PROMPT: Prompt the Human for Input
                      (         MISC.ASM):00004         ;
C67C 8EC682           (         MISC.ASM):00005         PROMPX  LDX     #M$PROM1        ;y'ungry?
C67F 3F               (         MISC.ASM):00006                 SWI                     ;m'ungry...
C680 03               (         MISC.ASM):00007                 FCB     OUTSTR          ;   .
C681 39               (         MISC.ASM):00008                 RTS                     ;t'seet...
                      (         MISC.ASM):00009         ;
C682 1F1E             (         MISC.ASM):00010         M$PROM1 FCB     I.CR,I.DOT
C684 1C24FF           (         MISC.ASM):00011         M$CURS  FCB     I.BAR,I.BS,$FF
                      (         MISC.ASM):00012         ;
                      (         MISC.ASM):00013         ;
                      (         MISC.ASM):00014         ;  WAITX: Delay Processing 1.5 Second
                      (         MISC.ASM):00015         ;
C687 C651             (         MISC.ASM):00016         WAITX   LDB     #81             ;delay for 1.35 seconds
C689 13               (         MISC.ASM):00017         WAIT10  SYNC                    ;wait for a jiffy to occur
C68A 5A               (         MISC.ASM):00018                 DECB                    ;decrement and loop
C68B 26FC             (         MISC.ASM):00019                 BNE     WAIT10          ;   .
C68D 39               (         MISC.ASM):00020                 RTS
                      (         MISC.ASM):00021         ;
                      (         MISC.ASM):00022         ;  ZERO: Zero a block of RAM  (Called via COMSWI)
                      (         MISC.ASM):00023         ;  NEGRAM: Set a Block of RAM to negative ones ($FF)
                      (         MISC.ASM):00024         ;
                      (         MISC.ASM):00025         ;  Inputs:
                      (         MISC.ASM):00026         ;       X - starting addr
                      (         MISC.ASM):00027         ;       U - ending addr
                      (         MISC.ASM):00028         ;
C68E 4F               (         MISC.ASM):00029         ZEROX   CLRA                    ;zero RAM
C68F 8C               (         MISC.ASM):00030                 FCB     SKIP2           ;   .
C690 86FF             (         MISC.ASM):00031         NEGRAX  LDA     #$FF            ;set RAM to negative ones
                      (         MISC.ASM):00032         ;
C692 A780             (         MISC.ASM):00033         SETRAX  STA     ,X+             ;set the next byte
C694 AC6A             (         MISC.ASM):00034                 CMPX    10,S            ;are we done?
C696 26FA             (         MISC.ASM):00035                 BNE     SETRAX          ;   nope
C698 39               (         MISC.ASM):00036                 RTS                     ;done
                      (         MISC.ASM):00037         
                      (         MISC.ASM):00038         
                      (         MISC.ASM):00039         
                      (         MISC.ASM):00040         ;
                      (         MISC.ASM):00041         ;  BASICX: Transfer to BASIC ROM Routine
                      (         MISC.ASM):00042         ;
C699 5F               (         MISC.ASM):00043         BASICX  CLRB                    ;switch to BASIC DP
C69A 1F9B             (         MISC.ASM):00044                 TFR     B,DP            ;   .
                      (         MISC.ASM):00045         ;
C69C EE6C             (         MISC.ASM):00046                 LDU     12,S            ;load return addr
C69E E6C0             (         MISC.ASM):00047                 LDB     ,U+             ;load BASIC parameter
C6A0 EF6C             (         MISC.ASM):00048                 STU     12,S            ;update return addr
                      (         MISC.ASM):00049         ;
C6A2 CEA000           (         MISC.ASM):00050                 LDU     #$A000          ;BASIC ROM Dispatch Table
C6A5 ADD5             (         MISC.ASM):00051                 JSR     [B,U]           ;dispatch to basic
                      (         MISC.ASM):00052         ;
C6A7 A763             (         MISC.ASM):00053                 STA     3,S             ;return ACCA
C6A9 AF66             (         MISC.ASM):00054                 STX     6,S             ;return IX
C6AB 39               (         MISC.ASM):00055                 RTS
                      (         MISC.ASM):00056         
                      (         MISC.ASM):00057         
                      (         MISC.ASM):00058         
                      (         MISC.ASM):00059         ;
                      (         MISC.ASM):00060         ;  WIZIX: Fade In the Wizard
                      (         MISC.ASM):00061         ;
                      (         MISC.ASM):00062         ;  Inputs:
                      (         MISC.ASM):00063         ;       X - vector list addr
                      (         MISC.ASM):00064         ;
C6AC 0FB1             (         MISC.ASM):00065         WIZIX   CLR     HBEATF          ;turn off the heart
C6AE 3F               (         MISC.ASM):00066                 SWI                     ;zap the status line
C6AF 0A               (         MISC.ASM):00067                 FCB     CLRSTS          ;   .
C6B0 3F               (         MISC.ASM):00068         WIZIX0  SWI                     ;clear the primary text area
C6B1 0B               (         MISC.ASM):00069                 FCB     CLRPRI          ;   .
C6B2 CC8080           (         MISC.ASM):00070                 LDD     #$8080          ;manually set range to one
C6B5 DD4F             (         MISC.ASM):00071                 STD     VXSCAL          ;   .
                      (         MISC.ASM):00072         ;
                      (         MISC.ASM):00073         ;  Immediate or Face in?
                      (         MISC.ASM):00074         ;
C6B7 D69E             (         MISC.ASM):00075                 LDB     FADFLG          ;check flag
C6B9 2704             (         MISC.ASM):00076                 BEQ     WIZI10          ;   show up now!
                      (         MISC.ASM):00077         ;
C6BB C620             (         MISC.ASM):00078                 LDB     #32             ;fade-in
C6BD 0A9C             (         MISC.ASM):00079                 DEC     NOISEF          ;buzzing noise
                      (         MISC.ASM):00080         ;
C6BF 8D1E             (         MISC.ASM):00081         WIZI10  BSR     WIZZES          ;display the wizard
C6C1 5A               (         MISC.ASM):00082                 DECB                    ;decrease the amount of fade
C6C2 5A               (         MISC.ASM):00083                 DECB                    ;   .
C6C3 2AFA             (         MISC.ASM):00084                 BPL     WIZI10          ;loop until done
C6C5 0F9C             (         MISC.ASM):00085                 CLR     NOISEF          ;turn off noise
C6C7 0F9E             (         MISC.ASM):00086                 CLR     FADFLG          ;reset flag
                      (         MISC.ASM):00087         ;
C6C9 3F               (         MISC.ASM):00088         WIZI20  SWI                     ;loud explosion
C6CA 1B               (         MISC.ASM):00089                 FCB     ISOUND          ;   .
C6CB 16               (         MISC.ASM):00090                 FCB     A$EXP1          ;   .
C6CC 39               (         MISC.ASM):00091                 RTS                     ;done
                      (         MISC.ASM):00092         ;
                      (         MISC.ASM):00093         ;  WIZOX: Fade Out the Wizard
                      (         MISC.ASM):00094         ;  Inputs:
                      (         MISC.ASM):00095         ;       X - vector list addr
                      (         MISC.ASM):00096         ;
C6CD 3F               (         MISC.ASM):00097         WIZOX   SWI                     ;clear the primary text area
C6CE 0B               (         MISC.ASM):00098                 FCB     CLRPRI          ;   .
C6CF 8DF8             (         MISC.ASM):00099                 BSR     WIZI20          ;loud explosion
C6D1 5F               (         MISC.ASM):00100                 CLRB                    ;loud to soft, fade out
C6D2 0A9C             (         MISC.ASM):00101                 DEC     NOISEF          ;more noise
                      (         MISC.ASM):00102         ;
C6D4 8D09             (         MISC.ASM):00103         WIZO10  BSR     WIZZES          ;display the wizard
C6D6 5C               (         MISC.ASM):00104                 INCB                    ;increase amount of fade
C6D7 5C               (         MISC.ASM):00105                 INCB                    ;   .
C6D8 C120             (         MISC.ASM):00106                 CMPB    #32             ;   until done
C6DA 26F8             (         MISC.ASM):00107                 BNE     WIZO10          ;   .
C6DC 0F9C             (         MISC.ASM):00108                 CLR     NOISEF          ;turn off noise
C6DE 39               (         MISC.ASM):00109                 RTS                     ;done
                      (         MISC.ASM):00110         
                      (         MISC.ASM):00111         
                      (         MISC.ASM):00112         
                      (         MISC.ASM):00113         ;
                      (         MISC.ASM):00114         ;  WIZZES: Draw the Wizard
                      (         MISC.ASM):00115         ;
                      (         MISC.ASM):00116         ;  Inputs:
                      (         MISC.ASM):00117         ;       B - amount of fade/noise
                      (         MISC.ASM):00118         ;       X - vector list addr
                      (         MISC.ASM):00119         ;
C6DF 3450             (         MISC.ASM):00120         WIZZES  PSHS    X,U             ;save regs
C6E1 D72D             (         MISC.ASM):00121                 STB     VCTFAD          ;set fade value
C6E3 D79D             (         MISC.ASM):00122                 STB     NOISEV          ;set buzz volume
C6E5 3F               (         MISC.ASM):00123                 SWI                     ;blank the alternate screen
C6E6 09               (         MISC.ASM):00124                 FCB     ZFLOP           ;   .
C6E7 3F               (         MISC.ASM):00125                 SWI                     ;   .
C6E8 01               (         MISC.ASM):00126                 FCB     VCTLST          ;   .
C6E9 0AB4             (         MISC.ASM):00127                 DEC     UPDATE          ;flag for update
C6EB 13               (         MISC.ASM):00128                 SYNC                    ;wait for flip
C6EC 35D0             (         MISC.ASM):00129                 PULS    X,U,PC          ;restore regs/exit
                      (         MISC.ASM):00130         
                      (         MISC.ASM):00131         
                      (         MISC.ASM):00132         
                      (         MISC.ASM):00133         ;
                      (         MISC.ASM):00134         ;  PREPAR: Display "PREPARE!" on EXAMINE Screen
                      (         MISC.ASM):00135         ;
C6EE BDD4C0           (         MISC.ASM):00136         PREPAX  JSR     EXAMIO          ;prepare to do i/o to EXAMINE screen
C6F1 CC012C           (         MISC.ASM):00137                 LDD     #32*9+12        ;set cursor position
C6F4 ED44             (         MISC.ASM):00138                 STD     P.TXCUR,U       ;   .
C6F6 3F               (         MISC.ASM):00139                 SWI                     ;deliver the message
C6F7 02               (         MISC.ASM):00140                 FCB     OUTSTI          ;   .
C6F8 3C               (         MISC.ASM):00141                 FCB     %00111100       ;PREPARE!
C6F9 24               (         MISC.ASM):00142                 FCB     %00100100       ;PREPARE!
C6FA 58               (         MISC.ASM):00143                 FCB     %01011000       ;PREPARE!
C6FB 06               (         MISC.ASM):00144                 FCB     %00000110       ;PREPARE!
C6FC 45               (         MISC.ASM):00145                 FCB     %01000101       ;PREPARE!
C6FD D8               (         MISC.ASM):00146                 FCB     %11011000       ;PREPARE!
                      (         MISC.ASM):00147         ;
C6FE 0FB7             (         MISC.ASM):00148                 CLR     TXBFLG          ;restore standard i/o
C700 0AB4             (         MISC.ASM):00149                 DEC     UPDATE          ;request screen update
C702 39               (         MISC.ASM):00150                 RTS                     ;bye
                      (         MISC.ASM):00151         ;;;;;        END
                      (         MISC.ASM):00152         
                      (         MISC.ASM):00153                 
                      (    DAGGORATH.ASM):00104                 INCLUDE OBIRTH.ASM       ;Object Birth Routine
                      (       OBIRTH.ASM):00001         ;  OBIRTX: Create an Object
                      (       OBIRTH.ASM):00002         ;
                      (       OBIRTH.ASM):00003         ;  Inputs:
                      (       OBIRTH.ASM):00004         ;       A - Object type
                      (       OBIRTH.ASM):00005         ;       B - Level number
                      (       OBIRTH.ASM):00006         ;  Returns:
                      (       OBIRTH.ASM):00007         ;       X - Pointer to OCB
                      (       OBIRTH.ASM):00008         ;         - Create Object Control Block (OCB)
                      (       OBIRTH.ASM):00009         ;
     C703             (       OBIRTH.ASM):00010         OBIRTX  EQU     *
                      (       OBIRTH.ASM):00011         ;
                      (       OBIRTH.ASM):00012         ;  Find the next available OCB
                      (       OBIRTH.ASM):00013         ;
C703 DE0F             (       OBIRTH.ASM):00014                 LDU     OCBPTR          ;load current OCB ptr
C705 EF66             (       OBIRTH.ASM):00015                 STU     6,S             ;return as parm
C707 304E             (       OBIRTH.ASM):00016                 LEAX    OC.LEN,U        ;advance OCB ptr
C709 9F0F             (       OBIRTH.ASM):00017                 STX     OCBPTR          ;   .
                      (       OBIRTH.ASM):00018         ;
                      (       OBIRTH.ASM):00019         ;  Fill in the new OCB
                      (       OBIRTH.ASM):00020         ;
C70B A749             (       OBIRTH.ASM):00021                 STA     P.OCTYP,U       ;store the object type
C70D E744             (       OBIRTH.ASM):00022                 STB     P.OCLVL,U       ;store the level number
C70F 3F               (       OBIRTH.ASM):00023                 SWI                     ;fill-in regular parameters
C710 18               (       OBIRTH.ASM):00024                 FCB     OCBFIL          ;   .
                      (       OBIRTH.ASM):00025         ;
                      (       OBIRTH.ASM):00026         ;  Implement Generic Values (as necessary)
                      (       OBIRTH.ASM):00027         ;
C711 E64A             (       OBIRTH.ASM):00028                 LDB     P.OCCLS,U       ;use class as index into GENVAL
C713 8EC721           (       OBIRTH.ASM):00029                 LDX     #GENVAL         ;translation table base addr
C716 A685             (       OBIRTH.ASM):00030                 LDA     B,X             ;load translation value
C718 2B06             (       OBIRTH.ASM):00031                 BMI     OBIR99          ;   minus means don't change
                      (       OBIRTH.ASM):00032         ;
C71A E64B             (       OBIRTH.ASM):00033                 LDB     P.OCREV,U       ;preserve relevation requirements
C71C 3F               (       OBIRTH.ASM):00034                 SWI                     ;overwrite with generic values
C71D 18               (       OBIRTH.ASM):00035                 FCB     OCBFIL          ;   .
C71E E74B             (       OBIRTH.ASM):00036                 STB     P.OCREV,U       ;   .
                      (       OBIRTH.ASM):00037         ;
C720 39               (       OBIRTH.ASM):00038         OBIR99  RTS                     ;bye
                      (       OBIRTH.ASM):00039         ;
                      (       OBIRTH.ASM):00040         ;  GENVAL: Generic/Specific Translation Table
                      (       OBIRTH.ASM):00041         ;
     C721             (       OBIRTH.ASM):00042         GENVAL  EQU     *               ;table begins here
C721 FF               (       OBIRTH.ASM):00043                 FCB     -1              ;(0) K.FLAS
C722 FF               (       OBIRTH.ASM):00044                 FCB     -1              ;(1) K.RING
C723 FF               (       OBIRTH.ASM):00045                 FCB     -1              ;(2) K.SCRO
C724 10               (       OBIRTH.ASM):00046                 FCB     T.SHI4          ;(3) K.SHIEE
C725 11               (       OBIRTH.ASM):00047                 FCB     T.SWO3          ;(4) K.SWOR
C726 0F               (       OBIRTH.ASM):00048                 FCB     T.TOR4          ;(5) K.TORC
                      (       OBIRTH.ASM):00049         
                      (       OBIRTH.ASM):00050         
                      (       OBIRTH.ASM):00051         
                      (       OBIRTH.ASM):00052         ;
                      (       OBIRTH.ASM):00053         ;  OCBFIX: Fill in OCB information
                      (       OBIRTH.ASM):00054         ;
                      (       OBIRTH.ASM):00055         ;  Inputs:
                      (       OBIRTH.ASM):00056         ;       A - object type
                      (       OBIRTH.ASM):00057         ;       U - ptr to OCB
                      (       OBIRTH.ASM):00058         ;
     C727             (       OBIRTH.ASM):00059         OCBFIX  EQU     *               ;where everything starts
                      (       OBIRTH.ASM):00060         ;
                      (       OBIRTH.ASM):00061         ;  Copy Regular Parameters
                      (       OBIRTH.ASM):00062         ;
C727 48               (       OBIRTH.ASM):00063                 LSLA                    ;calculate index (times OD.LEN)
C728 48               (       OBIRTH.ASM):00064                 LSLA                    ;   (OD.LEN = 4)
C729 8EDA37           (       OBIRTH.ASM):00065                 LDX     #ODBTAB         ;table base addr
C72C 3186             (       OBIRTH.ASM):00066                 LEAY    A,X             ;IY - source addr
C72E 304A             (       OBIRTH.ASM):00067                 LEAX    P.OCCLS,U       ;IX - destination addr
C730 8604             (       OBIRTH.ASM):00068                 LDA     #OD.LEN         ;ACCA - byte count
C732 BDC04B           (       OBIRTH.ASM):00069                 JSR     COPY            ;copy it
                      (       OBIRTH.ASM):00070         ;
                      (       OBIRTH.ASM):00071         ;  Process Special Parameters
                      (       OBIRTH.ASM):00072         ;
C735 8EDA97           (       OBIRTH.ASM):00073                 LDX     #XXXTAB-4       ;special parameter table
C738 3004             (       OBIRTH.ASM):00074         OFIL10  LEAX    4,X             ;advance ptr
C73A A684             (       OBIRTH.ASM):00075                 LDA     ,X              ;load special object type (2022 n.b. original was 0,X)
C73C 2B0C             (       OBIRTH.ASM):00076                 BMI     OFIL99          ;   minus means we are done
C73E A163             (       OBIRTH.ASM):00077                 CMPA    3,S             ;match current object type?
C740 26F6             (       OBIRTH.ASM):00078                 BNE     OFIL10          ;   nope - loop until match
                      (       OBIRTH.ASM):00079         ;
C742 EC01             (       OBIRTH.ASM):00080                 LDD     1,X             ;copy special parameters
C744 ED46             (       OBIRTH.ASM):00081                 STD     P.OCXXX,U       ;   .
C746 A603             (       OBIRTH.ASM):00082                 LDA     3,X             ;   .
C748 A748             (       OBIRTH.ASM):00083                 STA     P.OCXXX+2,U     ;   .
                      (       OBIRTH.ASM):00084         ;
C74A 39               (       OBIRTH.ASM):00085         OFIL99  RTS                     ;restore regs/exit
                      (       OBIRTH.ASM):00086         ;;;;;        END
                      (    DAGGORATH.ASM):00105                 INCLUDE PLOOK.ASM        ;Look Command
                      (        PLOOK.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (        PLOOK.ASM):00002         ;  L O O K   C O M M A N D
                      (        PLOOK.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (        PLOOK.ASM):00004         ;
                      (        PLOOK.ASM):00005         ;  PLOOK: Forward Looking View
                      (        PLOOK.ASM):00006         ;
C74B 3F               (        PLOOK.ASM):00007         INIVUX  SWI                     ;clear the status line
C74C 0A               (        PLOOK.ASM):00008                 FCB     CLRSTS          ;   .
C74D 3F               (        PLOOK.ASM):00009                 SWI                     ;clear the primary text area
C74E 0B               (        PLOOK.ASM):00010                 FCB     CLRPRI          ;   .
C74F 3F               (        PLOOK.ASM):00011                 SWI                     ;calculate the heartrate
C750 0C               (        PLOOK.ASM):00012                 FCB     HUPDAT          ;   .
C751 0CAE             (        PLOOK.ASM):00013                 INC     HEARTC          ;insure immediate flash
C753 0AAD             (        PLOOK.ASM):00014                 DEC     HEARTF          ;turn on visual flash
C755 0AB1             (        PLOOK.ASM):00015                 DEC     HBEATF          ;turn on audio thump
C757 3F               (        PLOOK.ASM):00016                 SWI                     ;update the status line
C758 0D               (        PLOOK.ASM):00017                 FCB     STATUS          ;   .
                      (        PLOOK.ASM):00018         ;
C759 8ECE6E           (        PLOOK.ASM):00019         PLOOK   LDX     #VIEWER         ;forward looking display
C75C 9FB2             (        PLOOK.ASM):00020                 STX     DSPMOD          ;   .
C75E 3F               (        PLOOK.ASM):00021                 SWI                     ;update the screen
C75F 0E               (        PLOOK.ASM):00022                 FCB     PUPDAT          ;   .
C760 39               (        PLOOK.ASM):00023                 RTS                     ;exit
                      (        PLOOK.ASM):00024         ;
                      (        PLOOK.ASM):00025         ;;;;;        END
                      (    DAGGORATH.ASM):00106                 INCLUDE NEWLVL.ASM       ;Create a New Dungeon Level
                      (       NEWLVL.ASM):00001         ;        TTL NEWLVL - Create a New Dungeon Level
                      (       NEWLVL.ASM):00002         ;
                      (       NEWLVL.ASM):00003         ;  NEWLVX: Create a New Dungeon Level
                      (       NEWLVL.ASM):00004         ;
                      (       NEWLVL.ASM):00005         ;  Inputs:
                      (       NEWLVL.ASM):00006         ;       A - level to be created
                      (       NEWLVL.ASM):00007         ;
     C761             (       NEWLVL.ASM):00008         NEWLVX  EQU     *
                      (       NEWLVL.ASM):00009         ;
                      (       NEWLVL.ASM):00010         ;  Calculate a new creature matrix index
                      (       NEWLVL.ASM):00011         ;
C761 9781             (       NEWLVL.ASM):00012                 STA     LEVEL           ;store the level number
C763 C60C             (       NEWLVL.ASM):00013                 LDB     #CTYPES         ;number of creatures
C765 3D               (       NEWLVL.ASM):00014                 MUL                     ;   .
C766 C30398           (       NEWLVL.ASM):00015                 ADDD    #CMXLND         ;   .
C769 DD82             (       NEWLVL.ASM):00016                 STD     CMXPTR          ;   .
                      (       NEWLVL.ASM):00017         ;
                      (       NEWLVL.ASM):00018         ;  Calculate Vertical Features Index
                      (       NEWLVL.ASM):00019         ;
C76B D681             (       NEWLVL.ASM):00020                 LDB     LEVEL           ;load the level number
C76D 8ED005           (       NEWLVL.ASM):00021                 LDX     #VFTTAB         ;table base addr
C770 9F86             (       NEWLVL.ASM):00022         NLVL10  STX     VFTPTR          ;assume this is correct
C772 A680             (       NEWLVL.ASM):00023         NLVL12  LDA     ,X+             ;search for negative
C774 2AFC             (       NEWLVL.ASM):00024                 BPL     NLVL12          ;   .
C776 5A               (       NEWLVL.ASM):00025                 DECB                    ;done?
C777 2AF7             (       NEWLVL.ASM):00026                 BPL     NLVL10          ;   nope
                      (       NEWLVL.ASM):00027         ;
                      (       NEWLVL.ASM):00028         ;  Armagedon!
                      (       NEWLVL.ASM):00029         ;
C779 8E03D4           (       NEWLVL.ASM):00030                 LDX     #CCBLND         ;table base addr
C77C CE05F4           (       NEWLVL.ASM):00031                 LDU     #CCBEND         ;ending addr
C77F 3F               (       NEWLVL.ASM):00032                 SWI                     ;clear the entire CCB table
C780 11               (       NEWLVL.ASM):00033                 FCB     ZERO            ;   .
                      (       NEWLVL.ASM):00034         ;
                      (       NEWLVL.ASM):00035         ;  Create a new world...
                      (       NEWLVL.ASM):00036         ;
C781 BDC053           (       NEWLVL.ASM):00037                 JSR     SYSTCB          ;creat new system TCBs
C784 BDCCA4           (       NEWLVL.ASM):00038                 JSR     DGNGEN          ;create the new level
                      (       NEWLVL.ASM):00039         ;
                      (       NEWLVL.ASM):00040         ;  Give this new world LIFE...
                      (       NEWLVL.ASM):00041         ;
C787 DE82             (       NEWLVL.ASM):00042                 LDU     CMXPTR          ;load CMXLND index
C789 860B             (       NEWLVL.ASM):00043                 LDA     #CTYPES-1       ;start with most ferocious creatures
C78B E6C6             (       NEWLVL.ASM):00044         NLVL30  LDB     A,U             ;number of this type of creature
C78D 2706             (       NEWLVL.ASM):00045                 BEQ     NLVL34          ;   done
C78F BDCFAD           (       NEWLVL.ASM):00046         NLVL32  JSR     CBIRTH          ;give birth to a creature
C792 5A               (       NEWLVL.ASM):00047                 DECB                    ;one less creature to create
C793 26FA             (       NEWLVL.ASM):00048                 BNE     NLVL32          ;   until we are done
C795 4A               (       NEWLVL.ASM):00049         NLVL34  DECA                    ;advance to next creature type
C796 2AF3             (       NEWLVL.ASM):00050                 BPL     NLVL30          ;   until done
                      (       NEWLVL.ASM):00051         
                      (       NEWLVL.ASM):00052         
                      (       NEWLVL.ASM):00053         
                      (       NEWLVL.ASM):00054         ;
                      (       NEWLVL.ASM):00055         ;  Randomly Attach Creature-Owned Objects
                      (       NEWLVL.ASM):00056         ;
C798 CE03C3           (       NEWLVL.ASM):00057                 LDU     #CCBLND-CC.LEN  ;land of creatures
C79B 0F91             (       NEWLVL.ASM):00058                 CLR     OFINDF          ;start at top of object list
C79D BDCF6B           (       NEWLVL.ASM):00059         NLVL40  JSR     FNDOBJ          ;find the next object on our level
C7A0 271C             (       NEWLVL.ASM):00060                 BEQ     NLVL50          ;   exhausted objects
C7A2 6D05             (       NEWLVL.ASM):00061                 TST     P.OCOWN,X       ;is this object creature owned
C7A4 2AF7             (       NEWLVL.ASM):00062                 BPL     NLVL40          ;   nope
                      (       NEWLVL.ASM):00063         ;
                      (       NEWLVL.ASM):00064         ;  Find the next creature
                      (       NEWLVL.ASM):00065         ;
C7A6 33C811           (       NEWLVL.ASM):00066         NLVL42  LEAU    CC.LEN,U        ;find a creature
C7A9 118305F4         (       NEWLVL.ASM):00067                 CMPU    #CCBEND         ;exhausted table
C7AD 2503             (       NEWLVL.ASM):00068                 BLO     NLVL44          ;   nope
C7AF CE03D4           (       NEWLVL.ASM):00069                 LDU     #CCBLND         ;start at top
                      (       NEWLVL.ASM):00070         ;
C7B2 6D4C             (       NEWLVL.ASM):00071         NLVL44  TST     P.CCUSE,U       ;this creature alive?
C7B4 27F0             (       NEWLVL.ASM):00072                 BEQ     NLVL42          ;   nope
                      (       NEWLVL.ASM):00073         ;
                      (       NEWLVL.ASM):00074         ;  Attach Object to Creature
                      (       NEWLVL.ASM):00075         ;
C7B6 EC48             (       NEWLVL.ASM):00076                 LDD     P.CCOBJ,U       ;load creature object ptr
C7B8 AF48             (       NEWLVL.ASM):00077                 STX     P.CCOBJ,U       ;insert object
C7BA ED84             (       NEWLVL.ASM):00078                 STD     P.OCPTR,X       ;   .
C7BC 20DF             (       NEWLVL.ASM):00079                 BRA     NLVL40          ;up top for another
                      (       NEWLVL.ASM):00080         ;
                      (       NEWLVL.ASM):00081         ;  Determine VDGINV Setting
                      (       NEWLVL.ASM):00082         ;
C7BE 9681             (       NEWLVL.ASM):00083         NLVL50  LDA     LEVEL           ;load the level number
C7C0 8401             (       NEWLVL.ASM):00084                 ANDA    #BIT0           ;determine even/odd (0/1)
C7C2 40               (       NEWLVL.ASM):00085                 NEGA                    ;convert to mask ($00/$FF)
C7C3 972C             (       NEWLVL.ASM):00086                 STA     VDGINV          ;set the inverse byte
C7C5 B70396           (       NEWLVL.ASM):00087                 STA     P.TXINV+TXTPRI  ;update the primary TXB inverse flag
C7C8 B70386           (       NEWLVL.ASM):00088                 STA     P.TXINV+TXTEXA  ;update examine TXB inverse flag
C7CB 43               (       NEWLVL.ASM):00089                 COMA                    ;invert the "inverse" flag
C7CC B7038E           (       NEWLVL.ASM):00090                 STA     P.TXINV+TXTSTS  ;update the status TXB inverse flag
                      (       NEWLVL.ASM):00091         ;
C7CF 39               (       NEWLVL.ASM):00092                 RTS                     ;done
                      (       NEWLVL.ASM):00093         ;;;;;        END
                      (    DAGGORATH.ASM):00107                 INCLUDE SOUNDS.ASM       ;Sound Generator
                      (       SOUNDS.ASM):00001         ;        TTL SOUNDS - Sound Generator
                      (       SOUNDS.ASM):00002         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       SOUNDS.ASM):00003         ;  S O U N D   G E N E R A T O R
                      (       SOUNDS.ASM):00004         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       SOUNDS.ASM):00005         ;
                      (       SOUNDS.ASM):00006         ;  SOUNDS: Sound Generation Routine
                      (       SOUNDS.ASM):00007         ;          Called via COMSWI.
                      (       SOUNDS.ASM):00008         ;
                      (       SOUNDS.ASM):00009         ;  Inputs:
                      (       SOUNDS.ASM):00010         ;       A - sound identification code
                      (       SOUNDS.ASM):00011         ;       B - volume level
                      (       SOUNDS.ASM):00012         ;
                      (       SOUNDS.ASM):00013         ;
                      (       SOUNDS.ASM):00014         ; "Actual" sounds entry point
                      (       SOUNDS.ASM):00015         ;
C7D0 AE6C             (       SOUNDS.ASM):00016         SOUNDI  LDX     12,S            ;load return addr
C7D2 A680             (       SOUNDS.ASM):00017                 LDA     ,X+             ;load SOUND parameter byte
C7D4 AF6C             (       SOUNDS.ASM):00018                 STX     12,S            ;update return addr
C7D6 C6FF             (       SOUNDS.ASM):00019                 LDB     #$FF            ;use full volume
                      (       SOUNDS.ASM):00020         ;
     C7D8             (       SOUNDS.ASM):00021         SOUNDX  EQU     *
C7D8 D761             (       SOUNDS.ASM):00022                 STB     SNVOL           ;store volume parameter
C7DA 8EC7E4           (       SOUNDS.ASM):00023                 LDX     #SNDTAB         ;table base addr
C7DD 48               (       SOUNDS.ASM):00024                 LSLA                    ;*2 for word offsets
C7DE AD96             (       SOUNDS.ASM):00025                 JSR     [A,X]           ;dispatch to correct routine
C7E0 7FFF20           (       SOUNDS.ASM):00026                 CLR     P.PIIOA+PIA$1   ;leave DAC at zero
C7E3 39               (       SOUNDS.ASM):00027                 RTS                     ;bye
                      (       SOUNDS.ASM):00028         
                      (       SOUNDS.ASM):00029         
                      (       SOUNDS.ASM):00030         
                      (       SOUNDS.ASM):00031         ;
                      (       SOUNDS.ASM):00032         ;  Sound Dispatch Macros
                      (       SOUNDS.ASM):00033         ;
C7E4                  (       SOUNDS.ASM):00034         SND     MACR
C7E4                  (       SOUNDS.ASM):00035         A$\1    EQU     FOO
C7E4                  (       SOUNDS.ASM):00036         FOO     SET     FOO+1
                      (       SOUNDS.ASM):00037         ;        XDEF    A$\1
                      (       SOUNDS.ASM):00038                 FDB     \2
                      (       SOUNDS.ASM):00039                 ENDM
                      (       SOUNDS.ASM):00040         ;
     0000             (       SOUNDS.ASM):00041         FOO     SET     0
                      (       SOUNDS.ASM):00042         ;
                      (       SOUNDS.ASM):00043         ;  Sound Dispatch Table
                      (       SOUNDS.ASM):00044         ;
     C7E4             (       SOUNDS.ASM):00045         SNDTAB  EQU     *               ;table starts here
                      (       SOUNDS.ASM):00046         ;
                      (       SOUNDS.ASM):00047         ;  Creature Sounds
                      (       SOUNDS.ASM):00048         ;
                      (       SOUNDS.ASM):00049                 SND     SQK0,SQUEAK     ;spider
     0000             (              SND):00001         A$SQK0    EQU     FOO
     0001             (              SND):00002         FOO     SET     FOO+1
C7E4 C833             (              SND):00003                 FDB     SQUEAK
                      (       SOUNDS.ASM):00050         ;
                      (       SOUNDS.ASM):00051                 SND     RTL0,RATTLE     ;viper
     0001             (              SND):00001         A$RTL0    EQU     FOO
     0002             (              SND):00002         FOO     SET     FOO+1
C7E6 C858             (              SND):00003                 FDB     RATTLE
                      (       SOUNDS.ASM):00052         ;
                      (       SOUNDS.ASM):00053                 SND     ROR0,GROWL      ;stone giant 1
     0002             (              SND):00001         A$ROR0    EQU     FOO
     0003             (              SND):00002         FOO     SET     FOO+1
C7E8 C959             (              SND):00003                 FDB     GROWL
                      (       SOUNDS.ASM):00054         ;
                      (       SOUNDS.ASM):00055                 SND     BEP0,BEOOP      ;blob
     0003             (              SND):00001         A$BEP0    EQU     FOO
     0004             (              SND):00002         FOO     SET     FOO+1
C7EA C844             (              SND):00003                 FDB     BEOOP
                      (       SOUNDS.ASM):00056         ;
                      (       SOUNDS.ASM):00057                 SND     KLK0,KLANK      ;knight 1
     0004             (              SND):00001         A$KLK0    EQU     FOO
     0005             (              SND):00002         FOO     SET     FOO+1
C7EC C8EA             (              SND):00003                 FDB     KLANK
                      (       SOUNDS.ASM):00058         ;
                      (       SOUNDS.ASM):00059                 SND     ROR1,GRAWL      ;stone giant 2
     0005             (              SND):00001         A$ROR1    EQU     FOO
     0006             (              SND):00002         FOO     SET     FOO+1
C7EE C95D             (              SND):00003                 FDB     GRAWL
                      (       SOUNDS.ASM):00060         ;
                      (       SOUNDS.ASM):00061                 SND     RTL1,PSSST      ;scorpion
     0006             (              SND):00001         A$RTL1    EQU     FOO
     0007             (              SND):00002         FOO     SET     FOO+1
C7F0 C852             (              SND):00003                 FDB     PSSST
                      (       SOUNDS.ASM):00062         ;
                      (       SOUNDS.ASM):00063                 SND     KLK1,KKLANK     ;knight 2
     0007             (              SND):00001         A$KLK1    EQU     FOO
     0008             (              SND):00002         FOO     SET     FOO+1
C7F2 C8E6             (              SND):00003                 FDB     KKLANK
                      (       SOUNDS.ASM):00064         ;
                      (       SOUNDS.ASM):00065                 SND     PSHT,PSSHT      ;wraith
     0008             (              SND):00001         A$PSHT    EQU     FOO
     0009             (              SND):00002         FOO     SET     FOO+1
C7F4 C855             (              SND):00003                 FDB     PSSHT
                      (       SOUNDS.ASM):00066         ;
                      (       SOUNDS.ASM):00067                 SND     ROR2,SNARL      ;balrog
     0009             (              SND):00001         A$ROR2    EQU     FOO
     000A             (              SND):00002         FOO     SET     FOO+1
C7F6 C961             (              SND):00003                 FDB     SNARL
                      (       SOUNDS.ASM):00068         ;
                      (       SOUNDS.ASM):00069         
                      (       SOUNDS.ASM):00070         
                      (       SOUNDS.ASM):00071         
                      (       SOUNDS.ASM):00072                 SND     SQK1,BDLBDL     ;wizzard 1
     000A             (              SND):00001         A$SQK1    EQU     FOO
     000B             (              SND):00002         FOO     SET     FOO+1
C7F8 C87F             (              SND):00003                 FDB     BDLBDL
                      (       SOUNDS.ASM):00073         ;
                      (       SOUNDS.ASM):00074                 SND     SQK2,BDLBDL     ;wizzard 2
     000B             (              SND):00001         A$SQK2    EQU     FOO
     000C             (              SND):00002         FOO     SET     FOO+1
C7FA C87F             (              SND):00003                 FDB     BDLBDL
                      (       SOUNDS.ASM):00075         ;
                      (       SOUNDS.ASM):00076         ;
                      (       SOUNDS.ASM):00077         ;
                      (       SOUNDS.ASM):00078         ;  Object Sounds
                      (       SOUNDS.ASM):00079         ;
     000C             (       SOUNDS.ASM):00080         SNDOBJ  EQU     12
                      (       SOUNDS.ASM):00081         ;
                      (       SOUNDS.ASM):00082                 SND     FLAS,GLUGLG     ;flask
     000C             (              SND):00001         A$FLAS    EQU     FOO
     000D             (              SND):00002         FOO     SET     FOO+1
C7FC C812             (              SND):00003                 FDB     GLUGLG
                      (       SOUNDS.ASM):00083         ;
                      (       SOUNDS.ASM):00084                 SND     RING,PHASER     ;ring
     000D             (              SND):00001         A$RING    EQU     FOO
     000E             (              SND):00002         FOO     SET     FOO+1
C7FE C819             (              SND):00003                 FDB     PHASER
                      (       SOUNDS.ASM):00085         ;
                      (       SOUNDS.ASM):00086                 SND     SCRO,WHOOP      ;scroll
     000E             (              SND):00001         A$SCRO    EQU     FOO
     000F             (              SND):00002         FOO     SET     FOO+1
C800 C82F             (              SND):00003                 FDB     WHOOP
                      (       SOUNDS.ASM):00087         ;
                      (       SOUNDS.ASM):00088                 SND     SHIE,CLANG      ;shield
     000F             (              SND):00001         A$SHIE    EQU     FOO
     0010             (              SND):00002         FOO     SET     FOO+1
C802 C8E2             (              SND):00003                 FDB     CLANG
                      (       SOUNDS.ASM):00089         ;
                      (       SOUNDS.ASM):00090                 SND     SWOR,WHOOSH     ;sword
     0010             (              SND):00001         A$SWOR    EQU     FOO
     0011             (              SND):00002         FOO     SET     FOO+1
C804 C8AE             (              SND):00003                 FDB     WHOOSH
                      (       SOUNDS.ASM):00091         ;
                      (       SOUNDS.ASM):00092                 SND     TORC,CHUCK      ;torch
     0011             (              SND):00001         A$TORC    EQU     FOO
     0012             (              SND):00002         FOO     SET     FOO+1
C806 C8BA             (              SND):00003                 FDB     CHUCK
                      (       SOUNDS.ASM):00093         ;
                      (       SOUNDS.ASM):00094         ;
                      (       SOUNDS.ASM):00095         ;
                      (       SOUNDS.ASM):00096         ;  Miscellaneous Sounds
                      (       SOUNDS.ASM):00097         ;
                      (       SOUNDS.ASM):00098                 SND     KLK2,KLINK      ;hit creature
     0012             (              SND):00001         A$KLK2    EQU     FOO
     0013             (              SND):00002         FOO     SET     FOO+1
C808 C947             (              SND):00003                 FDB     KLINK
                      (       SOUNDS.ASM):00099         ;
                      (       SOUNDS.ASM):00100                 SND     KLK3,CLANK      ;hit player
     0013             (              SND):00001         A$KLK3    EQU     FOO
     0014             (              SND):00002         FOO     SET     FOO+1
C80A C8EE             (              SND):00003                 FDB     CLANK
                      (       SOUNDS.ASM):00101         ;
                      (       SOUNDS.ASM):00102                 SND     THUD,THUD       ;hit wall
     0014             (              SND):00001         A$THUD    EQU     FOO
     0015             (              SND):00002         FOO     SET     FOO+1
C80C C87A             (              SND):00003                 FDB     THUD
                      (       SOUNDS.ASM):00103         ;
                      (       SOUNDS.ASM):00104         
                      (       SOUNDS.ASM):00105         
                      (       SOUNDS.ASM):00106         
                      (       SOUNDS.ASM):00107                 SND     EXP0,BANG       ;explosion 0
     0015             (              SND):00001         A$EXP0    EQU     FOO
     0016             (              SND):00002         FOO     SET     FOO+1
C80E C875             (              SND):00003                 FDB     BANG
                      (       SOUNDS.ASM):00108         ;
                      (       SOUNDS.ASM):00109                 SND     EXP1,KABOOM     ;explosion 1
     0016             (              SND):00001         A$EXP1    EQU     FOO
     0017             (              SND):00002         FOO     SET     FOO+1
C810 C892             (              SND):00003                 FDB     KABOOM
                      (       SOUNDS.ASM):00110         ;
                      (       SOUNDS.ASM):00111         
                      (       SOUNDS.ASM):00112         
                      (       SOUNDS.ASM):00113         
                      (       SOUNDS.ASM):00114         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       SOUNDS.ASM):00115         ;  S O U N D   G E N E R A T O R S
                      (       SOUNDS.ASM):00116         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       SOUNDS.ASM):00117         ;
                      (       SOUNDS.ASM):00118         ; GLUGLG:
                      (       SOUNDS.ASM):00119         ;       Flask drinking sound
                      (       SOUNDS.ASM):00120         ; PHASER:
                      (       SOUNDS.ASM):00121         ;       Ring attack sound
                      (       SOUNDS.ASM):00122         ; MSQUEK:
                      (       SOUNDS.ASM):00123         ; MSQUEQ:
                      (       SOUNDS.ASM):00124         ; WHOOP:
                      (       SOUNDS.ASM):00125         ; SQUEAK: Subroutine to produce a short tone sweep of
                      (       SOUNDS.ASM):00126         ;         rising pitch.
                      (       SOUNDS.ASM):00127         ;
                      (       SOUNDS.ASM):00128         ; Usable for small animal squeaks or dripping water
                      (       SOUNDS.ASM):00129         ;
                      (       SOUNDS.ASM):00130         ; * * * * * * * * *
                      (       SOUNDS.ASM):00131         ;
     C812             (       SOUNDS.ASM):00132         SNBAS1  EQU     *               ;sound base address 1
                      (       SOUNDS.ASM):00133         ;
C812 CEC82B           (       SOUNDS.ASM):00134         GLUGLG  LDU     #MSQUEQ         ;address of sound subroutine
C815 8604             (       SOUNDS.ASM):00135                 LDA     #4              ;iteration count
C817 2005             (       SOUNDS.ASM):00136                 BRA     PHAS2           ;
                      (       SOUNDS.ASM):00137         ;
C819 CEC827           (       SOUNDS.ASM):00138         PHASER  LDU     #MSQUEK         ;
C81C 860A             (       SOUNDS.ASM):00139                 LDA     #10             ;iteration count
C81E 975F             (       SOUNDS.ASM):00140         PHAS2   STA     SNSAVA          ;scratch iteration counter
C820 ADC4             (       SOUNDS.ASM):00141         PHAS1   JSR     ,U              ;call indicated subroutine
C822 0A5F             (       SOUNDS.ASM):00142                 DEC     SNSAVA          ;iteration counter
C824 26FA             (       SOUNDS.ASM):00143                 BNE     PHAS1           ;loop until done
C826 39               (       SOUNDS.ASM):00144                 RTS
                      (       SOUNDS.ASM):00145         ;
C827 8E0040           (       SOUNDS.ASM):00146         MSQUEK  LDX     #$0040          ;
C82A 10               (       SOUNDS.ASM):00147                 FCB     $10             ;skip next 3 bytes (LDY)
                      (       SOUNDS.ASM):00148         ;
C82B 8E0080           (       SOUNDS.ASM):00149         MSQUEQ  LDX     #$0080          ;
C82E 10               (       SOUNDS.ASM):00150                 FCB     $10             ;skip next 3 bytes (LDY)
                      (       SOUNDS.ASM):00151         ;
C82F 8E0100           (       SOUNDS.ASM):00152         WHOOP   LDX     #$0100          ;pitch and duration
C832 10               (       SOUNDS.ASM):00153                 FCB     $10             ;skip next 3 bytes (LDY)
                      (       SOUNDS.ASM):00154         ;
C833 8E0020           (       SOUNDS.ASM):00155         SQUEAK  LDX     #$0020          ;pitch and duration
C836 8D05             (       SOUNDS.ASM):00156         SNSQK1  BSR     SNSQK2          ;
C838 301F             (       SOUNDS.ASM):00157                 LEAX    -1,X            ;increase frequency
C83A 26FA             (       SOUNDS.ASM):00158                 BNE     SNSQK1          ;continue
                      (       SOUNDS.ASM):00159         ;
C83C 39               (       SOUNDS.ASM):00160                 RTS                     ;end of this sound
                      (       SOUNDS.ASM):00161         ;
C83D 86FF             (       SOUNDS.ASM):00162         SNSQK2  LDA     #$FF            ;
C83F 8D30             (       SOUNDS.ASM):00163                 BSR     SNSUB2          ;
C841 4F               (       SOUNDS.ASM):00164                 CLRA
C842 202D             (       SOUNDS.ASM):00165                 BRA     SNSUB2          ;
                      (       SOUNDS.ASM):00166         ;
C844 8E0500           (       SOUNDS.ASM):00167         BEOOP   LDX     #$0500          ;
C847 8DF4             (       SOUNDS.ASM):00168         BEOOP1  BSR     SNSQK2          ;
C849 308830           (       SOUNDS.ASM):00169                 LEAX    48,X            ;decrease frequency
                      (       SOUNDS.ASM):00170         
                      (       SOUNDS.ASM):00171         
                      (       SOUNDS.ASM):00172         
C84C 8C0800           (       SOUNDS.ASM):00173                 CMPX    #$0800          ;
C84F 25F6             (       SOUNDS.ASM):00174                 BLO     BEOOP1          ;
                      (       SOUNDS.ASM):00175         ;
C851 39               (       SOUNDS.ASM):00176                 RTS
                      (       SOUNDS.ASM):00177         ;
                      (       SOUNDS.ASM):00178         
                      (       SOUNDS.ASM):00179         
                      (       SOUNDS.ASM):00180         
                      (       SOUNDS.ASM):00181         ; * * * * * * * * *
                      (       SOUNDS.ASM):00182         ;
                      (       SOUNDS.ASM):00183         ;  RATTLE: Subroutine to generate a short train of noise
                      (       SOUNDS.ASM):00184         ;          pulses. Each pulse is separated from the next
                      (       SOUNDS.ASM):00185         ;          by a period of silence.
                      (       SOUNDS.ASM):00186         ;
                      (       SOUNDS.ASM):00187         ;  Usable for rattlesnake like sounds
                      (       SOUNDS.ASM):00188         ;
                      (       SOUNDS.ASM):00189         ; * * * * * * * * *
                      (       SOUNDS.ASM):00190         ;
C852 8602             (       SOUNDS.ASM):00191         PSSST   LDA     #2              ;
C854 8C               (       SOUNDS.ASM):00192                 FCB     SKIP2           ;
C855 8601             (       SOUNDS.ASM):00193         PSSHT   LDA     #1              ;rattle count +1
C857 8C               (       SOUNDS.ASM):00194                 FCB     SKIP2           ;[ sets CCR ]
C858 860A             (       SOUNDS.ASM):00195         RATTLE  LDA     #10             ;rattle count + 1
C85A 9762             (       SOUNDS.ASM):00196                 STA     SNDLAY          ;use as scratch counter in this routine
C85C 108E00C0         (       SOUNDS.ASM):00197         SNRAT2  LDY     #$00C0          ;noise duration
C860 8D74             (       SOUNDS.ASM):00198         SNRAT1  BSR     SNOISE          ;get a random noise value
C862 8D69             (       SOUNDS.ASM):00199                 BSR     SNOUT
C864 313F             (       SOUNDS.ASM):00200                 LEAY    -1,Y
C866 26F8             (       SOUNDS.ASM):00201                 BNE     SNRAT1
                      (       SOUNDS.ASM):00202         ;
C868 8D58             (       SOUNDS.ASM):00203                 BSR     SNWT1K          ;wait: X-Reg. = $1000
                      (       SOUNDS.ASM):00204         ;
C86A 0A62             (       SOUNDS.ASM):00205                 DEC     SNDLAY          ;decrement counter
C86C 26EE             (       SOUNDS.ASM):00206                 BNE     SNRAT2
C86E 39               (       SOUNDS.ASM):00207                 RTS                     ;end of this sound
                      (       SOUNDS.ASM):00208         ;
                      (       SOUNDS.ASM):00209         ; Local subroutine for code compression
                      (       SOUNDS.ASM):00210         ;
C86F 8D65             (       SOUNDS.ASM):00211         SNSUB3  BSR     SNOISE          ;get some noise
C871 8D5A             (       SOUNDS.ASM):00212         SNSUB2  BSR     SNOUT           ;out to the DAC
C873 2050             (       SOUNDS.ASM):00213                 BRA     SNWAIT          ;wait around for a while
                      (       SOUNDS.ASM):00214         
                      (       SOUNDS.ASM):00215         
                      (       SOUNDS.ASM):00216         
                      (       SOUNDS.ASM):00217         ; * * * * * * * * *
                      (       SOUNDS.ASM):00218         ;
                      (       SOUNDS.ASM):00219         ; KABOOM: Double explosion sounds that sounds like "kaboom".
                      (       SOUNDS.ASM):00220         ; BANG:
                      (       SOUNDS.ASM):00221         ; THUD:
                      (       SOUNDS.ASM):00222         ;
                      (       SOUNDS.ASM):00223         ; * * * * * * * * *
                      (       SOUNDS.ASM):00224         ;
C875 CEDC11           (       SOUNDS.ASM):00225         BANG    LDU     #BANGD          ;bang data
C878 2021             (       SOUNDS.ASM):00226                 BRA     BOOMER          ;common code
                      (       SOUNDS.ASM):00227         ;
C87A CEDC09           (       SOUNDS.ASM):00228         THUD    LDU     #THUDD          ;thud data
C87D 201C             (       SOUNDS.ASM):00229                 BRA     BOOMER          ;common code
                      (       SOUNDS.ASM):00230         ;
C87F 8608             (       SOUNDS.ASM):00231         BDLBDL  LDA     #8              ;whoop count
C881 975F             (       SOUNDS.ASM):00232                 STA     SNSAVA          ;   .
C883 8D51             (       SOUNDS.ASM):00233         BDLB10  BSR     SNOISE          ;make some noise
C885 4F               (       SOUNDS.ASM):00234                 CLRA                    ;16-bit random (0-127)
C886 54               (       SOUNDS.ASM):00235                 LSRB                    ;   .
C887 2601             (       SOUNDS.ASM):00236                 BNE     BDLB12          ;   insure non-zero!
C889 5C               (       SOUNDS.ASM):00237                 INCB                    ;   .
C88A 1F01             (       SOUNDS.ASM):00238         BDLB12  TFR     D,X             ;copy random
C88C 8DA8             (       SOUNDS.ASM):00239                 BSR     SNSQK1          ;squeak!
C88E 0A5F             (       SOUNDS.ASM):00240                 DEC     SNSAVA          ;decrement and loop
C890 26F1             (       SOUNDS.ASM):00241                 BNE     BDLB10          ;   fall into KABOOM when thru
                      (       SOUNDS.ASM):00242         ;
C892 CEDC09           (       SOUNDS.ASM):00243         KABOOM  LDU     #THUDD          ;point to data table
C895 8D04             (       SOUNDS.ASM):00244                 BSR     BOOMER          ;
C897 8D29             (       SOUNDS.ASM):00245                 BSR     SNWT1K          ;wait: X-Reg. = $1000
C899 3344             (       SOUNDS.ASM):00246                 LEAU    4,u             ;advance to next set of data
                      (       SOUNDS.ASM):00247         ;
C89B AEC4             (       SOUNDS.ASM):00248         BOOMER  LDX     ,U              ;set pitch (2022 n.b. original was 0,U)
C89D 10AE42           (       SOUNDS.ASM):00249         BOOM1   LDY     2,U             ;
C8A0 8DCD             (       SOUNDS.ASM):00250         BOOM2   BSR     SNSUB3          ;
C8A2 313F             (       SOUNDS.ASM):00251                 LEAY    -1,Y            ;
C8A4 26FA             (       SOUNDS.ASM):00252                 BNE     BOOM2           ;
C8A6 3002             (       SOUNDS.ASM):00253                 LEAX    2,X             ;
C8A8 8C0150           (       SOUNDS.ASM):00254                 CMPX    #$0150          ;
C8AB 26F0             (       SOUNDS.ASM):00255                 BNE     BOOM1           ;
                      (       SOUNDS.ASM):00256         ;
C8AD 39               (       SOUNDS.ASM):00257                 RTS
                      (       SOUNDS.ASM):00258         ;
                      (       SOUNDS.ASM):00259         
                      (       SOUNDS.ASM):00260         
                      (       SOUNDS.ASM):00261         
                      (       SOUNDS.ASM):00262         ; * * * * * * * * *
                      (       SOUNDS.ASM):00263         ;
                      (       SOUNDS.ASM):00264         ; CHUCK:
                      (       SOUNDS.ASM):00265         ;       Sound of torch lighting
                      (       SOUNDS.ASM):00266         ;
                      (       SOUNDS.ASM):00267         ; WHOOSH: Subroutine to simulate the sound of something passing
                      (       SOUNDS.ASM):00268         ;         rapidly by. This sound is created by passing white noise
                      (       SOUNDS.ASM):00269         ;         through an envelope generator with a short attack time
                      (       SOUNDS.ASM):00270         ;         followed by a slower decay time.
                      (       SOUNDS.ASM):00271         ;
                      (       SOUNDS.ASM):00272         ; Useful for the sound of an arrow in flight or the swing of
                      (       SOUNDS.ASM):00273         ; a sword, axe, mace, or other such device.
                      (       SOUNDS.ASM):00274         ;
                      (       SOUNDS.ASM):00275         ; * * * * * * * * *
                      (       SOUNDS.ASM):00276         ;
C8AE BDC939           (       SOUNDS.ASM):00277         WHOOSH  JSR     SETNVA          ;env. gen. setup routine
C8B1 80               (       SOUNDS.ASM):00278                 FCB     $80             ;increment
C8B2 8D76             (       SOUNDS.ASM):00279         SNWSH2  BSR     SNZNVA          ;get some noise
C8B4 2504             (       SOUNDS.ASM):00280                 BCS     CHUCK           ;goto decay if attack done
C8B6 8D15             (       SOUNDS.ASM):00281                 BSR     SNOUT           ;out to DAC
C8B8 20F8             (       SOUNDS.ASM):00282                 BRA     SNWSH2          ;continue
C8BA BDC936           (       SOUNDS.ASM):00283         CHUCK   JSR     SETNVD          ;envelope generator setup
C8BD A0               (       SOUNDS.ASM):00284                 FCB     $A0             ;decrement
C8BE 8D6E             (       SOUNDS.ASM):00285         SNWSH1  BSR     SNENVN          ;decompression subroutine
C8C0 20FC             (       SOUNDS.ASM):00286                 BRA     SNWSH1          ;continue
                      (       SOUNDS.ASM):00287         ;
                      (       SOUNDS.ASM):00288         
                      (       SOUNDS.ASM):00289         
                      (       SOUNDS.ASM):00290         
                      (       SOUNDS.ASM):00291         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       SOUNDS.ASM):00292         ;  S O U N D   G E N E R A T O R   S U P P O R T   S U B R O U T I N E S
                      (       SOUNDS.ASM):00293         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       SOUNDS.ASM):00294         ;
                      (       SOUNDS.ASM):00295         ; * * * * * * * * *
                      (       SOUNDS.ASM):00296         ;
                      (       SOUNDS.ASM):00297         ; Short period programmable timer subroutine
                      (       SOUNDS.ASM):00298         ;
C8C2 8E1000           (       SOUNDS.ASM):00299         SNWT1K  LDX     #$1000          ;default period entry point
C8C5 3410             (       SOUNDS.ASM):00300         SNWAIT  PSHS    X
C8C7 301F             (       SOUNDS.ASM):00301         SNWAT1  LEAX    -1,X            ;decrement counter
C8C9 26FC             (       SOUNDS.ASM):00302                 BNE     SNWAT1          ;done?
C8CB 3590             (       SOUNDS.ASM):00303         SNCLK4  PULS    X,PC            ;
                      (       SOUNDS.ASM):00304         ;
                      (       SOUNDS.ASM):00305         ; * * * * * * * * *
                      (       SOUNDS.ASM):00306         ;
                      (       SOUNDS.ASM):00307         ; Sounds - output routine
                      (       SOUNDS.ASM):00308         ;
C8CD D661             (       SOUNDS.ASM):00309         SNOUT   LDB     SNVOL           ;load desired volume level
C8CF 3D               (       SOUNDS.ASM):00310                 MUL
C8D0 84FC             (       SOUNDS.ASM):00311                 ANDA    #$FC
C8D2 B7FF20           (       SOUNDS.ASM):00312                 STA     $FF20           ;output to DAC
C8D5 39               (       SOUNDS.ASM):00313                 RTS
                      (       SOUNDS.ASM):00314         ;
                      (       SOUNDS.ASM):00315         ;
                      (       SOUNDS.ASM):00316         ; * * * * * * * * *
                      (       SOUNDS.ASM):00317         ;
                      (       SOUNDS.ASM):00318         ; Noise generator
                      (       SOUNDS.ASM):00319         ;
C8D6 DC56             (       SOUNDS.ASM):00320         SNOISE  LDD     SNDRND
C8D8 58               (       SOUNDS.ASM):00321                 LSLB                    ;multiply by five
C8D9 49               (       SOUNDS.ASM):00322                 ROLA
C8DA 58               (       SOUNDS.ASM):00323                 LSLB
C8DB 49               (       SOUNDS.ASM):00324                 ROLA
C8DC D356             (       SOUNDS.ASM):00325                 ADDD    SNDRND
C8DE 5C               (       SOUNDS.ASM):00326                 INCB
C8DF DD56             (       SOUNDS.ASM):00327                 STD     SNDRND          ;save new value
C8E1 39               (       SOUNDS.ASM):00328                 RTS
                      (       SOUNDS.ASM):00329         ;
                      (       SOUNDS.ASM):00330         
                      (       SOUNDS.ASM):00331         
                      (       SOUNDS.ASM):00332         
                      (       SOUNDS.ASM):00333         ; * * * * * * * * *
                      (       SOUNDS.ASM):00334         ;
                      (       SOUNDS.ASM):00335         ; CLANK:
                      (       SOUNDS.ASM):00336         ; KLANK:
                      (       SOUNDS.ASM):00337         ;
                      (       SOUNDS.ASM):00338         ;       Subroutines to generate the sounds of objects striking
                      (       SOUNDS.ASM):00339         ;       other objects. This sound is created by playing
                      (       SOUNDS.ASM):00340         ;       two tones of a slightly de-tuned 6th harmonic
                      (       SOUNDS.ASM):00341         ;       relationship.
                      (       SOUNDS.ASM):00342         ;
                      (       SOUNDS.ASM):00343         ; Useful for impacts with metal objects, falling objects, etc.
                      (       SOUNDS.ASM):00344         ;
                      (       SOUNDS.ASM):00345         ; * * * * * * * * *
                      (       SOUNDS.ASM):00346         ;
C8E2 8D39             (       SOUNDS.ASM):00347         CLANG   BSR     CSETUP          ;
C8E4 64               (       SOUNDS.ASM):00348                 FCB     $64             ;
C8E5 24               (       SOUNDS.ASM):00349                 FCB     $24             ;
                      (       SOUNDS.ASM):00350         ;
C8E6 8D35             (       SOUNDS.ASM):00351         KKLANK  BSR     CSETUP          ;"kklank" setup
C8E8 32               (       SOUNDS.ASM):00352                 FCB     $32             ;
C8E9 12               (       SOUNDS.ASM):00353                 FCB     $12             ;
                      (       SOUNDS.ASM):00354         ;
C8EA 8D31             (       SOUNDS.ASM):00355         KLANK   BSR     CSETUP          ;"klank" setup routine
C8EC AF               (       SOUNDS.ASM):00356                 FCB     $AF             ;frequency 1
C8ED 36               (       SOUNDS.ASM):00357                 FCB     $36             ;frequency 2
                      (       SOUNDS.ASM):00358         ;
C8EE 8D2D             (       SOUNDS.ASM):00359         CLANK   BSR     CSETUP          ;"clank" setup routine
C8F0 19               (       SOUNDS.ASM):00360                 FCB     $19             ;frequency 1
C8F1 09               (       SOUNDS.ASM):00361                 FCB     $09             ;frequency 2
                      (       SOUNDS.ASM):00362         ;
C8F2 8D42             (       SOUNDS.ASM):00363         SNCLK5  BSR     SETNVD          ;common env. gen. set-up
C8F4 60               (       SOUNDS.ASM):00364                 FCB     $60             ;decrement constant
C8F5 9E63             (       SOUNDS.ASM):00365                 LDX     FREQ1           ;load frequency 1
C8F7 109E65           (       SOUNDS.ASM):00366                 LDY     FREQ2           ;load frequency 2
C8FA 4F               (       SOUNDS.ASM):00367                 CLRA                    ;clear sound sample value
C8FB 301F             (       SOUNDS.ASM):00368         SNCLK2  LEAX    -1,X
C8FD 2606             (       SOUNDS.ASM):00369                 BNE     SNCLK1
C8FF 9E63             (       SOUNDS.ASM):00370                 LDX     FREQ1           ;load frequency 1
C901 887F             (       SOUNDS.ASM):00371                 EORA    #$7F            ;flip low order 7 bits of sound sample
C903 8D0D             (       SOUNDS.ASM):00372                 BSR     SNCLK3          ;call local subroutine
C905 313F             (       SOUNDS.ASM):00373         SNCLK1  LEAY    -1,Y
C907 26F2             (       SOUNDS.ASM):00374                 BNE     SNCLK2
C909 109E65           (       SOUNDS.ASM):00375                 LDY     FREQ2           ;load frequency 2
C90C 8880             (       SOUNDS.ASM):00376                 EORA    #$80            ;flip hi order bit
C90E 8D02             (       SOUNDS.ASM):00377                 BSR     SNCLK3
C910 20E9             (       SOUNDS.ASM):00378                 BRA     SNCLK2
                      (       SOUNDS.ASM):00379         ;
                      (       SOUNDS.ASM):00380         ; Local Subroutine
                      (       SOUNDS.ASM):00381         ;
C912 9759             (       SOUNDS.ASM):00382         SNCLK3  STA     SNSAV           ;save sound sample
C914 8D70             (       SOUNDS.ASM):00383                 BSR     SNENV           ;
C916 23B3             (       SOUNDS.ASM):00384                 BLS     SNCLK4          ;
C918 8DB3             (       SOUNDS.ASM):00385                 BSR     SNOUT           ;
C91A 9659             (       SOUNDS.ASM):00386                 LDA     SNSAV           ;restore sound sample
C91C 39               (       SOUNDS.ASM):00387                 RTS
                      (       SOUNDS.ASM):00388         
                      (       SOUNDS.ASM):00389         
                      (       SOUNDS.ASM):00390         
                      (       SOUNDS.ASM):00391         ; Local subroutine
                      (       SOUNDS.ASM):00392         ;
C91D AEE1             (       SOUNDS.ASM):00393         CSETUP  LDX     ,S++            ;load the stacked PC
C91F E680             (       SOUNDS.ASM):00394                 LDB     ,X+             ;load frequency 1
C921 4F               (       SOUNDS.ASM):00395                 CLRA                    ;16-bit value
C922 DD63             (       SOUNDS.ASM):00396                 STD     FREQ1           ;save it
C924 E680             (       SOUNDS.ASM):00397                 LDB     ,X+             ;load frequency 2
C926 DD65             (       SOUNDS.ASM):00398                 STD     FREQ2           ;save it
                      (       SOUNDS.ASM):00399         ;
C928 20C8             (       SOUNDS.ASM):00400                 BRA     SNCLK5          ;force a branch
                      (       SOUNDS.ASM):00401         ;
                      (       SOUNDS.ASM):00402         ; Compression subroutine
                      (       SOUNDS.ASM):00403         ;
C92A 8DAA             (       SOUNDS.ASM):00404         SNZNVA  BSR     SNOISE          ;
C92C 2067             (       SOUNDS.ASM):00405                 BRA     SNENVA          ;
                      (       SOUNDS.ASM):00406         ;
                      (       SOUNDS.ASM):00407         ; Compression subroutine
                      (       SOUNDS.ASM):00408         ;
C92E 8DA6             (       SOUNDS.ASM):00409         SNENVN  BSR     SNOISE          ;
C930 8D54             (       SOUNDS.ASM):00410         SNENVT  BSR     SNENV           ;
C932 2397             (       SOUNDS.ASM):00411                 BLS     SNCLK4          ;
C934 2097             (       SOUNDS.ASM):00412                 BRA     SNOUT           ;
                      (       SOUNDS.ASM):00413         ;
                      (       SOUNDS.ASM):00414         ; Local subroutine
                      (       SOUNDS.ASM):00415         ;
C936 9E03             (       SOUNDS.ASM):00416         SETNVD  LDX     NEGONE          ;decay mode setup
C938 10               (       SOUNDS.ASM):00417                 FCB     $10             ;skip next 3 bytes (LDY)
C939 9E00             (       SOUNDS.ASM):00418         SETNVA  LDX     BIGZER          ;attack mode setup
C93B 9F5B             (       SOUNDS.ASM):00419                 STX     SNENVS          ;store starting volume
C93D AEE4             (       SOUNDS.ASM):00420                 LDX     ,S              ;get the PC
C93F E680             (       SOUNDS.ASM):00421                 LDB     ,X+             ;load the increment/decrement
C941 4F               (       SOUNDS.ASM):00422                 CLRA                    ;16-bit value
C942 DD5D             (       SOUNDS.ASM):00423                 STD     SNENVD          ;store it
C944 AFE4             (       SOUNDS.ASM):00424                 STX     ,S              ;pointer becomes new PC
                      (       SOUNDS.ASM):00425         ;
C946 39               (       SOUNDS.ASM):00426         SNLXT1  RTS                     ;return to caller
                      (       SOUNDS.ASM):00427         ;
                      (       SOUNDS.ASM):00428         
                      (       SOUNDS.ASM):00429         
                      (       SOUNDS.ASM):00430         
                      (       SOUNDS.ASM):00431         ; * * * * * * * * *
                      (       SOUNDS.ASM):00432         ;
                      (       SOUNDS.ASM):00433         ; KLINK: Subroutine to simulate the metal/metal impact sound
                      (       SOUNDS.ASM):00434         ;        of swordplay. This sound is generated by mixing a high
                      (       SOUNDS.ASM):00435         ;        pitched tone with white noise. The resultant signal
                      (       SOUNDS.ASM):00436         ;        is passed through an envelope generator with an
                      (       SOUNDS.ASM):00437         ;        instantaneous rise time, and a short decay time.
                      (       SOUNDS.ASM):00438         ;
                      (       SOUNDS.ASM):00439         ; Useful for swordplay, knife combat sounds, or the sound of
                      (       SOUNDS.ASM):00440         ; light metal objects striking one another such as the opening
                      (       SOUNDS.ASM):00441         ; of a door lock.
                      (       SOUNDS.ASM):00442         ;
                      (       SOUNDS.ASM):00443         ; * * * * * * * * *
                      (       SOUNDS.ASM):00444         ;
C947 8DED             (       SOUNDS.ASM):00445         KLINK   BSR     SETNVD          ;common env. gen. set-up
C949 60               (       SOUNDS.ASM):00446                 FCB     $60             ;decrement constant
C94A BDC8D6           (       SOUNDS.ASM):00447         SNKLK1  JSR     SNOISE          ;get some noise
C94D 44               (       SOUNDS.ASM):00448                 LSRA                    ;(some noise)
C94E 8DE0             (       SOUNDS.ASM):00449                 BSR     SNENVT          ;compression subroutine
C950 BDC8D6           (       SOUNDS.ASM):00450                 JSR     SNOISE          ;get some noise
C953 8A80             (       SOUNDS.ASM):00451                 ORA     #$80            ;add tone component to sample
C955 8DD9             (       SOUNDS.ASM):00452                 BSR     SNENVT          ;compression subroutine
C957 20F1             (       SOUNDS.ASM):00453                 BRA     SNKLK1          ;continue
                      (       SOUNDS.ASM):00454         ;
                      (       SOUNDS.ASM):00455         
                      (       SOUNDS.ASM):00456         
                      (       SOUNDS.ASM):00457         
                      (       SOUNDS.ASM):00458         ; * * * * * * * * *
                      (       SOUNDS.ASM):00459         ;
                      (       SOUNDS.ASM):00460         ; Snarl/Growl Sound
                      (       SOUNDS.ASM):00461         ;
                      (       SOUNDS.ASM):00462         ; * * * * * * * * *
                      (       SOUNDS.ASM):00463         ;
C959 8E0300           (       SOUNDS.ASM):00464         GROWL   LDX     #$0300          ;parameter
C95C 10               (       SOUNDS.ASM):00465                 FCB     $10             ;   skip next 3 bytes (LDY)
                      (       SOUNDS.ASM):00466         ;
C95D 8E0200           (       SOUNDS.ASM):00467         GRAWL   LDX     #$0200          ;parameter
C960 10               (       SOUNDS.ASM):00468                 FCB     $10             ;   skip next 3 bytes (LDY)
                      (       SOUNDS.ASM):00469         ;
C961 8E0100           (       SOUNDS.ASM):00470         SNARL   LDX     #$0100          ;parameter
C964 9F5D             (       SOUNDS.ASM):00471         SNARL1  STX     SNENVD          ;
C966 4F               (       SOUNDS.ASM):00472                 CLRA
C967 5F               (       SOUNDS.ASM):00473                 CLRB
C968 DD5B             (       SOUNDS.ASM):00474                 STD     SNENVS          ;
C96A 8DBE             (       SOUNDS.ASM):00475         SNGRL1  BSR     SNZNVA
C96C 250B             (       SOUNDS.ASM):00476                 BCS     SNGRL2
C96E BDC8CD           (       SOUNDS.ASM):00477                 JSR     SNOUT
C971 8E00F0           (       SOUNDS.ASM):00478                 LDX     #$00F0
C974 BDC8C5           (       SOUNDS.ASM):00479                 JSR     SNWAIT
C977 20F1             (       SOUNDS.ASM):00480                 BRA     SNGRL1
                      (       SOUNDS.ASM):00481         ;
C979 8DBB             (       SOUNDS.ASM):00482         SNGRL2  BSR     SETNVD          ;env. gen. setup
C97B 40               (       SOUNDS.ASM):00483                 FCB     $40             ;decay rate
                      (       SOUNDS.ASM):00484         ;
C97C 8DB0             (       SOUNDS.ASM):00485         SNGRL3  BSR     SNENVN          ;compression subroutine
C97E 8E0060           (       SOUNDS.ASM):00486                 LDX     #$0060
C981 BDC8C5           (       SOUNDS.ASM):00487                 JSR     SNWAIT
C984 20F6             (       SOUNDS.ASM):00488                 BRA     SNGRL3
                      (       SOUNDS.ASM):00489         ;
                      (       SOUNDS.ASM):00490         
                      (       SOUNDS.ASM):00491         
                      (       SOUNDS.ASM):00492         
                      (       SOUNDS.ASM):00493         ; * * * * * * * * *
                      (       SOUNDS.ASM):00494         ;
                      (       SOUNDS.ASM):00495         ; Decay envelope generator.
                      (       SOUNDS.ASM):00496         ; BLS after return tests if done
                      (       SOUNDS.ASM):00497         ;
C986 3402             (       SOUNDS.ASM):00498         SNENV   PSHS    A               ;save sound sample
C988 DC5B             (       SOUNDS.ASM):00499                 LDD     SNENVS
C98A 935D             (       SOUNDS.ASM):00500                 SUBD    SNENVD
C98C 3401             (       SOUNDS.ASM):00501         SNENV1  PSHS    CC
C98E DD5B             (       SOUNDS.ASM):00502                 STD     SNENVS          ;new volume level
C990 E661             (       SOUNDS.ASM):00503                 LDB     1,S             ;restore sound sample
C992 3D               (       SOUNDS.ASM):00504                 MUL                     ;times volume level
C993 3585             (       SOUNDS.ASM):00505                 PULS    CC,B,PC         ;restore condition codes, etc. return
                      (       SOUNDS.ASM):00506         ;
                      (       SOUNDS.ASM):00507         ; * * * * * * * * *
                      (       SOUNDS.ASM):00508         ;
                      (       SOUNDS.ASM):00509         ; Attack Envelope Generator
                      (       SOUNDS.ASM):00510         ; BCS after return tests if done
                      (       SOUNDS.ASM):00511         ;
C995 3402             (       SOUNDS.ASM):00512         SNENVA  PSHS    A
C997 DC5B             (       SOUNDS.ASM):00513                 LDD     SNENVS
C999 D35D             (       SOUNDS.ASM):00514                 ADDD    SNENVD
C99B 20EF             (       SOUNDS.ASM):00515                 BRA     SNENV1
                      (       SOUNDS.ASM):00516         ;
                      (       SOUNDS.ASM):00517         
                      (       SOUNDS.ASM):00518         
                      (       SOUNDS.ASM):00519         
                      (       SOUNDS.ASM):00520         ;
                      (       SOUNDS.ASM):00521         ;
                      (       SOUNDS.ASM):00522         ;  SWITAB: Define SWI Offsets
                      (       SOUNDS.ASM):00523         ;
                      (       SOUNDS.ASM):00524         ;
     C388             (       SOUNDS.ASM):00525         FOO     SET     SWIBEG          ;offset initialization
     C99D             (       SOUNDS.ASM):00526         SWITAB  EQU     *
                      (       SOUNDS.ASM):00527         ;
                      (       SOUNDS.ASM):00528         ;
                      (       SOUNDS.ASM):00529         ;
                      (       SOUNDS.ASM):00530         ;define offset table
                      (       SOUNDS.ASM):00531         ;
                      (       SOUNDS.ASM):00532         ;
C99D 00               (       SOUNDS.ASM):00533                 FCB     (SETFAX-FOO) AND $FF    ;set amount of fade based on RANGE
     C388             (       SOUNDS.ASM):00534         FOO     SET     SETFAX          ;
                      (       SOUNDS.ASM):00535         ;
C99E 1E               (       SOUNDS.ASM):00536                 FCB     (VCTLSX-FOO) AND $FF    ;vector list processor
     C3A6             (       SOUNDS.ASM):00537         FOO     SET     VCTLSX
                      (       SOUNDS.ASM):00538         ;
C99F A6               (       SOUNDS.ASM):00539                 FCB     (TXTSTI-FOO) AND $FF    ;string output (string follows)
     C44C             (       SOUNDS.ASM):00540         FOO     SET     TXTSTI
                      (       SOUNDS.ASM):00541         ;
C9A0 0C               (       SOUNDS.ASM):00542                 FCB     (TXTSTR-FOO) AND $FF    ;string output
     C458             (       SOUNDS.ASM):00543         FOO     SET     TXTSTR
                      (       SOUNDS.ASM):00544         ;
C9A1 05               (       SOUNDS.ASM):00545                 FCB     (TXTCHR-FOO) AND $FF    ;character output
     C45D             (       SOUNDS.ASM):00546         FOO     SET     TXTCHR
                      (       SOUNDS.ASM):00547         ;
C9A2 16               (       SOUNDS.ASM):00548                 FCB     (EXPANX-FOO) AND $FF    ;string decompression routine
     C473             (       SOUNDS.ASM):00549         FOO     SET     EXPANX
                      (       SOUNDS.ASM):00550         ;
C9A3 03               (       SOUNDS.ASM):00551                 FCB     (EXPA00-FOO) AND $FF    ;   secondary entry point
     C476             (       SOUNDS.ASM):00552         FOO     SET     EXPA00
                      (       SOUNDS.ASM):00553         ;
C9A4 5D               (       SOUNDS.ASM):00554                 FCB     (RANDOX-FOO) AND $FF    ;random number generator
     C4D3             (       SOUNDS.ASM):00555         FOO     SET     RANDOX
                      (       SOUNDS.ASM):00556         ;
C9A5 24               (       SOUNDS.ASM):00557                 FCB     (ZFLIPX-FOO) AND $FF    ;current screen clear
     C4F7             (       SOUNDS.ASM):00558         FOO     SET     ZFLIPX
                      (       SOUNDS.ASM):00559         ;
C9A6 03               (       SOUNDS.ASM):00560                 FCB     (ZFLOPX-FOO) AND $FF    ;alternate screen clear
     C4FA             (       SOUNDS.ASM):00561         FOO     SET     ZFLOPX
                      (       SOUNDS.ASM):00562         ;
C9A7 09               (       SOUNDS.ASM):00563                 FCB     (CLRSTX-FOO) AND $FF    ;status line clear
     C503             (       SOUNDS.ASM):00564         FOO     SET     CLRSTX
                      (       SOUNDS.ASM):00565         ;
C9A8 08               (       SOUNDS.ASM):00566                 FCB     (CLRPRX-FOO) AND $FF    ;primary text area clear
     C50B             (       SOUNDS.ASM):00567         FOO     SET     CLRPRX
                      (       SOUNDS.ASM):00568         ;
C9A9 22               (       SOUNDS.ASM):00569                 FCB     (HUPDAX-FOO) AND $FF    ;update the heartrate
     C52D             (       SOUNDS.ASM):00570         FOO     SET     HUPDAX
                      (       SOUNDS.ASM):00571         ;
C9AA B4               (       SOUNDS.ASM):00572                 FCB     (STATUX-FOO) AND $FF    ;update the status line
     C5E1             (       SOUNDS.ASM):00573         FOO     SET     STATUX
                      (       SOUNDS.ASM):00574         ;
C9AB 7D               (       SOUNDS.ASM):00575                 FCB     (PUPDAX-FOO) AND $FF    ;update the main screen
                      (       SOUNDS.ASM):00576         
                      (       SOUNDS.ASM):00577         
                      (       SOUNDS.ASM):00578         
     C65E             (       SOUNDS.ASM):00579         FOO     SET     PUPDAX
                      (       SOUNDS.ASM):00580         ;
C9AC 1E               (       SOUNDS.ASM):00581                 FCB     (PROMPX-FOO) AND $FF    ;prompt the human for input
     C67C             (       SOUNDS.ASM):00582         FOO     SET     PROMPX
                      (       SOUNDS.ASM):00583         ;
C9AD 0B               (       SOUNDS.ASM):00584                 FCB     (WAITX-FOO) AND $FF     ;wait for a number of jiffies
     C687             (       SOUNDS.ASM):00585         FOO     SET     WAITX
                      (       SOUNDS.ASM):00586         ;
C9AE 07               (       SOUNDS.ASM):00587                 FCB     (ZEROX-FOO) AND $FF     ;clear RAM
     C68E             (       SOUNDS.ASM):00588         FOO     SET     ZEROX
                      (       SOUNDS.ASM):00589         ;
C9AF 02               (       SOUNDS.ASM):00590                 FCB     (NEGRAX-FOO) AND $FF    ;set RAM to negative one
     C690             (       SOUNDS.ASM):00591         FOO     SET     NEGRAX
                      (       SOUNDS.ASM):00592         ;
C9B0 1C               (       SOUNDS.ASM):00593                 FCB     (WIZIX-FOO) AND $FF     ;fade-in
     C6AC             (       SOUNDS.ASM):00594         FOO     SET     WIZIX
                      (       SOUNDS.ASM):00595         ;
C9B1 04               (       SOUNDS.ASM):00596                 FCB     (WIZIX0-FOO) AND $FF    ;   secondary entry point
     C6B0             (       SOUNDS.ASM):00597         FOO     SET     WIZIX0
                      (       SOUNDS.ASM):00598         ;
C9B2 1D               (       SOUNDS.ASM):00599                 FCB     (WIZOX-FOO) AND $FF    ;fade-out
     C6CD             (       SOUNDS.ASM):00600         FOO     SET     WIZOX
                      (       SOUNDS.ASM):00601         ;
C9B3 21               (       SOUNDS.ASM):00602                 FCB     (PREPAX-FOO) AND $FF    ;"PREPARE!" msg on EXAMINE screen
     C6EE             (       SOUNDS.ASM):00603         FOO     SET     PREPAX
                      (       SOUNDS.ASM):00604         ;
C9B4 15               (       SOUNDS.ASM):00605                 FCB     (OBIRTX-FOO) AND $FF    ;object creation routine
     C703             (       SOUNDS.ASM):00606         FOO     SET     OBIRTX
                      (       SOUNDS.ASM):00607         ;
C9B5 24               (       SOUNDS.ASM):00608                 FCB     (OCBFIX-FOO) AND $FF    ;OCB filling routine
     C727             (       SOUNDS.ASM):00609         FOO     SET     OCBFIX
                      (       SOUNDS.ASM):00610         ;
C9B6 24               (       SOUNDS.ASM):00611                 FCB     (INIVUX-FOO) AND $FF    ;create initial view
     C74B             (       SOUNDS.ASM):00612         FOO     SET     INIVUX
                      (       SOUNDS.ASM):00613         ;
C9B7 16               (       SOUNDS.ASM):00614                 FCB     (NEWLVX-FOO) AND $FF    ;create a new level
     C761             (       SOUNDS.ASM):00615         FOO     SET     NEWLVX
                      (       SOUNDS.ASM):00616         ;
C9B8 6F               (       SOUNDS.ASM):00617                 FCB     (SOUNDI-FOO) AND $FF    ;   secondary entry point
     C7D0             (       SOUNDS.ASM):00618         FOO     SET     SOUNDI
                      (       SOUNDS.ASM):00619         ;
C9B9 08               (       SOUNDS.ASM):00620                 FCB     (SOUNDX-FOO) AND $FF    ;sound routines
     C7D8             (       SOUNDS.ASM):00621         FOO     SET     SOUNDX
                      (       SOUNDS.ASM):00622         ;
                      (       SOUNDS.ASM):00623         ;;;;;        END
                      (    DAGGORATH.ASM):00108                 INCLUDE COMTXT.ASM       ;Text Display Service Routines
                      (       COMTXT.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMTXT.ASM):00002         ;  T E X T   D I S P L A Y   S E R V I C E   R O U T I N E S
                      (       COMTXT.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMTXT.ASM):00004         ;
                      (       COMTXT.ASM):00005         ;  These routines maintain a scrolling text display
                      (       COMTXT.ASM):00006         ;  in Graphic Resolution-6 (G6R) mode.  Include are
                      (       COMTXT.ASM):00007         ;  character/string output routines and a software
                      (       COMTXT.ASM):00008         ;  character generator.
                      (       COMTXT.ASM):00009         ;
                      (       COMTXT.ASM):00010         ;  Depending on a flag (P.TXSGL), the routines will
                      (       COMTXT.ASM):00011         ;  generate text information in a single or both display
                      (       COMTXT.ASM):00012         ;  planes
                      (       COMTXT.ASM):00013         ;
                      (       COMTXT.ASM):00014                 NAM     COMTXT
                      (       COMTXT.ASM):00015         ;     LIBRY  CD
                      (       COMTXT.ASM):00016         ;        XDEF    TXTXXX,TXTSCR,TXTDPB
                      (       COMTXT.ASM):00017         ;        XDEF    LSLD5,LSLD4,LSLD3,LSLD2,LSLD
                      (       COMTXT.ASM):00018         ;
                      (       COMTXT.ASM):00019         ;        XREF    SWCTAB,SPCTAB
                      (       COMTXT.ASM):00020         ;        PSCT
                      (       COMTXT.ASM):00021         ;
                      (       COMTXT.ASM):00022         ;  TXTXXX: Character Handling Routines
                      (       COMTXT.ASM):00023         ;
C9BA 8124             (       COMTXT.ASM):00024         TXTXXX  CMPA    #I.BS           ;backspace? (left arrow key)
C9BC 2709             (       COMTXT.ASM):00025                 BEQ     TXTBS           ;   yes
C9BE 811F             (       COMTXT.ASM):00026                 CMPA    #I.CR           ;carriage return?
C9C0 2710             (       COMTXT.ASM):00027                 BEQ     TXTCR           ;   yes
                      (       COMTXT.ASM):00028         ;
                      (       COMTXT.ASM):00029         ;  Printable Characters
                      (       COMTXT.ASM):00030         ;
C9C2 8D5B             (       COMTXT.ASM):00031                 BSR     TXTDPB          ;deposit byte into display
C9C4 3001             (       COMTXT.ASM):00032                 LEAX    1,X             ;advance cursor
C9C6 39               (       COMTXT.ASM):00033                 RTS                     ;bye
                      (       COMTXT.ASM):00034         ;
                      (       COMTXT.ASM):00035         ;  Backspace
                      (       COMTXT.ASM):00036         ;
C9C7 301F             (       COMTXT.ASM):00037         TXTBS   LEAX    -1,X            ;cursor back one position
C9C9 9C03             (       COMTXT.ASM):00038                 CMPX    NEGONE          ;wraparound?
C9CB 2604             (       COMTXT.ASM):00039                 BNE     TXTBS1          ;   nope
C9CD AE42             (       COMTXT.ASM):00040                 LDX     P.TXCNT,U       ;wraparound to end
C9CF 301F             (       COMTXT.ASM):00041                 LEAX    -1,X            ;   .
C9D1 39               (       COMTXT.ASM):00042         TXTBS1  RTS                     ;bye
                      (       COMTXT.ASM):00043         ;
                      (       COMTXT.ASM):00044         ;  Carriage Return
                      (       COMTXT.ASM):00045         ;
C9D2 308820           (       COMTXT.ASM):00046         TXTCR   LEAX    32,X            ;down one line
C9D5 1E01             (       COMTXT.ASM):00047                 EXG     D,X             ;perform logical operation on IX
C9D7 C4E0             (       COMTXT.ASM):00048                 ANDB    #%11100000      ;back to beginning of line
C9D9 1E01             (       COMTXT.ASM):00049                 EXG     D,X             ;restore regs
C9DB 39               (       COMTXT.ASM):00050                 RTS                     ;go home
                      (       COMTXT.ASM):00051         
                      (       COMTXT.ASM):00052         
                      (       COMTXT.ASM):00053         
                      (       COMTXT.ASM):00054         ;
                      (       COMTXT.ASM):00055         ;  TXTSCR: Screen Scrolling Routine
                      (       COMTXT.ASM):00056         ;
                      (       COMTXT.ASM):00057         ;  Inputs:
                      (       COMTXT.ASM):00058         ;       U - TXB pointer
                      (       COMTXT.ASM):00059         ;  Returns:
                      (       COMTXT.ASM):00060         ;       X - new cursor position (beginning of last line)
                      (       COMTXT.ASM):00061         ;         - screen scrolled up one line
                      (       COMTXT.ASM):00062         ;
C9DC 3436             (       COMTXT.ASM):00063         TXTSCR  PSHS    A,B,X,Y         ;save regs
C9DE AEC4             (       COMTXT.ASM):00064                 LDX     P.TXBAS,U       ;pointer to first line
C9E0 EC42             (       COMTXT.ASM):00065                 LDD     P.TXCNT,U       ;form byte count
C9E2 830020           (       COMTXT.ASM):00066                 SUBD    #32             ;minus one line
C9E5 ED62             (       COMTXT.ASM):00067                 STD     2,S             ;return new cursor position
C9E7 8D2F             (       COMTXT.ASM):00068                 BSR     LSLD3           ;byte count = chars * 8
C9E9 1F02             (       COMTXT.ASM):00069                 TFR     D,Y             ;copy byte count
                      (       COMTXT.ASM):00070         ;
C9EB EC890100         (       COMTXT.ASM):00071         TSCR10  LDD     32*8,X          ;copy two bytes from next line
C9EF 6D47             (       COMTXT.ASM):00072                 TST     P.TXSGL,U       ;processing single/double screen?
C9F1 2604             (       COMTXT.ASM):00073                 BNE     TSCR12          ;  single
C9F3 ED891800         (       COMTXT.ASM):00074                 STD     G6.LEN,X        ;deposit two bytes into second screen
C9F7 ED81             (       COMTXT.ASM):00075         TSCR12  STD     ,X++            ;deposit two bytes into first screen
C9F9 313E             (       COMTXT.ASM):00076                 LEAY    -2,Y            ;decrement loop count
C9FB 26EE             (       COMTXT.ASM):00077                 BNE     TSCR10          ;loop
                      (       COMTXT.ASM):00078         ;
C9FD E646             (       COMTXT.ASM):00079                 LDB     P.TXINV,U       ;process inverse-mode
C9FF 1D               (       COMTXT.ASM):00080                 SEX                     ;   (magic cuz' P.TXINV is 0 or -1)
CA00 108E0100         (       COMTXT.ASM):00081                 LDY     #32*8           ;'clear last line' counter
                      (       COMTXT.ASM):00082         ;
CA04 6D47             (       COMTXT.ASM):00083         TSCR20  TST     P.TXSGL,U       ;processing single/double screen?
CA06 2604             (       COMTXT.ASM):00084                 BNE     TSCR22          ;  single
CA08 ED891800         (       COMTXT.ASM):00085                 STD     G6.LEN,X        ;deposit two bytes into second screen
CA0C ED81             (       COMTXT.ASM):00086         TSCR22  STD     ,X++            ;deposit two bytes into first screen
CA0E 313E             (       COMTXT.ASM):00087                 LEAY    -2,Y            ;decrement loop count
CA10 26F2             (       COMTXT.ASM):00088                 BNE     TSCR20          ;loop
                      (       COMTXT.ASM):00089         ;
CA12 35B6             (       COMTXT.ASM):00090                 PULS    A,B,X,Y,PC      ;restore regs/exit
                      (       COMTXT.ASM):00091         ;
                      (       COMTXT.ASM):00092         ;  LSLDn: 16-bit Logic Shift Left
                      (       COMTXT.ASM):00093         ;
CA14 58               (       COMTXT.ASM):00094         LSLD5   LSLB                    ;MSB into carry
CA15 49               (       COMTXT.ASM):00095                 ROLA                    ;carry into LSB
CA16 58               (       COMTXT.ASM):00096         LSLD4   LSLB                    ;and so on...
CA17 49               (       COMTXT.ASM):00097                 ROLA                    ;   .
CA18 58               (       COMTXT.ASM):00098         LSLD3   LSLB                    ;   .
CA19 49               (       COMTXT.ASM):00099                 ROLA                    ;   .
CA1A 58               (       COMTXT.ASM):00100         LSLD2   LSLB                    ;   .
CA1B 49               (       COMTXT.ASM):00101                 ROLA                    ;   .
CA1C 58               (       COMTXT.ASM):00102         LSLD    LSLB                    ;   .
CA1D 49               (       COMTXT.ASM):00103                 ROLA                    ;   .
CA1E 39               (       COMTXT.ASM):00104                 RTS                     ;go home
                      (       COMTXT.ASM):00105         
                      (       COMTXT.ASM):00106         
                      (       COMTXT.ASM):00107         
                      (       COMTXT.ASM):00108         ;
                      (       COMTXT.ASM):00109         ;  TXTDPB: Software Character Generator
                      (       COMTXT.ASM):00110         ;
                      (       COMTXT.ASM):00111         ;  Inputs:
                      (       COMTXT.ASM):00112         ;       A - Display Code Character
                      (       COMTXT.ASM):00113         ;       U - Pointer to TXB
                      (       COMTXT.ASM):00114         ;
CA1F 3476             (       COMTXT.ASM):00115         TXTDPB  PSHS    A,B,X,Y,U       ;save regs
                      (       COMTXT.ASM):00116         ;
                      (       COMTXT.ASM):00117         ;  Select Proper Character Set
                      (       COMTXT.ASM):00118         ;
CA21 8120             (       COMTXT.ASM):00119                 CMPA    #$20            ;normal character?
CA23 250C             (       COMTXT.ASM):00120                 BLO     NORDPB          ;   yes
                      (       COMTXT.ASM):00121         ;
                      (       COMTXT.ASM):00122         ;  Special Characters
                      (       COMTXT.ASM):00123         ;
CA25 8020             (       COMTXT.ASM):00124                 SUBA    #$20            ;offset = (char value - $20) * 7
CA27 C607             (       COMTXT.ASM):00125                 LDB     #7              ;   .
CA29 3D               (       COMTXT.ASM):00126                 MUL                     ;   .
CA2A C3DBED           (       COMTXT.ASM):00127                 ADDD    #SPCTAB         ;special character table
CA2D 1F01             (       COMTXT.ASM):00128                 TFR     D,X             ;software character addr
CA2F 201B             (       COMTXT.ASM):00129                 BRA     DPB00           ;drop into common code
                      (       COMTXT.ASM):00130         ;
                      (       COMTXT.ASM):00131         ;  Normal Characters
                      (       COMTXT.ASM):00132         ;
CA31 C605             (       COMTXT.ASM):00133         NORDPB  LDB     #5              ;offset = char value * 5
CA33 3D               (       COMTXT.ASM):00134                 MUL                     ;   .
CA34 C3DB52           (       COMTXT.ASM):00135                 ADDD    #SWCTAB         ;software char table base addr
CA37 1F01             (       COMTXT.ASM):00136                 TFR     D,X             ;5-bit string addr
CA39 CE0357           (       COMTXT.ASM):00137                 LDU     #SWCHAR+1       ;s/w char expansion buffer
CA3C 3F               (       COMTXT.ASM):00138                 SWI                     ;expand the string
CA3D 06               (       COMTXT.ASM):00139                 FCB     EXPAN0          ;   .
                      (       COMTXT.ASM):00140         ;
                      (       COMTXT.ASM):00141         ;
                      (       COMTXT.ASM):00142         ;  Center 5-bit data in each byte
                      (       COMTXT.ASM):00143         ;
CA3E 8E035E           (       COMTXT.ASM):00144                 LDX     #SWCHAR+8       ;starting point
CA41 6882             (       COMTXT.ASM):00145         NDPB10  LSL     ,-X             ;shift previous char
CA43 6884             (       COMTXT.ASM):00146                 LSL     ,X              ;   .
CA45 8C0357           (       COMTXT.ASM):00147                 CMPX    #SWCHAR+1       ;done?
CA48 22F7             (       COMTXT.ASM):00148                 BHI     NDPB10          ;   nope
CA4A EE66             (       COMTXT.ASM):00149                 LDU     6,S             ;restore TXB ptr
                      (       COMTXT.ASM):00150         ;
                      (       COMTXT.ASM):00151         
                      (       COMTXT.ASM):00152         
                      (       COMTXT.ASM):00153         
                      (       COMTXT.ASM):00154         ;
                      (       COMTXT.ASM):00155         ;  Calculate Display Screen Address
                      (       COMTXT.ASM):00156         ;
                      (       COMTXT.ASM):00157         ;
                      (       COMTXT.ASM):00158         ;  Note:  P.TXCUR,U contains the following bit pattern
                      (       COMTXT.ASM):00159         ;
                      (       COMTXT.ASM):00160         ;               LLLL LLLL LLLC CCCC
                      (       COMTXT.ASM):00161         ;
                      (       COMTXT.ASM):00162         ;  Where:  L - forms the LINE count
                      (       COMTXT.ASM):00163         ;          C - forms the COLUMN count
                      (       COMTXT.ASM):00164         ;
                      (       COMTXT.ASM):00165         ;  display offset = (LINE*32*8) + COLUMN
                      (       COMTXT.ASM):00166         ;
CA4C EC44             (       COMTXT.ASM):00167         DPB00   LDD     P.TXCUR,U       ;load cursor position
CA4E 8DC8             (       COMTXT.ASM):00168                 BSR     LSLD3           ;magic bit manipulation!!!
CA50 54               (       COMTXT.ASM):00169                 LSRB                    ;   .
CA51 54               (       COMTXT.ASM):00170                 LSRB                    ;   .
CA52 54               (       COMTXT.ASM):00171                 LSRB                    ;   .
CA53 E3C4             (       COMTXT.ASM):00172                 ADDD    P.TXBAS,U       ;add base addr to get pointer
CA55 1F02             (       COMTXT.ASM):00173                 TFR     D,Y             ;transfer to index register
                      (       COMTXT.ASM):00174         ;
                      (       COMTXT.ASM):00175         ;  At this point:
                      (       COMTXT.ASM):00176         ;       X - ptr to software character (7-bytes)
                      (       COMTXT.ASM):00177         ;       Y - display screen addr
                      (       COMTXT.ASM):00178         ;       U - ptr to TXB
                      (       COMTXT.ASM):00179         ;
CA57 C607             (       COMTXT.ASM):00180                 LDB     #7              ;loop count
CA59 A680             (       COMTXT.ASM):00181         DPB10   LDA     ,X+             ;load next byte
CA5B A846             (       COMTXT.ASM):00182                 EORA    P.TXINV,U       ;process inverse mode
CA5D A7A4             (       COMTXT.ASM):00183                 STA     ,Y              ;deposit into display
CA5F 6D47             (       COMTXT.ASM):00184                 TST     P.TXSGL,U       ;write to a single screen?
CA61 2604             (       COMTXT.ASM):00185                 BNE     DPB20           ;   yes
CA63 A7A91800         (       COMTXT.ASM):00186                 STA     G6.LEN,Y        ;write into both displays
CA67 31A820           (       COMTXT.ASM):00187         DPB20   LEAY    32,Y            ;advance to next scan line
CA6A 5A               (       COMTXT.ASM):00188                 DECB                    ;decrement loop count
CA6B 26EC             (       COMTXT.ASM):00189                 BNE     DPB10           ;loop until done
                      (       COMTXT.ASM):00190         ;
CA6D 35F6             (       COMTXT.ASM):00191                 PULS    A,B,X,Y,U,PC    ;restore regs/exit
                      (       COMTXT.ASM):00192         ;
                      (       COMTXT.ASM):00193         ;;;;;        END
                      (    DAGGORATH.ASM):00109                 INCLUDE VECTOR.ASM       ;Vector Generator
                      (       VECTOR.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       VECTOR.ASM):00002         ;  V E C T O R   G E N E R A T O R
                      (       VECTOR.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       VECTOR.ASM):00004                 NAM     VECTOR
                      (       VECTOR.ASM):00005         ;     LIBRY  CD
                      (       VECTOR.ASM):00006         ;        XDEF    VECTOR,NEGD,DIVIDE,BITMSK
                      (       VECTOR.ASM):00007         ;
                      (       VECTOR.ASM):00008         ;        XREF    ASRD6,ASRD3,LSLD5
                      (       VECTOR.ASM):00009         ;        PSCT
                      (       VECTOR.ASM):00010                 PAGE
                      (       VECTOR.ASM):00011         ;
                      (       VECTOR.ASM):00012         ;  DIVIDE: Software Division Routine
                      (       VECTOR.ASM):00013         ;
                      (       VECTOR.ASM):00014         ;  Inputs:
                      (       VECTOR.ASM):00015         ;       D - 16-bit unsigned dividend
                      (       VECTOR.ASM):00016         ;       X - divisor
                      (       VECTOR.ASM):00017         ;  Returns:
                      (       VECTOR.ASM):00018         ;       D - 16-bit unsigned result (RADIX-8: bbbbbbbb.bbbbbbbb)
                      (       VECTOR.ASM):00019         ;  Destroys:
                      (       VECTOR.ASM):00020         ;       T0,T1,T2
                      (       VECTOR.ASM):00021         ;
CA6F 3416             (       VECTOR.ASM):00022         DIVIDE  PSHS    A,B,X           ;save regs
CA71 6FE4             (       VECTOR.ASM):00023                 CLR     ,S              ;reset quotient (2022 n.b. original was 0,S)
CA73 6F61             (       VECTOR.ASM):00024                 CLR     1,S             ;   .
CA75 0FC1             (       VECTOR.ASM):00025                 CLR     T0              ;store dividend (T0:T1:T2)
CA77 DDC2             (       VECTOR.ASM):00026                 STD     T1              ;   .
                      (       VECTOR.ASM):00027         ;
                      (       VECTOR.ASM):00028         ;  Special Test for Zero/One
                      (       VECTOR.ASM):00029         ;
CA79 2724             (       VECTOR.ASM):00030                 BEQ     DIV99           ;   dividend was zero
CA7B 10A362           (       VECTOR.ASM):00031                 CMPD    2,S             ;dividend = divisor?
CA7E 2604             (       VECTOR.ASM):00032                 BNE     DIV00           ;   nope
CA80 6CE4             (       VECTOR.ASM):00033                 INC     ,S              ;set result (2022 n.b. original was 0,S)
CA82 201B             (       VECTOR.ASM):00034                 BRA     DIV99           ;done
                      (       VECTOR.ASM):00035         ;
                      (       VECTOR.ASM):00036         ;  Shift and Subtract
                      (       VECTOR.ASM):00037         ;
CA84 8E0010           (       VECTOR.ASM):00038         DIV00   LDX     #16             ;number of times to loop
CA87 08C3             (       VECTOR.ASM):00039         DIV10   LSL     T2              ;dividend * 2
CA89 09C2             (       VECTOR.ASM):00040                 ROL     T1              ;   .
CA8B 09C1             (       VECTOR.ASM):00041                 ROL     T0              ;   .
CA8D 6861             (       VECTOR.ASM):00042                 LSL     1,S             ;quotient * 2
CA8F 69E4             (       VECTOR.ASM):00043                 ROL     ,S              ;   . (2022 n.b. original was 0,S)
                      (       VECTOR.ASM):00044         ;
                      (       VECTOR.ASM):00045         ;  Trial Subtraction
                      (       VECTOR.ASM):00046         ;
CA91 DCC1             (       VECTOR.ASM):00047                 LDD     T0              ;16-MSBits of dividend
CA93 A362             (       VECTOR.ASM):00048                 SUBD    2,S             ;trial subtraction successful?
CA95 2504             (       VECTOR.ASM):00049                 BCS     DIV20           ;   nope
CA97 DDC1             (       VECTOR.ASM):00050                 STD     T0              ;update 16-MSBits of dividend
CA99 6C61             (       VECTOR.ASM):00051                 INC     1,S             ;quotient = quotient + 1
                      (       VECTOR.ASM):00052         ;
CA9B 301F             (       VECTOR.ASM):00053         DIV20   LEAX    -1,X            ;decrement and loop
CA9D 26E8             (       VECTOR.ASM):00054                 BNE     DIV10           ;   .
CA9F 3596             (       VECTOR.ASM):00055         DIV99   PULS    A,B,X,PC        ;return parm/exit
                      (       VECTOR.ASM):00056         
                      (       VECTOR.ASM):00057         
                      (       VECTOR.ASM):00058         
                      (       VECTOR.ASM):00059         ;
                      (       VECTOR.ASM):00060         ;  NEGD: 16-bit Negation Routine
                      (       VECTOR.ASM):00061         ;
CAA1 43               (       VECTOR.ASM):00062         NEGD    COMA                    ;16-bit complement
CAA2 53               (       VECTOR.ASM):00063                 COMB                    ;   .
CAA3 C30001           (       VECTOR.ASM):00064                 ADDD    #1              ;plus one
CAA6 39               (       VECTOR.ASM):00065                 RTS                     ;   .
                      (       VECTOR.ASM):00066         ;
                      (       VECTOR.ASM):00067         ;  INCRE: Calculate Incremental Values
                      (       VECTOR.ASM):00068         ;
                      (       VECTOR.ASM):00069         ;  Inputs:
                      (       VECTOR.ASM):00070         ;       D - 16-bit signed value
                      (       VECTOR.ASM):00071         ;       LENGTH - 16-bit divisor
                      (       VECTOR.ASM):00072         ;  Returns:
                      (       VECTOR.ASM):00073         ;       D - result of (D/LENGTH)
                      (       VECTOR.ASM):00074         ;
CAA7 3416             (       VECTOR.ASM):00075         INCRE   PSHS    A,B,X           ;save regs
CAA9 9E43             (       VECTOR.ASM):00076                 LDX     LENGTH          ;load length into X
CAAB ECE4             (       VECTOR.ASM):00077                 LDD     ,S              ;check sign (2022 n.b. original was 0,S)
CAAD 2A07             (       VECTOR.ASM):00078                 BPL     INCR10          ;   D is already positive
                      (       VECTOR.ASM):00079         ;
                      (       VECTOR.ASM):00080         ;  D is negative
                      (       VECTOR.ASM):00081         ;
CAAF 8DF0             (       VECTOR.ASM):00082                 BSR     NEGD            ;use absolute value
CAB1 8DBC             (       VECTOR.ASM):00083                 BSR     DIVIDE          ;use software division routine
CAB3 8DEC             (       VECTOR.ASM):00084                 BSR     NEGD            ;make negative again
CAB5 8C               (       VECTOR.ASM):00085                 FCB     SKIP2           ;   .
                      (       VECTOR.ASM):00086         ;
CAB6 8DB7             (       VECTOR.ASM):00087         INCR10  BSR     DIVIDE          ;use software division routine
CAB8 EDE4             (       VECTOR.ASM):00088         INCR90  STD     ,S              ;store return parameter (2022 n.b. original was 0,S)
CABA 3596             (       VECTOR.ASM):00089                 PULS    A,B,X,PC        ;return parm/exit
                      (       VECTOR.ASM):00090         
                      (       VECTOR.ASM):00091         
                      (       VECTOR.ASM):00092         
                      (       VECTOR.ASM):00093         ;
                      (       VECTOR.ASM):00094         ;  VECTOR: Simple Digital Differential Analyzer
                      (       VECTOR.ASM):00095         ;
CABC 7ECB92           (       VECTOR.ASM):00096         VECT00  JMP     VECT99          ;local jump
CABF 3476             (       VECTOR.ASM):00097         VECTOR  PSHS    A,B,X,Y,U       ;save regs
                      (       VECTOR.ASM):00098         ;
                      (       VECTOR.ASM):00099         ;  Set Fade Parameters
                      (       VECTOR.ASM):00100         ;
CAC1 0C2D             (       VECTOR.ASM):00101                 INC     VCTFAD          ;invisible line?
CAC3 27F7             (       VECTOR.ASM):00102                 BEQ     VECT00          ;   yes - don't draw anything
CAC5 962D             (       VECTOR.ASM):00103                 LDA     VCTFAD          ;set initial fade count
CAC7 972E             (       VECTOR.ASM):00104                 STA     FADCNT          ;   .
                      (       VECTOR.ASM):00105         ;
                      (       VECTOR.ASM):00106         ;  Calculate Length
                      (       VECTOR.ASM):00107         ;
CAC9 DC35             (       VECTOR.ASM):00108                 LDD     X1              ;dx = (x1-x0)
CACB 9331             (       VECTOR.ASM):00109                 SUBD    X0              ;   .
CACD DD3E             (       VECTOR.ASM):00110                 STD     DX+1            ;   .
CACF 2A02             (       VECTOR.ASM):00111                 BPL     VECT12          ;   already absolute value
CAD1 8DCE             (       VECTOR.ASM):00112                 BSR     NEGD            ;make absolute
CAD3 DD43             (       VECTOR.ASM):00113         VECT12  STD     LENGTH          ;assume this will be our length
                      (       VECTOR.ASM):00114         ;
CAD5 DC33             (       VECTOR.ASM):00115                 LDD     Y1              ;dy = (y1-y0)
CAD7 932F             (       VECTOR.ASM):00116                 SUBD    Y0              ;   .
CAD9 DD41             (       VECTOR.ASM):00117                 STD     DY+1            ;   .
CADB 2A02             (       VECTOR.ASM):00118                 BPL     VECT14          ;   already absolute value
CADD 8DC2             (       VECTOR.ASM):00119                 BSR     NEGD            ;make absolute
CADF 109343           (       VECTOR.ASM):00120         VECT14  CMPD    LENGTH          ;length = max (abs(dx),abs(dy))
CAE2 2D04             (       VECTOR.ASM):00121                 BLT     VECT20          ;   .
CAE4 DD43             (       VECTOR.ASM):00122                 STD     LENGTH          ;   .
CAE6 27D4             (       VECTOR.ASM):00123                 BEQ     VECT00          ;zero length means skip processing
                      (       VECTOR.ASM):00124         ;
                      (       VECTOR.ASM):00125         ;  Calculate X,Y Increments
                      (       VECTOR.ASM):00126         ;
CAE8 DC3E             (       VECTOR.ASM):00127         VECT20  LDD     DX+1            ;dx = (x1-x0)/length
CAEA 8DBB             (       VECTOR.ASM):00128                 BSR     INCRE           ;   .
CAEC DD3E             (       VECTOR.ASM):00129                 STD     DX+1            ;   .
CAEE 1F89             (       VECTOR.ASM):00130                 TFR     A,B             ;extend sign
CAF0 1D               (       VECTOR.ASM):00131                 SEX                     ;   .
CAF1 C601             (       VECTOR.ASM):00132                 LDB     #1              ;byte move delta
CAF3 973D             (       VECTOR.ASM):00133                 STA     DX              ;   .
CAF5 2A01             (       VECTOR.ASM):00134                 BPL     VECT22          ;   positive delta
CAF7 50               (       VECTOR.ASM):00135                 NEGB                    ;negative delta
CAF8 D745             (       VECTOR.ASM):00136         VECT22  STB     DELTAX          ;store byte move delta
                      (       VECTOR.ASM):00137         ;
CAFA DC41             (       VECTOR.ASM):00138                 LDD     DY+1            ;dy = (y1-y0)/length
CAFC 8DA9             (       VECTOR.ASM):00139                 BSR     INCRE           ;   .
CAFE DD41             (       VECTOR.ASM):00140                 STD     DY+1            ;   .
CB00 1F89             (       VECTOR.ASM):00141                 TFR     A,B             ;extend sign
CB02 1D               (       VECTOR.ASM):00142                 SEX                     ;   .
CB03 C620             (       VECTOR.ASM):00143                 LDB     #32             ;scan line delta
CB05 9740             (       VECTOR.ASM):00144                 STA     DY              ;   .
CB07 2A01             (       VECTOR.ASM):00145                 BPL     VECT24          ;   positive delta
CB09 50               (       VECTOR.ASM):00146                 NEGB                    ;negative delta
CB0A D746             (       VECTOR.ASM):00147         VECT24  STB     DELTAY          ;store scan line delta
                      (       VECTOR.ASM):00148         ;
                      (       VECTOR.ASM):00149         
                      (       VECTOR.ASM):00150         
                      (       VECTOR.ASM):00151         
                      (       VECTOR.ASM):00152         ;  Set (XX = X0 + 0.5)   (YY = Y0 + 0.5)
                      (       VECTOR.ASM):00153         ;
CB0C DC31             (       VECTOR.ASM):00154                 LDD     X0              ;set integer portion of XX,YY
CB0E DD37             (       VECTOR.ASM):00155                 STD     XX              ;   .
CB10 DC2F             (       VECTOR.ASM):00156                 LDD     Y0              ;   .
CB12 DD3A             (       VECTOR.ASM):00157                 STD     YY              ;   .
CB14 8680             (       VECTOR.ASM):00158                 LDA     #BIT7           ;set fraction portion of XX,YY
CB16 9739             (       VECTOR.ASM):00159                 STA     XX+2            ;   .
CB18 973C             (       VECTOR.ASM):00160                 STA     YY+2            ;   .
                      (       VECTOR.ASM):00161         ;
                      (       VECTOR.ASM):00162         ;  Calculate Initial Screen Coordinate
                      (       VECTOR.ASM):00163         ;
CB1A AE42             (       VECTOR.ASM):00164                 LDX     P.VDEND,U       ;store display ending, base addr
CB1C 9F49             (       VECTOR.ASM):00165                 STX     VDEND           ;   (frees U-reg)
CB1E AEC4             (       VECTOR.ASM):00166                 LDX     P.VDBAS,U       ;   .
CB20 9F47             (       VECTOR.ASM):00167                 STX     VDBAS           ;   .
                      (       VECTOR.ASM):00168         ;
CB22 DC3A             (       VECTOR.ASM):00169                 LDD     YY              ;load Y-coordinate
CB24 BDCA14           (       VECTOR.ASM):00170                 JSR     LSLD5           ;multiply by 32 to get scan line addr
CB27 308B             (       VECTOR.ASM):00171                 LEAX    D,X             ;add to base addr
                      (       VECTOR.ASM):00172         ;
CB29 DC37             (       VECTOR.ASM):00173                 LDD     XX              ;load X-coordinate
CB2B BDD3B6           (       VECTOR.ASM):00174                 JSR     ASRD3           ;divide by 8 to get byte addr
CB2E 308B             (       VECTOR.ASM):00175                 LEAX    D,X             ;we now have exact display byte addr
                      (       VECTOR.ASM):00176         ;
CB30 CECB96           (       VECTOR.ASM):00177                 LDU     #BITMSK         ;load bit mask
CB33 109E43           (       VECTOR.ASM):00178                 LDY     LENGTH          ;loop counter
                      (       VECTOR.ASM):00179         ;
                      (       VECTOR.ASM):00180         ;  Process Fade Function
                      (       VECTOR.ASM):00181         ;
CB36 0A2E             (       VECTOR.ASM):00182         VECT30  DEC     FADCNT          ;should we plot this dot?
CB38 2622             (       VECTOR.ASM):00183                 BNE     VECT40          ;   nope
CB3A 962D             (       VECTOR.ASM):00184                 LDA     VCTFAD          ;reset counter
CB3C 972E             (       VECTOR.ASM):00185                 STA     FADCNT          ;   .
                      (       VECTOR.ASM):00186         ;
                      (       VECTOR.ASM):00187         ;  Clip all offscreen points
                      (       VECTOR.ASM):00188         ;
CB3E 0D37             (       VECTOR.ASM):00189                 TST     XX              ;clip X-coordinate
CB40 261A             (       VECTOR.ASM):00190                 BNE     VECT40          ;   .
CB42 9C47             (       VECTOR.ASM):00191                 CMPX    VDBAS           ;clip Y-coordinate
CB44 2516             (       VECTOR.ASM):00192                 BLO     VECT40          ;   .
CB46 9C49             (       VECTOR.ASM):00193                 CMPX    VDEND           ;   .
CB48 2412             (       VECTOR.ASM):00194                 BHS     VECT40          ;   .
                      (       VECTOR.ASM):00195         ;
                      (       VECTOR.ASM):00196         ;  Plot Next Point
                      (       VECTOR.ASM):00197         ;
CB4A D638             (       VECTOR.ASM):00198                 LDB     XX+1            ;load low order byte
CB4C C407             (       VECTOR.ASM):00199                 ANDB    #7              ;MOD 8 to get bit position
CB4E A6C5             (       VECTOR.ASM):00200                 LDA     B,U             ;load positioned byte
CB50 0D2C             (       VECTOR.ASM):00201                 TST     VDGINV          ;normal or inverse mode
CB52 2704             (       VECTOR.ASM):00202                 BEQ     VECT32          ;   normal mode
CB54 43               (       VECTOR.ASM):00203                 COMA                    ;inverse mask
CB55 A484             (       VECTOR.ASM):00204                 ANDA    ,X              ;clear bit
CB57 8C               (       VECTOR.ASM):00205                 FCB     SKIP2           ;   .
CB58 AA84             (       VECTOR.ASM):00206         VECT32  ORA     ,X              ;mark bit
CB5A A784             (       VECTOR.ASM):00207                 STA     ,X              ;update display byte
                      (       VECTOR.ASM):00208         
                      (       VECTOR.ASM):00209         
                      (       VECTOR.ASM):00210         
                      (       VECTOR.ASM):00211         ;
                      (       VECTOR.ASM):00212         ;  Increment X,Y
                      (       VECTOR.ASM):00213         ;
CB5C 9638             (       VECTOR.ASM):00214         VECT40  LDA     XX+1            ;modify and save middle byte
CB5E 84F8             (       VECTOR.ASM):00215                 ANDA    #%11111000      ;   .
CB60 97C1             (       VECTOR.ASM):00216                 STA     T0              ;   .
                      (       VECTOR.ASM):00217         ;
CB62 DC38             (       VECTOR.ASM):00218                 LDD     XX+1            ;increment middle, low bytes
CB64 D33E             (       VECTOR.ASM):00219                 ADDD    DX+1            ;   .
CB66 DD38             (       VECTOR.ASM):00220                 STD     XX+1            ;   .
CB68 D637             (       VECTOR.ASM):00221                 LDB     XX              ;increment high byte
CB6A D93D             (       VECTOR.ASM):00222                 ADCB    DX              ;   .
CB6C D737             (       VECTOR.ASM):00223                 STB     XX              ;   .
                      (       VECTOR.ASM):00224         ;
CB6E 84F8             (       VECTOR.ASM):00225                 ANDA    #%11111000      ;time for byte move?
CB70 91C1             (       VECTOR.ASM):00226                 CMPA    T0              ;   .
CB72 2704             (       VECTOR.ASM):00227                 BEQ     VECT50          ;   nope
CB74 D645             (       VECTOR.ASM):00228                 LDB     DELTAX          ;move byte
CB76 3085             (       VECTOR.ASM):00229                 LEAX    B,X             ;   .
                      (       VECTOR.ASM):00230         ;
CB78 DC3B             (       VECTOR.ASM):00231         VECT50  LDD     YY+1            ;increment middle, low bytes
CB7A 97C1             (       VECTOR.ASM):00232                 STA     T0              ;save middle byte for later
CB7C D341             (       VECTOR.ASM):00233                 ADDD    DY+1            ;   .
CB7E DD3B             (       VECTOR.ASM):00234                 STD     YY+1            ;update middle, low bytes
CB80 D63A             (       VECTOR.ASM):00235                 LDB     YY              ;increment high byte
CB82 D940             (       VECTOR.ASM):00236                 ADCB    DY              ;   .
CB84 D73A             (       VECTOR.ASM):00237                 STB     YY              ;   .
                      (       VECTOR.ASM):00238         ;
CB86 91C1             (       VECTOR.ASM):00239                 CMPA    T0              ;time for scan line change?
CB88 2704             (       VECTOR.ASM):00240                 BEQ     VECT60          ;   nope
CB8A D646             (       VECTOR.ASM):00241                 LDB     DELTAY          ;change scan lines
CB8C 3085             (       VECTOR.ASM):00242                 LEAX    B,X             ;   .
                      (       VECTOR.ASM):00243         ;
                      (       VECTOR.ASM):00244         ;  Decrement Loop Counter
                      (       VECTOR.ASM):00245         ;
CB8E 313F             (       VECTOR.ASM):00246         VECT60  LEAY    -1,Y            ;decrement and loop
CB90 26A4             (       VECTOR.ASM):00247                 BNE     VECT30          ;   .
                      (       VECTOR.ASM):00248         ;
CB92 0A2D             (       VECTOR.ASM):00249         VECT99  DEC     VCTFAD          ;restore VCTFAD to original value
CB94 35F6             (       VECTOR.ASM):00250                 PULS    A,B,X,Y,U,PC    ;restore regs/exit
                      (       VECTOR.ASM):00251         ;
CB96 80               (       VECTOR.ASM):00252         BITMSK  FCB     BIT7
CB97 40               (       VECTOR.ASM):00253                 FCB     BIT6
CB98 20               (       VECTOR.ASM):00254                 FCB     BIT5
CB99 10               (       VECTOR.ASM):00255                 FCB     BIT4
CB9A 08               (       VECTOR.ASM):00256                 FCB     BIT3
CB9B 04               (       VECTOR.ASM):00257                 FCB     BIT2
CB9C 02               (       VECTOR.ASM):00258                 FCB     BIT1
CB9D 01               (       VECTOR.ASM):00259                 FCB     BIT0
                      (       VECTOR.ASM):00260         ;
                      (       VECTOR.ASM):00261         ;;;;;        END
                      (    DAGGORATH.ASM):00110                 INCLUDE PARSER.ASM       ;Line Parsing Routines
                      (       PARSER.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       PARSER.ASM):00002         ;  P A R S I N G   R O U T I N E S
                      (       PARSER.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       PARSER.ASM):00004         ;
                      (       PARSER.ASM):00005         ;  GETTOK: Return the next token in LINBUF
                      (       PARSER.ASM):00006         ;
                      (       PARSER.ASM):00007         ;  Inputs:
                      (       PARSER.ASM):00008         ;       LINPTR - where to start search
                      (       PARSER.ASM):00009         ;
                      (       PARSER.ASM):00010         ;  Returns:
                      (       PARSER.ASM):00011         ;       LINPTR - poniting past token
                      (       PARSER.ASM):00012         ;       TOKEN  - token terminated by a ($FF)
                      (       PARSER.ASM):00013         ;       N - condition code set if no token found
                      (       PARSER.ASM):00014         ;
CB9E 3452             (       PARSER.ASM):00015         GETTOK  PSHS    A,X,U           ;save some regs
CBA0 9E11             (       PARSER.ASM):00016                 LDX     LINPTR          ;load line buffer pointer
CBA2 CE0313           (       PARSER.ASM):00017                 LDU     #TOKEN          ;load token buffer base addr
                      (       PARSER.ASM):00018         ;
                      (       PARSER.ASM):00019         ;  Eat leading spaces
                      (       PARSER.ASM):00020         ;
CBA5 A680             (       PARSER.ASM):00021         GTOK10  LDA     ,X+             ;get next input char
CBA7 27FC             (       PARSER.ASM):00022                 BEQ     GTOK10          ;   eat leading spaces
CBA9 2002             (       PARSER.ASM):00023                 BRA     GTOK22          ;drop into loop
                      (       PARSER.ASM):00024         ;
                      (       PARSER.ASM):00025         ;  Copy non-spaces to TOKEN
                      (       PARSER.ASM):00026         ;
CBAB A680             (       PARSER.ASM):00027         GTOK20  LDA     ,X+             ;get input string char
CBAD 2F08             (       PARSER.ASM):00028         GTOK22  BLE     GTOK30          ;   ($FF) or space means we are done
CBAF A7C0             (       PARSER.ASM):00029                 STA     ,U+             ;otherwise copy char to token buffer
CBB1 11830333         (       PARSER.ASM):00030                 CMPU    #TOKEND         ;insure token buffer is not overrun
CBB5 25F4             (       PARSER.ASM):00031                 BLO     GTOK20          ;   .
                      (       PARSER.ASM):00032         ;
                      (       PARSER.ASM):00033         ;  Terminate token with ($FF)
                      (       PARSER.ASM):00034         ;
CBB7 86FF             (       PARSER.ASM):00035         GTOK30  LDA     #$FF            ;terminator
CBB9 A7C0             (       PARSER.ASM):00036                 STA     ,U+             ;   .
CBBB 9F11             (       PARSER.ASM):00037                 STX     LINPTR          ;update pointer
CBBD 7D0313           (       PARSER.ASM):00038                 TST     TOKEN           ;return N set if no token
CBC0 35D2             (       PARSER.ASM):00039                 PULS    A,X,U,PC        ;restore regs/go home
                      (       PARSER.ASM):00040         
                      (       PARSER.ASM):00041         
                      (       PARSER.ASM):00042         
                      (       PARSER.ASM):00043         ;
                      (       PARSER.ASM):00044         ;  PAROBJ: Parse an object from the line buffer
                      (       PARSER.ASM):00045         ;
                      (       PARSER.ASM):00046         ;  Inputs:
                      (       PARSER.ASM):00047         ;       LINBUF - line buffer
                      (       PARSER.ASM):00048         ;       LINPTR - line buffer pointer
                      (       PARSER.ASM):00049         ;  Returns:
                      (       PARSER.ASM):00050         ;       A - object class
                      (       PARSER.ASM):00051         ;       B - object type
                      (       PARSER.ASM):00052         ;       OBJCLS - object class
                      (       PARSER.ASM):00053         ;       OBJTYP - object type
                      (       PARSER.ASM):00054         ;       LINPTR - updated past object tokens
                      (       PARSER.ASM):00055         ;  Format:
                      (       PARSER.ASM):00056         ;       1) <generic>
                      (       PARSER.ASM):00057         ;       2) <adjective> <generic>
                      (       PARSER.ASM):00058         ;  Examples:
                      (       PARSER.ASM):00059         ;       1) "SCROLL"
                      (       PARSER.ASM):00060         ;       2) "GUIDANCE SCROLL"
                      (       PARSER.ASM):00061         ;
CBC2 0F90             (       PARSER.ASM):00062         PAROBJ  CLR     SPEFLG          ;assume generic form
CBC4 8ED9A1           (       PARSER.ASM):00063                 LDX     #GENTAB         ;generic token search
CBC7 8D2B             (       PARSER.ASM):00064                 BSR     PARSER          ;   .
CBC9 2B05             (       PARSER.ASM):00065                 BMI     POBJ10          ;   search failure
CBCB 271A             (       PARSER.ASM):00066                 BEQ     PARERR          ;   null tokens are illegal
CBCD DD8E             (       PARSER.ASM):00067                 STD     OBJTYP          ;store parms
CBCF 39               (       PARSER.ASM):00068                 RTS                     ;go home
                      (       PARSER.ASM):00069         ;
                      (       PARSER.ASM):00070         ;  Check for an adjective
                      (       PARSER.ASM):00071         ;
CBD0 0A90             (       PARSER.ASM):00072         POBJ10  DEC     SPEFLG          ;must be specific form
CBD2 8ED92A           (       PARSER.ASM):00073                 LDX     #ADJTAB         ;search for an adjective
CBD5 8D18             (       PARSER.ASM):00074                 BSR     PARSE0          ;   .
CBD7 2F0E             (       PARSER.ASM):00075                 BLE     PARERR          ;   null/illegal tokens not allowed
CBD9 DD8E             (       PARSER.ASM):00076                 STD     OBJTYP          ;save adjective parms
                      (       PARSER.ASM):00077         ;
CBDB 8ED9A1           (       PARSER.ASM):00078                 LDX     #GENTAB         ;search for generic tokens
CBDE 8D14             (       PARSER.ASM):00079                 BSR     PARSER          ;   .
CBE0 2F05             (       PARSER.ASM):00080                 BLE     PARERR          ;   null/illegal tokens
CBE2 D18F             (       PARSER.ASM):00081                 CMPB    OBJCLS          ;matching class?
CBE4 2601             (       PARSER.ASM):00082                 BNE     PARERR          ;   nope - loser
CBE6 39               (       PARSER.ASM):00083         POBJ99  RTS                     ;return as a winner!
                      (       PARSER.ASM):00084         
                      (       PARSER.ASM):00085         
                      (       PARSER.ASM):00086         
                      (       PARSER.ASM):00087         ;
                      (       PARSER.ASM):00088         ;  PARERR: Tell user the bad news
                      (       PARSER.ASM):00089         ;
CBE7 3262             (       PARSER.ASM):00090         PARERR  LEAS    2,S             ;remove return addr
CBE9 3F               (       PARSER.ASM):00091         CMDERR  SWI
CBEA 02               (       PARSER.ASM):00092                 FCB     OUTSTI
CBEB 17               (       PARSER.ASM):00093                 FCB     %00010111       ;???
CBEC 7B               (       PARSER.ASM):00094                 FCB     %01111011       ;???
CBED D0               (       PARSER.ASM):00095                 FCB     %11010000       ;???
                      (       PARSER.ASM):00096         ;
CBEE 39               (       PARSER.ASM):00097                 RTS
                      (       PARSER.ASM):00098         
                      (       PARSER.ASM):00099         
                      (       PARSER.ASM):00100         
                      (       PARSER.ASM):00101         ;
                      (       PARSER.ASM):00102         ;  PARSER: Get and Classify the next TOKEN
                      (       PARSER.ASM):00103         ;
                      (       PARSER.ASM):00104         ;  Inputs:
                      (       PARSER.ASM):00105         ;       X - pointer to token table
                      (       PARSER.ASM):00106         ;       LINPTR - Line Buffer Pointer
                      (       PARSER.ASM):00107         ;  Returns:
                      (       PARSER.ASM):00108         ;       A - Token type
                      (       PARSER.ASM):00109         ;       B - Token class
                      (       PARSER.ASM):00110         ;       TOKEN - TOken
                      (       PARSER.ASM):00111         ;       LINPTR - updated past last token
                      (       PARSER.ASM):00112         ;       N - condition code set if search failure
                      (       PARSER.ASM):00113         ;
CBEF 3476             (       PARSER.ASM):00114         PARSE0  PSHS    A,B,X,Y,U       ;secondary entry ponit
CBF1 4F               (       PARSER.ASM):00115                 CLRA                    ;   .
CBF2 2008             (       PARSER.ASM):00116                 BRA     PARS02          ;   .
                      (       PARSER.ASM):00117         ;
CBF4 3476             (       PARSER.ASM):00118         PARSER  PSHS    A,B,X,Y,U       ;save some regs
CBF6 4F               (       PARSER.ASM):00119                 CLRA                    ;assume next token is null
CBF7 5F               (       PARSER.ASM):00120                 CLRB                    ;   .
CBF8 8DA4             (       PARSER.ASM):00121                 BSR     GETTOK          ;get the next token
CBFA 2B39             (       PARSER.ASM):00122                 BMI     PARS92          ;   token is null
                      (       PARSER.ASM):00123         ;
CBFC 0F78             (       PARSER.ASM):00124         PARS02  CLR     PARFLG          ;reset "seen match" flag
CBFE 0F7B             (       PARSER.ASM):00125                 CLR     FULFLG          ;reset "full word" match flag
CC00 E680             (       PARSER.ASM):00126                 LDB     ,X+             ;load the number of tokens
CC02 D779             (       PARSER.ASM):00127                 STB     PARCNT          ;store as loop count
                      (       PARSER.ASM):00128         ;
                      (       PARSER.ASM):00129         ;  Compare TOKEN against next command
                      (       PARSER.ASM):00130         ;
CC04 CE0313           (       PARSER.ASM):00131         PARS10  LDU     #TOKEN          ;reset token byte pointer
CC07 3F               (       PARSER.ASM):00132                 SWI                     ;expand 5-bit string
CC08 05               (       PARSER.ASM):00133                 FCB     EXPAND          ;   .
CC09 108E0336         (       PARSER.ASM):00134                 LDY     #STRING+2       ;load command byte pointer
CC0D E6C0             (       PARSER.ASM):00135         PARS12  LDB     ,U+             ;load next token byte
CC0F 2B0E             (       PARSER.ASM):00136                 BMI     PARS20          ;   winner - end of token
CC11 E1A0             (       PARSER.ASM):00137                 CMPB    ,Y+             ;token match command?
CC13 2615             (       PARSER.ASM):00138                 BNE     PARS30          ;   nope - loser
CC15 6DA4             (       PARSER.ASM):00139                 TST     ,Y              ;reach end of command?
CC17 2AF4             (       PARSER.ASM):00140                 BPL     PARS12          ;   nope - continue comparisons
CC19 6DC4             (       PARSER.ASM):00141                 TST     ,U              ;end of token?
CC1B 2A0D             (       PARSER.ASM):00142                 BPL     PARS30          ;   nope - loser
CC1D 0A7B             (       PARSER.ASM):00143                 DEC     FULFLG          ;end token/command - full match
                      (       PARSER.ASM):00144         ;
                      (       PARSER.ASM):00145         ;  We have a Winner!
                      (       PARSER.ASM):00146         ;
CC1F 0D78             (       PARSER.ASM):00147         PARS20  TST     PARFLG          ;have we already seen a match?
CC21 2610             (       PARSER.ASM):00148                 BNE     PARS90          ;   can't have two matches!
CC23 0C78             (       PARSER.ASM):00149                 INC     PARFLG          ;flag successful command match
CC25 F60335           (       PARSER.ASM):00150                 LDB     STRING+1        ;load token class
CC28 EDE4             (       PARSER.ASM):00151                 STD     ,S              ;store return values (2022 n.b. original was 0,S)
                      (       PARSER.ASM):00152         
                      (       PARSER.ASM):00153         
                      (       PARSER.ASM):00154         
                      (       PARSER.ASM):00155         ;
                      (       PARSER.ASM):00156         ;  Advance to next command
                      (       PARSER.ASM):00157         ;
CC2A 4C               (       PARSER.ASM):00158         PARS30  INCA                    ;bump command counter
CC2B 0A79             (       PARSER.ASM):00159                 DEC     PARCNT          ;decrement loop counter
CC2D 26D5             (       PARSER.ASM):00160                 BNE     PARS10          ;   loop until table exhausted
                      (       PARSER.ASM):00161         ;
                      (       PARSER.ASM):00162         ;  Finish up and go home
                      (       PARSER.ASM):00163         ;
CC2F 0D78             (       PARSER.ASM):00164                 TST     PARFLG          ;did we match a command?
CC31 2604             (       PARSER.ASM):00165                 BNE     PARS99          ;   yes - go home a winner
CC33 DC03             (       PARSER.ASM):00166         PARS90  LDD     NEGONE          ;loser...
CC35 EDE4             (       PARSER.ASM):00167         PARS92  STD     ,S              ;   . (2022 n.b. original was 0,S)
CC37 35F6             (       PARSER.ASM):00168         PARS99  PULS    A,B,X,Y,U,PC    ;restore regs/go home
                      (       PARSER.ASM):00169         
                      (       PARSER.ASM):00170         
                      (       PARSER.ASM):00171         
                      (       PARSER.ASM):00172         ;
                      (       PARSER.ASM):00173         ;  PARHND:  Parse LEFT or RIGHT hand
                      (       PARSER.ASM):00174         ;
                      (       PARSER.ASM):00175         ;  Inputs:
                      (       PARSER.ASM):00176         ;       LINPTR
                      (       PARSER.ASM):00177         ;  Returns:
                      (       PARSER.ASM):00178         ;       A - Token Type
                      (       PARSER.ASM):00179         ;       B - Token Class
                      (       PARSER.ASM):00180         ;       U - #PLHAND or #PRHAND
                      (       PARSER.ASM):00181         ;       TOKEN - token
                      (       PARSER.ASM):00182         ;       LINPTR - updated past last token
                      (       PARSER.ASM):00183         ;       N - condition code set if parse fails
                      (       PARSER.ASM):00184         ;
CC39 8ED910           (       PARSER.ASM):00185         PARHND  LDX     #DIRTAB         ;directions
CC3C 8DB6             (       PARSER.ASM):00186                 BSR     PARSER          ;get the next token
CC3E 2FA7             (       PARSER.ASM):00187                 BLE     PARERR          ;   null/illegal token
CC40 CE021F           (       PARSER.ASM):00188                 LDU     #PRHAND         ;right hand
CC43 8101             (       PARSER.ASM):00189                 CMPA    #T.RT           ;   .
CC45 2707             (       PARSER.ASM):00190                 BEQ     PHND90          ;   .
CC47 CE021D           (       PARSER.ASM):00191                 LDU     #PLHAND         ;left hand
CC4A 8100             (       PARSER.ASM):00192                 CMPA    #T.LT           ;   .
CC4C 2699             (       PARSER.ASM):00193                 BNE     PARERR          ;   .
CC4E AEC4             (       PARSER.ASM):00194         PHND90  LDX     ,U              ;load OCB ptr
CC50 39               (       PARSER.ASM):00195                 RTS                     ;exit
                      (       PARSER.ASM):00196         ;
                      (       PARSER.ASM):00197         ;;;;;        END
                      (    DAGGORATH.ASM):00111                 INCLUDE DGNGEN.ASM       ;Dungeon Maze Generator
                      (       DGNGEN.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       DGNGEN.ASM):00002         ;  D U N G E O N   G E N E R A T O R
                      (       DGNGEN.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       DGNGEN.ASM):00004         ;
                      (       DGNGEN.ASM):00005         ;  DGNGEN: Subroutine to generate the dungeon.
                      (       DGNGEN.ASM):00006         ;
                      (       DGNGEN.ASM):00007         ; Resulting dungeon is created in a row/column matrix
                      (       DGNGEN.ASM):00008         ; based at DGNMAP.
                      (       DGNGEN.ASM):00009         ;
                      (       DGNGEN.ASM):00010         ; Architecture and contents of the dungeon are based
                      (       DGNGEN.ASM):00011         ; on predetermined "seeds" passed to the random number
                      (       DGNGEN.ASM):00012         ; generator in COMMON.TXT
                      (       DGNGEN.ASM):00013         ;
                      (       DGNGEN.ASM):00014         ; Dungeon matrix format is as follows:
                      (       DGNGEN.ASM):00015         ;
                      (       DGNGEN.ASM):00016         ;   B B B B B B B B
                      (       DGNGEN.ASM):00017         ;   --- --- --- ---
                      (       DGNGEN.ASM):00018         ;    !   !   !   !
                      (       DGNGEN.ASM):00019         ;    !   !   !   +--------- North Features
                      (       DGNGEN.ASM):00020         ;    !   !   !
                      (       DGNGEN.ASM):00021         ;    !   !   +------------- East Features
                      (       DGNGEN.ASM):00022         ;    !   !
                      (       DGNGEN.ASM):00023         ;    !   +----------------- South Features
                      (       DGNGEN.ASM):00024         ;    !
                      (       DGNGEN.ASM):00025         ;    +--------------------- West Features
                      (       DGNGEN.ASM):00026         ;
                      (       DGNGEN.ASM):00027         ; Bit Patterns denote:
                      (       DGNGEN.ASM):00028         ;       00 = Passage
                      (       DGNGEN.ASM):00029         ;       01 = Regular Door
                      (       DGNGEN.ASM):00030         ;       10 = Secret Door
                      (       DGNGEN.ASM):00031         ;       11 = Wall
                      (       DGNGEN.ASM):00032         ;
     0003             (       DGNGEN.ASM):00033         N.WALL  EQU     %00000011
     000C             (       DGNGEN.ASM):00034         E.WALL  EQU     %00001100
     0030             (       DGNGEN.ASM):00035         S.WALL  EQU     %00110000
     00C0             (       DGNGEN.ASM):00036         W.WALL  EQU     %11000000
                      (       DGNGEN.ASM):00037         ;
                      (       DGNGEN.ASM):00038         ;  FRIEND: Copy Neighbors to Storage
                      (       DGNGEN.ASM):00039         ;
                      (       DGNGEN.ASM):00040         ;  Inputs:
                      (       DGNGEN.ASM):00041         ;       A - row
                      (       DGNGEN.ASM):00042         ;       B - column
                      (       DGNGEN.ASM):00043         ;       U - addr of storage
                      (       DGNGEN.ASM):00044         ;  Returns:
                      (       DGNGEN.ASM):00045         ;       0,U  1,U  2,U   \
                      (       DGNGEN.ASM):00046         ;       3,U  4,U  5,U    >  3x3 matrix centered on ROW,COL
                      (       DGNGEN.ASM):00047         ;       6,U  7,U  8,U   /
                      (       DGNGEN.ASM):00048         ;
CC51 3456             (       DGNGEN.ASM):00049         FRIEND  PSHS    A,B,X,U         ;save regs
CC53 4A               (       DGNGEN.ASM):00050                 DECA                    ;upper row
CC54 8D08             (       DGNGEN.ASM):00051                 BSR     FSUB10          ;   .
CC56 4C               (       DGNGEN.ASM):00052                 INCA                    ;middle row
CC57 8D05             (       DGNGEN.ASM):00053                 BSR     FSUB10          ;   .
CC59 4C               (       DGNGEN.ASM):00054                 INCA                    ;lower row
CC5A 8D02             (       DGNGEN.ASM):00055                 BSR     FSUB10          ;   .
CC5C 35D6             (       DGNGEN.ASM):00056                 PULS    A,B,X,U,PC      ;restore regs/exit
                      (       DGNGEN.ASM):00057         ;
CC5E 3406             (       DGNGEN.ASM):00058         FSUB10  PSHS    A,B             ;save regs
CC60 5A               (       DGNGEN.ASM):00059                 DECB                    ;left column
CC61 8D05             (       DGNGEN.ASM):00060                 BSR     FSUB20          ;   .
CC63 5C               (       DGNGEN.ASM):00061                 INCB                    ;center column
CC64 8D02             (       DGNGEN.ASM):00062                 BSR     FSUB20          ;   .
CC66 5C               (       DGNGEN.ASM):00063                 INCB                    ;right column
CC67 8C               (       DGNGEN.ASM):00064                 FCB     SKIP2           ;drop into FSUB20 (hack!)...
                      (       DGNGEN.ASM):00065         ;
CC68 3406             (       DGNGEN.ASM):00066         FSUB20  PSHS    A,B             ;save position
CC6A 8D2A             (       DGNGEN.ASM):00067                 BSR     BORDER          ;are we out of bounds?
CC6C 2605             (       DGNGEN.ASM):00068                 BNE     FSUB22          ;   yes
CC6E 8D13             (       DGNGEN.ASM):00069                 BSR     MAP32           ;calculate map addr
CC70 A684             (       DGNGEN.ASM):00070                 LDA     ,X              ;load cell contents
CC72 8C               (       DGNGEN.ASM):00071                 FCB     SKIP2           ;   .
                      (       DGNGEN.ASM):00072         ;
CC73 86FF             (       DGNGEN.ASM):00073         FSUB22  LDA     #$FF            ;solid wall pattern
CC75 A7C0             (       DGNGEN.ASM):00074                 STA     ,U+             ;store into storage
CC77 3586             (       DGNGEN.ASM):00075                 PULS    A,B,PC          ;restore regs/exit
                      (       DGNGEN.ASM):00076         
                      (       DGNGEN.ASM):00077         
                      (       DGNGEN.ASM):00078         
                      (       DGNGEN.ASM):00079         
                      (       DGNGEN.ASM):00080         
                      (       DGNGEN.ASM):00081         
                      (       DGNGEN.ASM):00082         ;
                      (       DGNGEN.ASM):00083         ;  RNDCEL: Pick A Random Cell in DGNMAP
                      (       DGNGEN.ASM):00084         ;
                      (       DGNGEN.ASM):00085         ;  Returns:
                      (       DGNGEN.ASM):00086         ;       A - Row
                      (       DGNGEN.ASM):00087         ;       B - Column
                      (       DGNGEN.ASM):00088         ;       X - DGNMAP addr
                      (       DGNGEN.ASM):00089         ;  Calls:
                      (       DGNGEN.ASM):00090         ;       MAP32
                      (       DGNGEN.ASM):00091         ;
CC79 3F               (       DGNGEN.ASM):00092         RNDCEL  SWI                     ;a pair of random numbers
CC7A 07               (       DGNGEN.ASM):00093                 FCB     RANDOM          ;
CC7B 841F             (       DGNGEN.ASM):00094                 ANDA    #31             ;MOD 32
CC7D 1F89             (       DGNGEN.ASM):00095                 TFR     A,B             ;   .
CC7F 3F               (       DGNGEN.ASM):00096                 SWI                     ;   (then fall into MAP32)
CC80 07               (       DGNGEN.ASM):00097                 FCB     RANDOM          ;   .
CC81 841F             (       DGNGEN.ASM):00098                 ANDA    #31             ;MOD 32
                      (       DGNGEN.ASM):00099         ;
                      (       DGNGEN.ASM):00100         ;  MAP32: Calculate Map Address Based on ROW/COL
                      (       DGNGEN.ASM):00101         ;
                      (       DGNGEN.ASM):00102         ;  Inputs:
                      (       DGNGEN.ASM):00103         ;       A - row
                      (       DGNGEN.ASM):00104         ;       B - col
                      (       DGNGEN.ASM):00105         ;  Returns:
                      (       DGNGEN.ASM):00106         ;       X - DGNMAP addr
                      (       DGNGEN.ASM):00107         ;
CC83 3406             (       DGNGEN.ASM):00108         MAP32   PSHS    A,B             ;save regs
CC85 841F             (       DGNGEN.ASM):00109                 ANDA    #31             ;insure row/col are MOD 32
CC87 C41F             (       DGNGEN.ASM):00110                 ANDB    #31             ;   .
CC89 1F01             (       DGNGEN.ASM):00111                 TFR     D,X             ;make a copy of row/col
CC8B C620             (       DGNGEN.ASM):00112                 LDB     #32             ;offset = row*32 + col
CC8D 3D               (       DGNGEN.ASM):00113                 MUL                     ;   .
CC8E C305F4           (       DGNGEN.ASM):00114                 ADDD    #MAZLND         ;add base addr
CC91 1E01             (       DGNGEN.ASM):00115                 EXG     D,X             ;D<--row/col, X<--DGNMAP+(row*32)
CC93 3A               (       DGNGEN.ASM):00116                 ABX                     ;add col to addr
CC94 3586             (       DGNGEN.ASM):00117                 PULS    A,B,PC          ;restore regs/exit
                      (       DGNGEN.ASM):00118         
                      (       DGNGEN.ASM):00119         
                      (       DGNGEN.ASM):00120         
                      (       DGNGEN.ASM):00121         ;
                      (       DGNGEN.ASM):00122         ;  BORDER: Are we out-of-bounds?
                      (       DGNGEN.ASM):00123         ;
                      (       DGNGEN.ASM):00124         ;  Inputs:
                      (       DGNGEN.ASM):00125         ;       A - row
                      (       DGNGEN.ASM):00126         ;       B - col
                      (       DGNGEN.ASM):00127         ;  Returns:
                      (       DGNGEN.ASM):00128         ;       Z - Condition code set if position is legal
                      (       DGNGEN.ASM):00129         ;
CC96 3406             (       DGNGEN.ASM):00130         BORDER  PSHS    A,B             ;---start of procedure BORDER
CC98 841F             (       DGNGEN.ASM):00131                 ANDA    #31             ;MOD 32
CC9A A1E4             (       DGNGEN.ASM):00132                 CMPA    ,S              ;still same after MOD? (2022 n.b. original was 0,S)
CC9C 2604             (       DGNGEN.ASM):00133                 BNE     BORD99          ;   nope
CC9E C41F             (       DGNGEN.ASM):00134                 ANDB    #31             ;MOD 32
CCA0 E161             (       DGNGEN.ASM):00135                 CMPB    1,S             ;still same?
CCA2 3586             (       DGNGEN.ASM):00136         BORD99  PULS    A,B,PC          ;--- end of procedure BORDER
                      (       DGNGEN.ASM):00137         
                      (       DGNGEN.ASM):00138         
                      (       DGNGEN.ASM):00139         
                      (       DGNGEN.ASM):00140         ;
                      (       DGNGEN.ASM):00141         ;  DGNGEN: Create the Dungeon Maze
                      (       DGNGEN.ASM):00142         ;
     CCA4             (       DGNGEN.ASM):00143         DGNGEN  EQU     *               ;in the beginning...
                      (       DGNGEN.ASM):00144         ;
                      (       DGNGEN.ASM):00145         ;  Phase I: Create Maze
                      (       DGNGEN.ASM):00146         ;
CCA4 8E05F4           (       DGNGEN.ASM):00147                 LDX     #MAZLND         ;all of "maze" to $FF
CCA7 CE09F4           (       DGNGEN.ASM):00148                 LDU     #MAZEND         ;   .
CCAA 3F               (       DGNGEN.ASM):00149                 SWI                     ;   .
CCAB 12               (       DGNGEN.ASM):00150                 FCB     NEGRAM          ;   .
                      (       DGNGEN.ASM):00151         ;
                      (       DGNGEN.ASM):00152         ; Initialize RANDOM number generator
CCAC 8ECDA7           (       DGNGEN.ASM):00153                 LDX     #LVLTAB         ;point to random seed table
CCAF D681             (       DGNGEN.ASM):00154                 LDB     LEVEL           ;load dungeon level #
CCB1 3A               (       DGNGEN.ASM):00155                 ABX                     ;point to 3-byte seed
CCB2 EC81             (       DGNGEN.ASM):00156                 LDD     ,X++            ;first two bytes
CCB4 DD6B             (       DGNGEN.ASM):00157                 STD     SEED            ;   .
CCB6 A684             (       DGNGEN.ASM):00158                 LDA     ,X              ;third byte
CCB8 976D             (       DGNGEN.ASM):00159                 STA     SEED+2          ;   .
                      (       DGNGEN.ASM):00160         ;
CCBA 108E01F4         (       DGNGEN.ASM):00161                 LDY     #500            ;number of cells to create
CCBE BDCC79           (       DGNGEN.ASM):00162                 JSR     RNDCEL          ;pick a random starting cell
CCC1 DD7C             (       DGNGEN.ASM):00163                 STD     DROW            ;   .
                      (       DGNGEN.ASM):00164         
                      (       DGNGEN.ASM):00165         
                      (       DGNGEN.ASM):00166         
                      (       DGNGEN.ASM):00167         ;
                      (       DGNGEN.ASM):00168         ;  Select a Random Direction/Distance
                      (       DGNGEN.ASM):00169         ;
CCC3 3F               (       DGNGEN.ASM):00170         DGEN10  SWI                     ;random direction
CCC4 07               (       DGNGEN.ASM):00171                 FCB     RANDOM          ;   .
CCC5 8403             (       DGNGEN.ASM):00172                 ANDA    #3              ;MOD 4
CCC7 978A             (       DGNGEN.ASM):00173                 STA     DIR             ;   .
CCC9 3F               (       DGNGEN.ASM):00174                 SWI                     ;random distance
CCCA 07               (       DGNGEN.ASM):00175                 FCB     RANDOM          ;   .
CCCB 8407             (       DGNGEN.ASM):00176                 ANDA    #7              ;MOD 8
CCCD 4C               (       DGNGEN.ASM):00177                 INCA                    ;range (1:8)
CCCE 977E             (       DGNGEN.ASM):00178                 STA     DST             ;   .
CCD0 2008             (       DGNGEN.ASM):00179                 BRA     DGEN30          ;   .
                      (       DGNGEN.ASM):00180         ;
                      (       DGNGEN.ASM):00181         ;  Perform Distance Check
CCD2 DC88             (       DGNGEN.ASM):00182         DGEN20  LDD     ROW             ;update position
CCD4 DD7C             (       DGNGEN.ASM):00183                 STD     DROW            ;   .
CCD6 0A7E             (       DGNGEN.ASM):00184                 DEC     DST             ;decrement distance counter
CCD8 27E9             (       DGNGEN.ASM):00185                 BEQ     DGEN10          ;   done - select a new dir/dst
                      (       DGNGEN.ASM):00186         ;
                      (       DGNGEN.ASM):00187         ;  Take a "tentative" step
                      (       DGNGEN.ASM):00188         ;
CCDA DC7C             (       DGNGEN.ASM):00189         DGEN30  LDD     DROW            ;parms to STEP
CCDC BDD123           (       DGNGEN.ASM):00190                 JSR     STEP            ;take a step
CCDF 8DB5             (       DGNGEN.ASM):00191                 BSR     BORDER          ;out-of-bounds?
CCE1 26E0             (       DGNGEN.ASM):00192                 BNE     DGEN10          ;   yes!
                      (       DGNGEN.ASM):00193         
                      (       DGNGEN.ASM):00194         
                      (       DGNGEN.ASM):00195         
                      (       DGNGEN.ASM):00196         ;
                      (       DGNGEN.ASM):00197         ;  Have we been here before?
                      (       DGNGEN.ASM):00198         ;
CCE3 DD88             (       DGNGEN.ASM):00199                 STD     ROW             ;store position for later
CCE5 6D84             (       DGNGEN.ASM):00200                 TST     ,X              ;have we been here before?
CCE7 27E9             (       DGNGEN.ASM):00201                 BEQ     DGEN20          ;   non-virgin/loop
                      (       DGNGEN.ASM):00202         ;
                      (       DGNGEN.ASM):00203         ;  Check for "cleared" corner patterns
                      (       DGNGEN.ASM):00204         ;
CCE9 CE09F4           (       DGNGEN.ASM):00205                 LDU     #NEIBOR         ;addr of "neighbors" storage
CCEC BDCC51           (       DGNGEN.ASM):00206                 JSR     FRIEND          ;copy our "friends"
                      (       DGNGEN.ASM):00207         ;
CCEF A643             (       DGNGEN.ASM):00208                 LDA     3,U             ;upper left corner
CCF1 ABC4             (       DGNGEN.ASM):00209                 ADDA    ,U              ;   . (2022 n.b. original was 0,U)
CCF3 AB41             (       DGNGEN.ASM):00210                 ADDA    1,U             ;   .
CCF5 27CC             (       DGNGEN.ASM):00211                 BEQ     DGEN10          ;   loser
                      (       DGNGEN.ASM):00212         ;
CCF7 A641             (       DGNGEN.ASM):00213                 LDA     1,U             ;upper right corner
CCF9 AB42             (       DGNGEN.ASM):00214                 ADDA    2,U             ;   .
CCFB AB45             (       DGNGEN.ASM):00215                 ADDA    5,U             ;   .
CCFD 27C4             (       DGNGEN.ASM):00216                 BEQ     DGEN10          ;   loser
                      (       DGNGEN.ASM):00217         ;
CCFF A645             (       DGNGEN.ASM):00218                 LDA     5,U             ;lower right corner
CD01 AB48             (       DGNGEN.ASM):00219                 ADDA    8,U             ;   .
CD03 AB47             (       DGNGEN.ASM):00220                 ADDA    7,U             ;   .
CD05 27BC             (       DGNGEN.ASM):00221                 BEQ     DGEN10          ;   loser
                      (       DGNGEN.ASM):00222         ;
CD07 A647             (       DGNGEN.ASM):00223                 LDA     7,U             ;lower left corner
CD09 AB46             (       DGNGEN.ASM):00224                 ADDA    6,U             ;   .
CD0B AB43             (       DGNGEN.ASM):00225                 ADDA    3,U             ;   .
CD0D 27B4             (       DGNGEN.ASM):00226                 BEQ     DGEN10          ;   loser
                      (       DGNGEN.ASM):00227         ;
                      (       DGNGEN.ASM):00228         ;  Count new cells and loop
                      (       DGNGEN.ASM):00229         ;
CD0F 6F84             (       DGNGEN.ASM):00230                 CLR     ,X              ;mark a new cell
CD11 313F             (       DGNGEN.ASM):00231                 LEAY    -1,Y            ;decrement cell count
CD13 26BD             (       DGNGEN.ASM):00232                 BNE     DGEN20          ;loop until done
                      (       DGNGEN.ASM):00233         
                      (       DGNGEN.ASM):00234         
                      (       DGNGEN.ASM):00235         
                      (       DGNGEN.ASM):00236         ;
                      (       DGNGEN.ASM):00237         ;  Phase II: Create Walls
                      (       DGNGEN.ASM):00238         ;
CD15 0F7C             (       DGNGEN.ASM):00239                 CLR     DROW            ;reset indices
CD17 0F7D             (       DGNGEN.ASM):00240                 CLR     DCOL            ;   .
                      (       DGNGEN.ASM):00241         ;
CD19 DC7C             (       DGNGEN.ASM):00242         DGEN50  LDD     DROW            ;calculate cell addr
CD1B BDCC83           (       DGNGEN.ASM):00243                 JSR     MAP32           ;   .
CD1E A684             (       DGNGEN.ASM):00244                 LDA     ,X              ;load cell contents
CD20 4C               (       DGNGEN.ASM):00245                 INCA                    ;check for completely walled cell
CD21 2726             (       DGNGEN.ASM):00246                 BEQ     DGEN70          ;   skip processing
                      (       DGNGEN.ASM):00247         ;
                      (       DGNGEN.ASM):00248         ;  Determine Neighbors
                      (       DGNGEN.ASM):00249         ;
CD23 DC7C             (       DGNGEN.ASM):00250                 LDD     DROW            ;load position
CD25 CE09F4           (       DGNGEN.ASM):00251                 LDU     #NEIBOR         ;where to put neighbors
CD28 BDCC51           (       DGNGEN.ASM):00252                 JSR     FRIEND          ;find our friends
CD2B A684             (       DGNGEN.ASM):00253                 LDA     ,X              ;load cell contents
CD2D C6FF             (       DGNGEN.ASM):00254                 LDB     #$FF            ;solid wall pattern
                      (       DGNGEN.ASM):00255         ;
                      (       DGNGEN.ASM):00256         ;  Create Walls
                      (       DGNGEN.ASM):00257         ;
CD2F E141             (       DGNGEN.ASM):00258                 CMPB    1,U             ;wall to the north?
CD31 2602             (       DGNGEN.ASM):00259                 BNE     DGEN60          ;   nope
CD33 8A03             (       DGNGEN.ASM):00260                 ORA     #N.WALL         ;create northern wall
                      (       DGNGEN.ASM):00261         ;
CD35 E143             (       DGNGEN.ASM):00262         DGEN60  CMPB    3,U             ;wall to the west?
CD37 2602             (       DGNGEN.ASM):00263                 BNE     DGEN62          ;   nope
CD39 8AC0             (       DGNGEN.ASM):00264                 ORA     #W.WALL         ;create western wall
                      (       DGNGEN.ASM):00265         ;
CD3B E145             (       DGNGEN.ASM):00266         DGEN62  CMPB    5,U             ;wall to the east?
CD3D 2602             (       DGNGEN.ASM):00267                 BNE     DGEN64          ;   nope
CD3F 8A0C             (       DGNGEN.ASM):00268                 ORA     #E.WALL         ;create eastern wall
                      (       DGNGEN.ASM):00269         ;
CD41 E147             (       DGNGEN.ASM):00270         DGEN64  CMPB    7,U             ;wall to the south?
CD43 2602             (       DGNGEN.ASM):00271                 BNE     DGEN66          ;   nope
CD45 8A30             (       DGNGEN.ASM):00272                 ORA     #S.WALL         ;create southern wall
                      (       DGNGEN.ASM):00273         ;
CD47 A784             (       DGNGEN.ASM):00274         DGEN66  STA     ,X              ;store "walled" cell
                      (       DGNGEN.ASM):00275         
                      (       DGNGEN.ASM):00276         
                      (       DGNGEN.ASM):00277         
                      (       DGNGEN.ASM):00278         ;
                      (       DGNGEN.ASM):00279         ;  Bump Indexes and Loop
                      (       DGNGEN.ASM):00280         ;
CD49 C620             (       DGNGEN.ASM):00281         DGEN70  LDB     #32             ;rollover value
CD4B 0C7D             (       DGNGEN.ASM):00282                 INC     DCOL            ;bump column counter
CD4D D17D             (       DGNGEN.ASM):00283                 CMPB    DCOL            ;   .
CD4F 26C8             (       DGNGEN.ASM):00284                 BNE     DGEN50          ;   loop
CD51 0F7D             (       DGNGEN.ASM):00285                 CLR     DCOL            ;reset column counter
                      (       DGNGEN.ASM):00286         ;
CD53 0C7C             (       DGNGEN.ASM):00287                 INC     DROW            ;bump row counter
CD55 D17C             (       DGNGEN.ASM):00288                 CMPB    DROW            ;   .
CD57 26C0             (       DGNGEN.ASM):00289                 BNE     DGEN50          ;   loop
                      (       DGNGEN.ASM):00290         ;
                      (       DGNGEN.ASM):00291         ;  Create Doors/Secret Doors
                      (       DGNGEN.ASM):00292         ;
CD59 C646             (       DGNGEN.ASM):00293                 LDB     #70             ;number of regular doors
CD5B CECDB2           (       DGNGEN.ASM):00294                 LDU     #DORTAB         ;   .
CD5E 8D15             (       DGNGEN.ASM):00295         DGEN80  BSR     MAKDOR          ;put in a door
CD60 5A               (       DGNGEN.ASM):00296                 DECB                    ;decrement count
CD61 26FB             (       DGNGEN.ASM):00297                 BNE     DGEN80          ;   .
                      (       DGNGEN.ASM):00298         ;
CD63 C62D             (       DGNGEN.ASM):00299                 LDB     #45             ;number of secret doors
CD65 CECDB6           (       DGNGEN.ASM):00300                 LDU     #SDRTAB         ;   .
CD68 8D0B             (       DGNGEN.ASM):00301         DGEN82  BSR     MAKDOR          ;put in a secret door
CD6A 5A               (       DGNGEN.ASM):00302                 DECB                    ;decrement count
CD6B 26FB             (       DGNGEN.ASM):00303                 BNE     DGEN82          ;   .
                      (       DGNGEN.ASM):00304         ;
                      (       DGNGEN.ASM):00305         ;  Spin the random number generator
                      (       DGNGEN.ASM):00306         ;
CD6D D697             (       DGNGEN.ASM):00307                 LDB     SECOND          ;use the jiffy counter
CD6F 3F               (       DGNGEN.ASM):00308         DGEN90  SWI                     ;another random number
CD70 07               (       DGNGEN.ASM):00309                 FCB     RANDOM          ;   .
CD71 5A               (       DGNGEN.ASM):00310                 DECB                    ;decrement counter
CD72 26FB             (       DGNGEN.ASM):00311                 BNE     DGEN90          ;   .
                      (       DGNGEN.ASM):00312         ;
CD74 39               (       DGNGEN.ASM):00313                 RTS                     ;bye
                      (       DGNGEN.ASM):00314         
                      (       DGNGEN.ASM):00315         
                      (       DGNGEN.ASM):00316         
                      (       DGNGEN.ASM):00317         ;
                      (       DGNGEN.ASM):00318         ;  MAKDOR: Create Doors
                      (       DGNGEN.ASM):00319         ;
                      (       DGNGEN.ASM):00320         ;  Inputs:
                      (       DGNGEN.ASM):00321         ;       A - door pattern
                      (       DGNGEN.ASM):00322         ;       U - table of doors
                      (       DGNGEN.ASM):00323         ;
CD75 3476             (       DGNGEN.ASM):00324         MAKDOR  PSHS    A,B,X,Y,U       ;save regs
CD77 108ECDAE         (       DGNGEN.ASM):00325                 LDY     #MSKTAB         ;table of bit masks
                      (       DGNGEN.ASM):00326         ;
                      (       DGNGEN.ASM):00327         ;  Where can we put a door in?
                      (       DGNGEN.ASM):00328         ;
CD7B BDCC79           (       DGNGEN.ASM):00329         MDOR10  JSR     RNDCEL          ;get a random cell
CD7E DD88             (       DGNGEN.ASM):00330                 STD     ROW             ;store for later use
CD80 E684             (       DGNGEN.ASM):00331                 LDB     ,X              ;can we put a door here?
CD82 C1FF             (       DGNGEN.ASM):00332                 CMPB    #$FF            ;   .
CD84 27F5             (       DGNGEN.ASM):00333                 BEQ     MDOR10          ;   nope
                      (       DGNGEN.ASM):00334         ;
CD86 3F               (       DGNGEN.ASM):00335                 SWI                     ;random (0:3)
CD87 07               (       DGNGEN.ASM):00336                 FCB     RANDOM          ;   .
CD88 8403             (       DGNGEN.ASM):00337                 ANDA    #3              ;   .
CD8A 978A             (       DGNGEN.ASM):00338                 STA     DIR             ;this will be our direction
CD8C E5A6             (       DGNGEN.ASM):00339                 BITB    A,Y             ;can we put a door in?
CD8E 26EB             (       DGNGEN.ASM):00340                 BNE     MDOR10          ;   nope
                      (       DGNGEN.ASM):00341         ;
                      (       DGNGEN.ASM):00342         ;  Found a suitable place for a door...
                      (       DGNGEN.ASM):00343         ;
CD90 EAC6             (       DGNGEN.ASM):00344                 ORB     A,U             ;put the door in
CD92 E784             (       DGNGEN.ASM):00345                 STB     ,X              ;   .
                      (       DGNGEN.ASM):00346         ;
CD94 DC88             (       DGNGEN.ASM):00347                 LDD     ROW             ;calculate coordinates
CD96 BDD123           (       DGNGEN.ASM):00348                 JSR     STEP            ;remember to fix adjoining cell
CD99 D68A             (       DGNGEN.ASM):00349                 LDB     DIR             ;load original direction
CD9B CB02             (       DGNGEN.ASM):00350                 ADDB    #2              ;opposite wall
CD9D C403             (       DGNGEN.ASM):00351                 ANDB    #3              ;MOD 4
CD9F A684             (       DGNGEN.ASM):00352                 LDA     ,X              ;load adjoining cell features
CDA1 AAC5             (       DGNGEN.ASM):00353                 ORA     B,U             ;mark new door
CDA3 A784             (       DGNGEN.ASM):00354                 STA     ,X              ;update cell
                      (       DGNGEN.ASM):00355         ;
CDA5 35F6             (       DGNGEN.ASM):00356                 PULS    A,B,X,Y,U,PC    ;restore regs/exit
                      (       DGNGEN.ASM):00357         
                      (       DGNGEN.ASM):00358         
                      (       DGNGEN.ASM):00359         
                      (       DGNGEN.ASM):00360         ;
                      (       DGNGEN.ASM):00361         ;  Dungeon Generator Seeds
                      (       DGNGEN.ASM):00362         ;
     CDA7             (       DGNGEN.ASM):00363         LVLTAB  EQU     *
                      (       DGNGEN.ASM):00364         ;DEBUG         FCB     $25             ;level-0
CDA7 73               (       DGNGEN.ASM):00365                 FCB     $73             ;level-1
CDA8 C7               (       DGNGEN.ASM):00366                 FCB     $C7             ;level-2
CDA9 5D               (       DGNGEN.ASM):00367                 FCB     $5D             ;level-3
CDAA 97               (       DGNGEN.ASM):00368                 FCB     $97             ;level-4
CDAB F3               (       DGNGEN.ASM):00369                 FCB     $F3             ;level-5
CDAC 13               (       DGNGEN.ASM):00370                 FCB     $13             ;   .
CDAD 87               (       DGNGEN.ASM):00371                 FCB     $87             ;   .
                      (       DGNGEN.ASM):00372         ;
                      (       DGNGEN.ASM):00373         ;  Bit Mask Table
                      (       DGNGEN.ASM):00374         ;
CDAE 03               (       DGNGEN.ASM):00375         MSKTAB  FCB     %00000011       ;north
CDAF 0C               (       DGNGEN.ASM):00376                 FCB     %00001100       ;east
CDB0 30               (       DGNGEN.ASM):00377                 FCB     %00110000       ;south
CDB1 C0               (       DGNGEN.ASM):00378                 FCB     %11000000       ;west
                      (       DGNGEN.ASM):00379         ;
                      (       DGNGEN.ASM):00380         ;  Regular Door Table
                      (       DGNGEN.ASM):00381         ;
CDB2 01               (       DGNGEN.ASM):00382         DORTAB  FCB     HF.DOR          ;north
CDB3 04               (       DGNGEN.ASM):00383                 FCB     HF.DOR*4        ;east
CDB4 10               (       DGNGEN.ASM):00384                 FCB     HF.DOR*16       ;south
CDB5 40               (       DGNGEN.ASM):00385                 FCB     HF.DOR*64       ;west
                      (       DGNGEN.ASM):00386         ;
                      (       DGNGEN.ASM):00387         ;  Secret Door Table
                      (       DGNGEN.ASM):00388         ;
CDB6 02               (       DGNGEN.ASM):00389         SDRTAB  FCB     HF.SDR          ;north
CDB7 08               (       DGNGEN.ASM):00390                 FCB     HF.SDR*4        ;east
CDB8 20               (       DGNGEN.ASM):00391                 FCB     HF.SDR*16       ;south
CDB9 80               (       DGNGEN.ASM):00392                 FCB     HF.SDR*64       ;west
                      (       DGNGEN.ASM):00393         ;
                      (       DGNGEN.ASM):00394         ;;;;;        END
                      (    DAGGORATH.ASM):00112                 INCLUDE MAPPER.ASM       ;Map Display Generator
                      (       MAPPER.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       MAPPER.ASM):00002         ;  M A P   D I S P L A Y   G E N E R A T O R
                      (       MAPPER.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       MAPPER.ASM):00004         ;
                      (       MAPPER.ASM):00005                 NAM     MAPPER
                      (       MAPPER.ASM):00006         ;     LIBRY  CD
                      (       MAPPER.ASM):00007         ;        XDEF    MAPPER
                      (       MAPPER.ASM):00008         ;
                      (       MAPPER.ASM):00009         ;        XREF    FNDOBJ,MAP32
                      (       MAPPER.ASM):00010         ;        PSCT
                      (       MAPPER.ASM):00011         ;
                      (       MAPPER.ASM):00012         ;  MAPPER: Generate a Top-View Display of the Dungeon
                      (       MAPPER.ASM):00013         ;
                      (       MAPPER.ASM):00014         ;  This routines creates a top-view map of the current dungeon
                      (       MAPPER.ASM):00015         ;  level in the alternate screen (FLOP).
                      (       MAPPER.ASM):00016         ;
                      (       MAPPER.ASM):00017         ;  Legend:
                      (       MAPPER.ASM):00018         ;       Black - Clear Path
                      (       MAPPER.ASM):00019         ;       Blue  - Door
                      (       MAPPER.ASM):00020         ;       Red   - Secret Door
                      (       MAPPER.ASM):00021         ;       White - Wall
                      (       MAPPER.ASM):00022         ;
CDBA DE0B             (       MAPPER.ASM):00023         MAPPER  LDU     FLOP            ;use alternate VDB
CDBC CC1F1F           (       MAPPER.ASM):00024                 LDD     #$1F1F          ;set initial row,col
CDBF DD7C             (       MAPPER.ASM):00025                 STD     DROW            ;   .
                      (       MAPPER.ASM):00026         ;
CDC1 DC7C             (       MAPPER.ASM):00027         MAPP10  LDD     DROW            ;load current position
CDC3 8D54             (       MAPPER.ASM):00028                 BSR     DSP32           ;calculate display cell addr
CDC5 BDCC83           (       MAPPER.ASM):00029                 JSR     MAP32           ;calculate cell addr
CDC8 5F               (       MAPPER.ASM):00030                 CLRB                    ;assume empty cell (solid black)
CDC9 A684             (       MAPPER.ASM):00031                 LDA     ,X              ;walled in cell?
CDCB 4C               (       MAPPER.ASM):00032                 INCA                    ;   .
CDCC 2601             (       MAPPER.ASM):00033                 BNE     MAPP20          ;   nope
CDCE 5A               (       MAPPER.ASM):00034                 DECB                    ;unoccupiable cell (solid white)
                      (       MAPPER.ASM):00035         ;
                      (       MAPPER.ASM):00036         ;  Store Empty/Full Cell Pattern into Display
                      (       MAPPER.ASM):00037         ;
CDCF 8606             (       MAPPER.ASM):00038         MAPP20  LDA     #6              ;loop count
CDD1 E7A4             (       MAPPER.ASM):00039         MAPP22  STB     ,Y              ;store byte (2022 n.b. original was 0,Y)
CDD3 31A820           (       MAPPER.ASM):00040                 LEAY    32,Y            ;advance to next scan line
CDD6 4A               (       MAPPER.ASM):00041                 DECA                    ;decrement and loop
CDD7 26F8             (       MAPPER.ASM):00042                 BNE     MAPP22          ;   .
                      (       MAPPER.ASM):00043         ;
                      (       MAPPER.ASM):00044         ;  Bump Counters
                      (       MAPPER.ASM):00045         ;
CDD9 0A7D             (       MAPPER.ASM):00046                 DEC     DCOL            ;inner loop
CDDB 2AE4             (       MAPPER.ASM):00047                 BPL     MAPP10          ;   .
                      (       MAPPER.ASM):00048         ;
CDDD 861F             (       MAPPER.ASM):00049                 LDA     #31             ;outer loop
CDDF 977D             (       MAPPER.ASM):00050                 STA     DCOL            ;   (reset inner loop counter)
CDE1 0A7C             (       MAPPER.ASM):00051                 DEC     DROW            ;   .
CDE3 2ADC             (       MAPPER.ASM):00052                 BPL     MAPP10  ;   .
                      (       MAPPER.ASM):00053         
                      (       MAPPER.ASM):00054         
                      (       MAPPER.ASM):00055         
                      (       MAPPER.ASM):00056         ;
                      (       MAPPER.ASM):00057         ;  Display Other Features?
                      (       MAPPER.ASM):00058         ;
CDE5 0D94             (       MAPPER.ASM):00059                 TST     MAPFLG          ;check the flag
CDE7 274A             (       MAPPER.ASM):00060                 BEQ     MAPP50          ;   just show our position
                      (       MAPPER.ASM):00061         ;
                      (       MAPPER.ASM):00062         ;  Mark Objects
                      (       MAPPER.ASM):00063         ;
CDE9 0F91             (       MAPPER.ASM):00064                 CLR     OFINDF          ;start at top of list
CDEB BDCF6B           (       MAPPER.ASM):00065         MAPP30  JSR     FNDOBJ          ;find the next object on this level
CDEE 270F             (       MAPPER.ASM):00066                 BEQ     MAPP40          ;   done
                      (       MAPPER.ASM):00067         ;
CDF0 6D05             (       MAPPER.ASM):00068                 TST     P.OCOWN,X       ;owned by anyone?
CDF2 26F7             (       MAPPER.ASM):00069                 BNE     MAPP30          ;   yes
                      (       MAPPER.ASM):00070         ;
CDF4 EC02             (       MAPPER.ASM):00071                 LDD     P.OCROW,X       ;load position
CDF6 8D21             (       MAPPER.ASM):00072                 BSR     DSP32           ;calculate display addr
CDF8 CC0008           (       MAPPER.ASM):00073                 LDD     #$0008          ;mark object
CDFB 8D28             (       MAPPER.ASM):00074                 BSR     MARK4           ;   .
CDFD 20EC             (       MAPPER.ASM):00075                 BRA     MAPP30          ;loop until done
                      (       MAPPER.ASM):00076         ;
                      (       MAPPER.ASM):00077         ;  Mark Creatures
                      (       MAPPER.ASM):00078         ;
CDFF 8E03C3           (       MAPPER.ASM):00079         MAPP40  LDX     #CCBLND-CC.LEN  ;starting point
CE02 308811           (       MAPPER.ASM):00080         MAPP42  LEAX    CC.LEN,X        ;advance ptr
CE05 8C05F4           (       MAPPER.ASM):00081                 CMPX    #CCBEND         ;done yet?
CE08 2729             (       MAPPER.ASM):00082                 BEQ     MAPP50          ;   yes
                      (       MAPPER.ASM):00083         ;
CE0A 6D0C             (       MAPPER.ASM):00084                 TST     P.CCUSE,X       ;live creature?
CE0C 27F4             (       MAPPER.ASM):00085                 BEQ     MAPP42          ;   nope
                      (       MAPPER.ASM):00086         ;
CE0E EC0F             (       MAPPER.ASM):00087                 LDD     P.CCROW,X       ;load position
CE10 8D07             (       MAPPER.ASM):00088                 BSR     DSP32           ;calculate display addr
CE12 CC1054           (       MAPPER.ASM):00089                 LDD     #$1054          ;mark creature
CE15 8D0E             (       MAPPER.ASM):00090                 BSR     MARK4           ;   .
CE17 20E9             (       MAPPER.ASM):00091                 BRA     MAPP42          ;loop until done
                      (       MAPPER.ASM):00092         
                      (       MAPPER.ASM):00093         
                      (       MAPPER.ASM):00094         
                      (       MAPPER.ASM):00095         ;
                      (       MAPPER.ASM):00096         ;  DSP32: Local Subroutine to Calculate Display Offset
                      (       MAPPER.ASM):00097         ;
                      (       MAPPER.ASM):00098         ;  Inputs:
                      (       MAPPER.ASM):00099         ;       A - Row
                      (       MAPPER.ASM):00100         ;       B - Col
                      (       MAPPER.ASM):00101         ;       U - Ptr to VDB
                      (       MAPPER.ASM):00102         ;  Returns:
                      (       MAPPER.ASM):00103         ;       Y - Display Addr
                      (       MAPPER.ASM):00104         ;
CE19 1F02             (       MAPPER.ASM):00105         DSP32   TFR     D,Y             ;duplicate row,col
CE1B C6C0             (       MAPPER.ASM):00106                 LDB     #32*6           ;multiply by row byte count
CE1D 3D               (       MAPPER.ASM):00107                 MUL                     ;   .
CE1E E3C4             (       MAPPER.ASM):00108                 ADDD    P.VDBAS,U       ;add display offset
CE20 1E02             (       MAPPER.ASM):00109                 EXG     D,Y             ;swap
CE22 31A5             (       MAPPER.ASM):00110                 LEAY    B,Y             ;   .
CE24 39               (       MAPPER.ASM):00111                 RTS                     ;restore regs/exit
                      (       MAPPER.ASM):00112         ;
                      (       MAPPER.ASM):00113         ;  MARK4: Local Subroutine to Mark the Inner Cells
                      (       MAPPER.ASM):00114         ;
CE25 A7A820           (       MAPPER.ASM):00115         MARK4   STA     32*1,Y
CE28 E7A840           (       MAPPER.ASM):00116                 STB     32*2,Y
CE2B E7A860           (       MAPPER.ASM):00117                 STB     32*3,Y
CE2E A7A90080         (       MAPPER.ASM):00118                 STA     32*4,Y
CE32 39               (       MAPPER.ASM):00119         COMRTS1 RTS
                      (       MAPPER.ASM):00120         
                      (       MAPPER.ASM):00121         
                      (       MAPPER.ASM):00122         
                      (       MAPPER.ASM):00123         ;
                      (       MAPPER.ASM):00124         ;  Mark Player
                      (       MAPPER.ASM):00125         ;
CE33 DC13             (       MAPPER.ASM):00126         MAPP50  LDD     PROW            ;our position
CE35 8DE2             (       MAPPER.ASM):00127                 BSR     DSP32           ;calculate display addr
CE37 CC2418           (       MAPPER.ASM):00128                 LDD     #$2418          ;mark our position
CE3A 8DE9             (       MAPPER.ASM):00129                 BSR     MARK4           ;"X" marks the spot
                      (       MAPPER.ASM):00130         ;
                      (       MAPPER.ASM):00131         ;  Mark Vertical Features
                      (       MAPPER.ASM):00132         ;
CE3C 9E86             (       MAPPER.ASM):00133                 LDX     VFTPTR          ;vertical features index
CE3E 8D00             (       MAPPER.ASM):00134                 BSR     MAPP60          ;up vertical features
                      (       MAPPER.ASM):00135         ;
                      (       MAPPER.ASM):00136         ;  Common Subroutine to mark Vertical Features
                      (       MAPPER.ASM):00137         ;
CE40 A680             (       MAPPER.ASM):00138         MAPP60  LDA     ,X+             ;end of table?
CE42 2BEE             (       MAPPER.ASM):00139                 BMI     COMRTS1         ;   yes - we are done
CE44 EC81             (       MAPPER.ASM):00140                 LDD     ,X++            ;load position
CE46 8DD1             (       MAPPER.ASM):00141                 BSR     DSP32           ;calculate display addr
CE48 CC3C24           (       MAPPER.ASM):00142                 LDD     #$3C24          ;mark the cell
CE4B 8DD8             (       MAPPER.ASM):00143                 BSR     MARK4           ;   .
CE4D 20F1             (       MAPPER.ASM):00144                 BRA     MAPP60          ;loop until done
                      (       MAPPER.ASM):00145         ;
                      (       MAPPER.ASM):00146         ;;;;;        END
                      (    DAGGORATH.ASM):00113                 INCLUDE VIEWER.ASM       ;Dungeon Viewer
                      (       VIEWER.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       VIEWER.ASM):00002         ;  D U N G E O N   V I E W E R
                      (       VIEWER.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       VIEWER.ASM):00004         ;
                      (       VIEWER.ASM):00005         ;  SETSCL: Set Scaling Based on RANGE
                      (       VIEWER.ASM):00006         ;
CE4F 3412             (       VIEWER.ASM):00007         SETSCL  PSHS    A,X             ;save regs
CE51 8ECF50           (       VIEWER.ASM):00008                 LDX     #HLFSCL         ;assume half-step forward
CE54 0D73             (       VIEWER.ASM):00009                 TST     HLFSTP          ;   .
CE56 260C             (       VIEWER.ASM):00010                 BNE     SSCL10          ;   .
                      (       VIEWER.ASM):00011         ;
CE58 30890001         (       VIEWER.ASM):00012                 LEAX    (BAKSCL-HLFSCL),X       ;assume half-step backward
CE5C 0D74             (       VIEWER.ASM):00013                 TST     BAKSTP          ;   .
CE5E 2604             (       VIEWER.ASM):00014                 BNE     SSCL10          ;   .
                      (       VIEWER.ASM):00015         ;
CE60 3089FFF5         (       VIEWER.ASM):00016                 LEAX    (NORSCL-BAKSCL),X       ;normal scaling
                      (       VIEWER.ASM):00017         ;
CE64 968B             (       VIEWER.ASM):00018         SSCL10  LDA     RANGE           ;load range
CE66 A686             (       VIEWER.ASM):00019                 LDA     A,X             ;load table entry
CE68 974F             (       VIEWER.ASM):00020                 STA     VXSCAL          ;set scaling parameters
CE6A 9750             (       VIEWER.ASM):00021                 STA     VYSCAL          ;   .
CE6C 3592             (       VIEWER.ASM):00022                 PULS    A,X,PC          ;restore regs/exit
                      (       VIEWER.ASM):00023         
                      (       VIEWER.ASM):00024         
                      (       VIEWER.ASM):00025         
                      (       VIEWER.ASM):00026         ;
                      (       VIEWER.ASM):00027         ; VIEWER: Subroutine to display, in 3-D perspective view,
                      (       VIEWER.ASM):00028         ;         the player's view of the inside of the maze.
                      (       VIEWER.ASM):00029         ;
                      (       VIEWER.ASM):00030         ; INPUTS:
                      (       VIEWER.ASM):00031         ;
                      (       VIEWER.ASM):00032         ;       PROW     Row occupied by player (Y-coordinate)
                      (       VIEWER.ASM):00033         ;
                      (       VIEWER.ASM):00034         ;       PCOL     Column occupied by player (X-coordinate)
                      (       VIEWER.ASM):00035         ;
                      (       VIEWER.ASM):00036         ;       PDIR     Direction player is facing
                      (       VIEWER.ASM):00037         ;               0 = North
                      (       VIEWER.ASM):00038         ;               1 = East
                      (       VIEWER.ASM):00039         ;               2 = South
                      (       VIEWER.ASM):00040         ;               3 = West
                      (       VIEWER.ASM):00041         ;
                      (       VIEWER.ASM):00042         ;       RLIGHT  Ambient light level in the dungeon. Values can range
                      (       VIEWER.ASM):00043         ;               from 0 to 15 where zero equals total ambient darkness
                      (       VIEWER.ASM):00044         ;               and 5 to 8 is the typical ambient light level at
                      (       VIEWER.ASM):00045         ;               dungeon levels 1 or 2, and 3 to 5 is the ambient
                      (       VIEWER.ASM):00046         ;               light level at dungeon levels 3 or 4.
                      (       VIEWER.ASM):00047         ;
                      (       VIEWER.ASM):00048         ;       MLIGHT  Magical light level. This value is analogous to
                      (       VIEWER.ASM):00049         ;               TLIGHT, but only affects the visibility of magical
                      (       VIEWER.ASM):00050         ;               doors, objects and magical creatures.
                      (       VIEWER.ASM):00051         ;               The ambient light level, RLIGHT does not affect
                      (       VIEWER.ASM):00052         ;               the visibility of magical things.
                      (       VIEWER.ASM):00053         ;
                      (       VIEWER.ASM):00054         ; * * * * * * * * *
                      (       VIEWER.ASM):00055         
                      (       VIEWER.ASM):00056         
                      (       VIEWER.ASM):00057         
                      (       VIEWER.ASM):00058         ;
                      (       VIEWER.ASM):00059         ;  VIEWER: Initialization
                      (       VIEWER.ASM):00060         ;
CE6E 3F               (       VIEWER.ASM):00061         VIEWER  SWI                     ;clear alternate screen
CE6F 09               (       VIEWER.ASM):00062                 FCB     ZFLOP           ;   .
CE70 0F8B             (       VIEWER.ASM):00063                 CLR     RANGE           ;reset range
CE72 DC13             (       VIEWER.ASM):00064                 LDD     PROW            ;load player position
CE74 DD7C             (       VIEWER.ASM):00065                 STD     DROW            ;make copy
                      (       VIEWER.ASM):00066         ;
                      (       VIEWER.ASM):00067         ;  Main Loop
                      (       VIEWER.ASM):00068         ;
CE76 8DD7             (       VIEWER.ASM):00069         VIEW10  BSR     SETSCL          ;set scaling parameters
CE78 DC7C             (       VIEWER.ASM):00070                 LDD     DROW            ;load our position
CE7A BDCC83           (       VIEWER.ASM):00071                 JSR     MAP32           ;calc cell addr
CE7D A684             (       VIEWER.ASM):00072                 LDA     ,X              ;load cell contents
CE7F CE09F4           (       VIEWER.ASM):00073                 LDU     #NEIBOR         ;extracted data goes here
CE82 8E0004           (       VIEWER.ASM):00074                 LDX     #4              ;loop counter
CE85 1F89             (       VIEWER.ASM):00075         VIEW12  TFR     A,B             ;make copy of cell contents
CE87 C403             (       VIEWER.ASM):00076                 ANDB    #3              ;extract 2 LSBits
CE89 E744             (       VIEWER.ASM):00077                 STB     4,U             ;make two copies
CE8B E7C0             (       VIEWER.ASM):00078                 STB     ,U+             ;   .
CE8D 44               (       VIEWER.ASM):00079                 LSRA                    ;shift over
CE8E 44               (       VIEWER.ASM):00080                 LSRA                    ;   .
CE8F 301F             (       VIEWER.ASM):00081                 LEAX    -1,X            ;decrement and loop
CE91 26F2             (       VIEWER.ASM):00082                 BNE     VIEW12          ;   .
                      (       VIEWER.ASM):00083         ;
CE93 D623             (       VIEWER.ASM):00084                 LDB     PDIR            ;set base addr for features
CE95 CE09F4           (       VIEWER.ASM):00085                 LDU     #NEIBOR         ;   .
CE98 33C5             (       VIEWER.ASM):00086                 LEAU    B,U             ;   .
                      (       VIEWER.ASM):00087         
                      (       VIEWER.ASM):00088         
                      (       VIEWER.ASM):00089         
                      (       VIEWER.ASM):00090         ;
                      (       VIEWER.ASM):00091         ;  Forward-Looking Architectural Features Drawing Routine
                      (       VIEWER.ASM):00092         ;
CE9A 108EDC15         (       VIEWER.ASM):00093         VIEW20  LDY     #FLATAB         ;table base addr
                      (       VIEWER.ASM):00094         ;
CE9E A6A0             (       VIEWER.ASM):00095         VIEW22  LDA     ,Y+             ;load relative direction change
CEA0 2B3E             (       VIEWER.ASM):00096                 BMI     VIEW30          ;   we are done
                      (       VIEWER.ASM):00097         ;
CEA2 E6C6             (       VIEWER.ASM):00098                 LDB     A,U             ;load cell wall features
CEA4 58               (       VIEWER.ASM):00099                 LSLB                    ;times 2 for word entries
CEA5 C104             (       VIEWER.ASM):00100                 CMPB    #HF.SDR*2       ;secret door?
CEA7 2608             (       VIEWER.ASM):00101                 BNE     VIEW24          ;   nope
                      (       VIEWER.ASM):00102         ;
CEA9 AEA5             (       VIEWER.ASM):00103                 LDX     B,Y             ;load secret door vector list addr
CEAB 0A75             (       VIEWER.ASM):00104                 DEC     MAGFLG          ;draw with magic light
CEAD 8D27             (       VIEWER.ASM):00105                 BSR     DRAWIT          ;   .
CEAF C606             (       VIEWER.ASM):00106                 LDB     #HF.WAL*2       ;then draw a wall (regular light)
                      (       VIEWER.ASM):00107         ;
CEB1 AEA5             (       VIEWER.ASM):00108         VIEW24  LDX     B,Y             ;load vector list addr
CEB3 8D21             (       VIEWER.ASM):00109                 BSR     DRAWIT          ;draw with regular light
                      (       VIEWER.ASM):00110         ;
CEB5 3128             (       VIEWER.ASM):00111                 LEAY    8,Y             ;advance to next table entry
CEB7 20E5             (       VIEWER.ASM):00112                 BRA     VIEW22          ;loop
CEB9 39               (       VIEWER.ASM):00113         COMRTS2 RTS
                      (       VIEWER.ASM):00114         
                      (       VIEWER.ASM):00115         
                      (       VIEWER.ASM):00116         
                      (       VIEWER.ASM):00117         ;
                      (       VIEWER.ASM):00118         ;  PDRAW: Peek-A-Boo Drawing Routine
                      (       VIEWER.ASM):00119         ;
CEBA 1F12             (       VIEWER.ASM):00120         PDRAW   TFR     X,Y             ;save vector list ptr
CEBC 6DC5             (       VIEWER.ASM):00121                 TST     B,U             ;passage to our left?
CEBE 26F9             (       VIEWER.ASM):00122                 BNE     COMRTS2         ;   nope
CEC0 DB23             (       VIEWER.ASM):00123                 ADDB    PDIR            ;effect relative change in direction        
CEC2 D78A             (       VIEWER.ASM):00124                 STB     DIR             ;   .
CEC4 DC7C             (       VIEWER.ASM):00125                 LDD     DROW            ;our position
CEC6 BDD123           (       VIEWER.ASM):00126                 JSR     STEP            ;   .
CEC9 BDCF8A           (       VIEWER.ASM):00127                 JSR     CFIND           ;anything here?
CECC 27EB             (       VIEWER.ASM):00128                 BEQ     COMRTS2         ;   nope
CECE 1E12             (       VIEWER.ASM):00129                 EXG     X,Y             ;swap pointers/fall into CMRDRW
                      (       VIEWER.ASM):00130         ;
                      (       VIEWER.ASM):00131         ;  CMRDRW: Draw Magical/Non-Magical Creatures
                      (       VIEWER.ASM):00132         ;
CED0 6D22             (       VIEWER.ASM):00133         CMRDRW  TST     P.CCMGO,Y       ;magic creature?
CED2 2702             (       VIEWER.ASM):00134                 BEQ     DRAWIT          ;   non-magical creature
CED4 0A75             (       VIEWER.ASM):00135                 DEC     MAGFLG          ;draw with magic light/fall into DRAWIT
                      (       VIEWER.ASM):00136         ;
                      (       VIEWER.ASM):00137         ;  DRAWIT: Draw Vector List in Alternate Screen
                      (       VIEWER.ASM):00138         ;
CED6 3440             (       VIEWER.ASM):00139         DRAWIT  PSHS    U               ;save regs
CED8 3F               (       VIEWER.ASM):00140                 SWI                     ;set the lighting levels
CED9 00               (       VIEWER.ASM):00141                 FCB     SETFAD          ;   .
CEDA DE0B             (       VIEWER.ASM):00142                 LDU     FLOP            ;alternate screen VDB
CEDC 3F               (       VIEWER.ASM):00143                 SWI                     ;draw it
CEDD 01               (       VIEWER.ASM):00144                 FCB     VCTLST          ;   .
CEDE 35C0             (       VIEWER.ASM):00145                 PULS    U,PC            ;restore regs/exit
                      (       VIEWER.ASM):00146         
                      (       VIEWER.ASM):00147         
                      (       VIEWER.ASM):00148         
                      (       VIEWER.ASM):00149         ;
                      (       VIEWER.ASM):00150         ;  Forward-Looking Creature Drawing Routine
                      (       VIEWER.ASM):00151         ;
CEE0 DC7C             (       VIEWER.ASM):00152         VIEW30  LDD     DROW            ;our position
CEE2 BDCF8A           (       VIEWER.ASM):00153                 JSR     CFIND           ;creature here?
CEE5 270C             (       VIEWER.ASM):00154                 BEQ     VIEW32          ;   nope
                      (       VIEWER.ASM):00155         ;
CEE7 1F12             (       VIEWER.ASM):00156                 TFR     X,Y             ;copy CCB ptr
CEE9 E62D             (       VIEWER.ASM):00157                 LDB     P.CCTYP,Y       ;load creature type
CEEB 58               (       VIEWER.ASM):00158                 LSLB                    ;*2 for word offsets
CEEC 8EDADA           (       VIEWER.ASM):00159                 LDX     #FWDCRE         ;forward looking creature lists
CEEF AE85             (       VIEWER.ASM):00160                 LDX     B,X             ;load vector list addr
CEF1 8DDD             (       VIEWER.ASM):00161                 BSR     CMRDRW          ;draw the creature
CEF3 C603             (       VIEWER.ASM):00162         VIEW32  LDB     #3              ;peek-a-boo to our left
CEF5 8EDCE7           (       VIEWER.ASM):00163                 LDX     #LPEEK          ;   .
CEF8 8DC0             (       VIEWER.ASM):00164                 BSR     PDRAW           ;   .
                      (       VIEWER.ASM):00165         ;
CEFA C601             (       VIEWER.ASM):00166                 LDB     #1              ;peek-a-boo to our right
CEFC 8EDCF0           (       VIEWER.ASM):00167                 LDX     #RPEEK          ;   .
CEFF 8DB9             (       VIEWER.ASM):00168                 BSR     PDRAW           ;   .
                      (       VIEWER.ASM):00169         ;
                      (       VIEWER.ASM):00170         ;  Draw vertical features
                      (       VIEWER.ASM):00171         ;
CF01 8EDD73           (       VIEWER.ASM):00172                 LDX     #CELINE         ;assume ceiling line
CF04 DC7C             (       VIEWER.ASM):00173                 LDD     DROW            ;our position
CF06 BDCFE9           (       VIEWER.ASM):00174                 JSR     VFIND           ;any vertical features?
CF09 2B06             (       VIEWER.ASM):00175                 BMI     VIEW40          ;   nope - draw ceiling line
                      (       VIEWER.ASM):00176         ;
CF0B 8EDCF9           (       VIEWER.ASM):00177                 LDX     #FWDVER         ;forward looking vertical features
CF0E 48               (       VIEWER.ASM):00178                 LSLA                    ;*2 for word offset
CF0F AE86             (       VIEWER.ASM):00179                 LDX     A,X             ;load vector list addr
CF11 8DC3             (       VIEWER.ASM):00180         VIEW40  BSR     DRAWIT          ;draw with regular light
                      (       VIEWER.ASM):00181         ;
                      (       VIEWER.ASM):00182         ;  Draw objects
                      (       VIEWER.ASM):00183         ;
CF13 0F91             (       VIEWER.ASM):00184                 CLR     OFINDF          ;start at top of object lists
CF15 DC7C             (       VIEWER.ASM):00185         VIEW52  LDD     DROW            ;load position
CF17 BDCF5B           (       VIEWER.ASM):00186                 JSR     OFIND           ;any objects?
CF1A 2710             (       VIEWER.ASM):00187                 BEQ     VIEW60          ;   nope
                      (       VIEWER.ASM):00188         ;
CF1C A60A             (       VIEWER.ASM):00189                 LDA     P.OCCLS,X       ;load object class
CF1E 48               (       VIEWER.ASM):00190                 LSLA                    ;*2 for word offsets
CF1F 8EDA25           (       VIEWER.ASM):00191                 LDX     #FWDOBJ         ;forward-looking object vector lists
CF22 AE86             (       VIEWER.ASM):00192                 LDX     A,X             ;load vector list addr
CF24 0A75             (       VIEWER.ASM):00193                 DEC     MAGFLG          ;draw with both magic/regular light
CF26 8DAE             (       VIEWER.ASM):00194                 BSR     DRAWIT          ;   .
CF28 8DAC             (       VIEWER.ASM):00195                 BSR     DRAWIT          ;   .
CF2A 20E9             (       VIEWER.ASM):00196                 BRA     VIEW52          ;loop until there are no more objects
                      (       VIEWER.ASM):00197         
                      (       VIEWER.ASM):00198         
                      (       VIEWER.ASM):00199         
                      (       VIEWER.ASM):00200         ;
                      (       VIEWER.ASM):00201         ;  Check "Line-of-Sight"
                      (       VIEWER.ASM):00202         ;
CF2C 6DC4             (       VIEWER.ASM):00203         VIEW60  TST     ,U              ;passage in front of us? (2022 n.b. original was 0,U)
CF2E 2615             (       VIEWER.ASM):00204                 BNE     VIEW99          ;   nope - we are done
                      (       VIEWER.ASM):00205         ;
                      (       VIEWER.ASM):00206         ;  Take a step and increase range
                      (       VIEWER.ASM):00207         ;
CF30 9623             (       VIEWER.ASM):00208                 LDA     PDIR            ;restore original direction
CF32 978A             (       VIEWER.ASM):00209                 STA     DIR             ;   .
CF34 DC7C             (       VIEWER.ASM):00210                 LDD     DROW            ;our position
CF36 BDD123           (       VIEWER.ASM):00211                 JSR     STEP            ;take a step
CF39 DD7C             (       VIEWER.ASM):00212                 STD     DROW            ;update our position
                      (       VIEWER.ASM):00213         ;
CF3B 0C8B             (       VIEWER.ASM):00214                 INC     RANGE           ;have we gone far enough?
CF3D 968B             (       VIEWER.ASM):00215                 LDA     RANGE           ;   .
CF3F 8109             (       VIEWER.ASM):00216                 CMPA    #9              ;   .
CF41 102FFF31         (       VIEWER.ASM):00217                 LBLE    VIEW10          ;   nope
                      (       VIEWER.ASM):00218         ;
CF45 39               (       VIEWER.ASM):00219         VIEW99  RTS                     ;common RETURN
                      (       VIEWER.ASM):00220         
                      (       VIEWER.ASM):00221         
                      (       VIEWER.ASM):00222         
                      (       VIEWER.ASM):00223         ;
                      (       VIEWER.ASM):00224         ; Scaling constants - look-up table
                      (       VIEWER.ASM):00225         ;
                      (       VIEWER.ASM):00226         ; Values in this table are indexed on RANGE (the distance of an
                      (       VIEWER.ASM):00227         ; object or feature from the player.
                      (       VIEWER.ASM):00228         ;
                      (       VIEWER.ASM):00229         ; Values in the table are fixed point, radix-7, binary.
                      (       VIEWER.ASM):00230         ;
                      (       VIEWER.ASM):00231         ;   B B B B B B B B
                      (       VIEWER.ASM):00232         ;    ^
                      (       VIEWER.ASM):00233         ;    !
                      (       VIEWER.ASM):00234         ;    +-----------------< Binary Point
                      (       VIEWER.ASM):00235         ;
     CF46             (       VIEWER.ASM):00236         NORSCL  EQU     *               ;base
                      (       VIEWER.ASM):00237         ;
                      (       VIEWER.ASM):00238         ; Range = 0: (cell occupied by player)
                      (       VIEWER.ASM):00239         ;
CF46 C8               (       VIEWER.ASM):00240                 FCB     %11001000       ; 1 72/128ths size
                      (       VIEWER.ASM):00241         ;
                      (       VIEWER.ASM):00242         ; Range = 1: (cell immediately in front of player)
                      (       VIEWER.ASM):00243         ;
CF47 80               (       VIEWER.ASM):00244                 FCB     %10000000       ; 128/128ths size (1:1)
                      (       VIEWER.ASM):00245         ;
                      (       VIEWER.ASM):00246         ; Range = 2: (next cell out)
                      (       VIEWER.ASM):00247         ;
CF48 50               (       VIEWER.ASM):00248                 FCB     %01010000       ; 80/128ths size
                      (       VIEWER.ASM):00249         ;
                      (       VIEWER.ASM):00250         ; Range = 3:
                      (       VIEWER.ASM):00251         ;
CF49 32               (       VIEWER.ASM):00252                 FCB     %00110010       ; 50/128ths size
                      (       VIEWER.ASM):00253         ;
                      (       VIEWER.ASM):00254         ; Range = 4:
                      (       VIEWER.ASM):00255         ;
CF4A 1F               (       VIEWER.ASM):00256                 FCB     %00011111       ; 31/128ths size
                      (       VIEWER.ASM):00257         ;
                      (       VIEWER.ASM):00258         ; Range = 5:
                      (       VIEWER.ASM):00259         ;
CF4B 14               (       VIEWER.ASM):00260                 FCB     %00010100       ; 20/128ths size
                      (       VIEWER.ASM):00261         ;
                      (       VIEWER.ASM):00262         ; Range = 6:
                      (       VIEWER.ASM):00263         ;
CF4C 0C               (       VIEWER.ASM):00264                 FCB     %00001100       ; 12/128ths size
                      (       VIEWER.ASM):00265         ;
                      (       VIEWER.ASM):00266         ; Range = 7:
                      (       VIEWER.ASM):00267         ;
CF4D 08               (       VIEWER.ASM):00268                 FCB     %00001000       ; 8/128ths size
                      (       VIEWER.ASM):00269         ;
                      (       VIEWER.ASM):00270         ; Range = 8:
                      (       VIEWER.ASM):00271         ;
CF4E 04               (       VIEWER.ASM):00272                 FCB     %00000100       ; 4/128ths size
                      (       VIEWER.ASM):00273         ;
                      (       VIEWER.ASM):00274         ; Range = 9:
                      (       VIEWER.ASM):00275         ;
CF4F 02               (       VIEWER.ASM):00276                 FCB     %00000010       ; 2/128ths size
                      (       VIEWER.ASM):00277         
                      (       VIEWER.ASM):00278         
                      (       VIEWER.ASM):00279         
                      (       VIEWER.ASM):00280         ;
                      (       VIEWER.ASM):00281         ; "Half-Step" scaling constant table
                      (       VIEWER.ASM):00282         ;
     CF50             (       VIEWER.ASM):00283         HLFSCL  EQU     *               ;
                      (       VIEWER.ASM):00284         ;
                      (       VIEWER.ASM):00285         ;
                      (       VIEWER.ASM):00286         ; Range = 0 plus a half step
                      (       VIEWER.ASM):00287         ;
CF50 FF               (       VIEWER.ASM):00288                 FCB     255             ; 1 127/128ths size
                      (       VIEWER.ASM):00289         ;
                      (       VIEWER.ASM):00290         ; Range = 1 plus a half step
                      (       VIEWER.ASM):00291         ;
     CF51             (       VIEWER.ASM):00292         BAKSCL  EQU     *               ;*DEBUG
CF51 9C               (       VIEWER.ASM):00293                 FCB     156             ; 1 28/128ths size
                      (       VIEWER.ASM):00294         ;
                      (       VIEWER.ASM):00295         ; Range = 2 plus a half step
                      (       VIEWER.ASM):00296         ;
CF52 64               (       VIEWER.ASM):00297                 FCB     100             ; 100/128ths size
                      (       VIEWER.ASM):00298         ;
                      (       VIEWER.ASM):00299         ; Range = 3 plus a half step
                      (       VIEWER.ASM):00300         ;
CF53 41               (       VIEWER.ASM):00301                 FCB     65              ; 65/128ths size
                      (       VIEWER.ASM):00302         ;
                      (       VIEWER.ASM):00303         ; Range = 4 plus a half step
                      (       VIEWER.ASM):00304         ;
CF54 28               (       VIEWER.ASM):00305                 FCB     40              ; 40/128ths size
                      (       VIEWER.ASM):00306         ;
                      (       VIEWER.ASM):00307         ; Range = 5 plus a half step
                      (       VIEWER.ASM):00308         ;
CF55 1A               (       VIEWER.ASM):00309                 FCB     26              ; 26/128ths size
                      (       VIEWER.ASM):00310         ;
                      (       VIEWER.ASM):00311         ; Range = 6 plus a half step
                      (       VIEWER.ASM):00312         ;
CF56 10               (       VIEWER.ASM):00313                 FCB     16              ; 16/128ths size
                      (       VIEWER.ASM):00314         ;
                      (       VIEWER.ASM):00315         ; Range = 7 plus a half step
                      (       VIEWER.ASM):00316         ;
CF57 0A               (       VIEWER.ASM):00317                 FCB     10              ; 10/128ths size
                      (       VIEWER.ASM):00318         ;
                      (       VIEWER.ASM):00319         ; Range = 8 plus a half step
                      (       VIEWER.ASM):00320         ;
CF58 06               (       VIEWER.ASM):00321                 FCB     6               ; 6/128ths size
                      (       VIEWER.ASM):00322         ;
                      (       VIEWER.ASM):00323         ; Range = 9 plus a half step
                      (       VIEWER.ASM):00324         ;
CF59 03               (       VIEWER.ASM):00325                 FCB     3               ; 3/128ths size
                      (       VIEWER.ASM):00326         ;
                      (       VIEWER.ASM):00327         ; End of scaling table 2
                      (       VIEWER.ASM):00328         ;
CF5A 01               (       VIEWER.ASM):00329                 FCB     1               ;*DEBUG
                      (       VIEWER.ASM):00330         ;
                      (       VIEWER.ASM):00331         ;
                      (       VIEWER.ASM):00332         ;;;;;        END
                      (       VIEWER.ASM):00333         
                      (    DAGGORATH.ASM):00114                 INCLUDE COMCRE.ASM       ;Creature Movement Routines
                      (       COMCRE.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMCRE.ASM):00002         ;  C R E A T U R E   M O V E M E N T   R O U T I N E S
                      (       COMCRE.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMCRE.ASM):00004         ;
                      (       COMCRE.ASM):00005         ;  OFIND: Find an unowned object based on position
                      (       COMCRE.ASM):00006         ;
                      (       COMCRE.ASM):00007         ;  Inputs:
                      (       COMCRE.ASM):00008         ;       A - Row
                      (       COMCRE.ASM):00009         ;       B - Column
                      (       COMCRE.ASM):00010         ;       OFINDF - flag to indicate ptr "rewind" (0 - start again)
                      (       COMCRE.ASM):00011         ;  Returns:
                      (       COMCRE.ASM):00012         ;       X - pointer to Object Control Block (OCB)
                      (       COMCRE.ASM):00013         ;       Z - condition code set if search fails
                      (       COMCRE.ASM):00014         ;
CF5B 8D0E             (       COMCRE.ASM):00015         OFIND   BSR     FNDOBJ          ;find next object on our level
CF5D 270B             (       COMCRE.ASM):00016                 BEQ     OFIND9          ;   search failure
CF5F 10A302           (       COMCRE.ASM):00017                 CMPD    P.OCROW,X       ;position match?
CF62 26F7             (       COMCRE.ASM):00018                 BNE     OFIND           ;   nope - try again
CF64 6D05             (       COMCRE.ASM):00019                 TST     P.OCOWN,X       ;owned by anyone?
CF66 26F3             (       COMCRE.ASM):00020                 BNE     OFIND           ;   yes - try again
CF68 1CFB             (       COMCRE.ASM):00021                 ANDCC   #~(CC.Z&$FF)    ;winner!
CF6A 39               (       COMCRE.ASM):00022         OFIND9  RTS                     ;bye
                      (       COMCRE.ASM):00023         
                      (       COMCRE.ASM):00024         
                      (       COMCRE.ASM):00025         
                      (       COMCRE.ASM):00026         ;
                      (       COMCRE.ASM):00027         ;  FNDOBJ: Find the next object on our level
                      (       COMCRE.ASM):00028         ;
                      (       COMCRE.ASM):00029         ;  Inputs:
                      (       COMCRE.ASM):00030         ;       OFINDF - flag to indicate ptr "rewind" (0 - start again)
                      (       COMCRE.ASM):00031         ;  Returns:
                      (       COMCRE.ASM):00032         ;       X - ptr to Object Control Block (OCB)
                      (       COMCRE.ASM):00033         ;       Z - condition code set if search fails
                      (       COMCRE.ASM):00034         ;
CF6B 3402             (       COMCRE.ASM):00035         FNDOBJ  PSHS    A               ;save regs
CF6D 9681             (       COMCRE.ASM):00036                 LDA     LEVEL           ;load current level number
                      (       COMCRE.ASM):00037         ;
CF6F 9E92             (       COMCRE.ASM):00038                 LDX     OFINDP          ;assume old ptr
CF71 0D91             (       COMCRE.ASM):00039                 TST     OFINDF          ;initialize ptr?
CF73 2605             (       COMCRE.ASM):00040                 BNE     FIND10          ;   nope
CF75 8E0B07           (       COMCRE.ASM):00041                 LDX     #OCBLND-OC.LEN  ;top of table
CF78 0A91             (       COMCRE.ASM):00042                 DEC     OFINDF          ;say we have started
                      (       COMCRE.ASM):00043         ;
CF7A 300E             (       COMCRE.ASM):00044         FIND10  LEAX    OC.LEN,X        ;advance to next entry
CF7C 9F92             (       COMCRE.ASM):00045                 STX     OFINDP          ;update ptr
CF7E 9C0F             (       COMCRE.ASM):00046                 CMPX    OCBPTR          ;reach end of table?
CF80 2706             (       COMCRE.ASM):00047                 BEQ     FIND99          ;   yes - loser
                      (       COMCRE.ASM):00048         ;
CF82 A104             (       COMCRE.ASM):00049                 CMPA    P.OCLVL,X       ;is this object on our level?
CF84 26F4             (       COMCRE.ASM):00050                 BNE     FIND10          ;   nope
CF86 1CFB             (       COMCRE.ASM):00051                 ANDCC   #~(CC.Z&$FF)    ;winner!
CF88 3582             (       COMCRE.ASM):00052         FIND99  PULS    A,PC            ;restore regs/exit
                      (       COMCRE.ASM):00053         
                      (       COMCRE.ASM):00054         
                      (       COMCRE.ASM):00055         
                      (       COMCRE.ASM):00056         ;
                      (       COMCRE.ASM):00057         ;  CFIND: Find a creature based on position
                      (       COMCRE.ASM):00058         ;
                      (       COMCRE.ASM):00059         ;  Inputs:
                      (       COMCRE.ASM):00060         ;       A - Row
                      (       COMCRE.ASM):00061         ;       B - Column
                      (       COMCRE.ASM):00062         ;
                      (       COMCRE.ASM):00063         ;  Returns:
                      (       COMCRE.ASM):00064         ;       X - Pointer to CCB (invalid if search fails)
                      (       COMCRE.ASM):00065         ;       Z - condition code set if search fails
                      (       COMCRE.ASM):00066         ;
CF8A 8E03C3           (       COMCRE.ASM):00067         CFIND   LDX     #CCBLND-CC.LEN  ;load pointer to CCB table
                      (       COMCRE.ASM):00068         ;
CF8D 308811           (       COMCRE.ASM):00069         CFND10  LEAX    CC.LEN,X        ;advance to next CCB
CF90 8C05F4           (       COMCRE.ASM):00070                 CMPX    #CCBEND         ;check for overrun
CF93 2709             (       COMCRE.ASM):00071                 BEQ     CFND99          ;   loser!
CF95 10A30F           (       COMCRE.ASM):00072                 CMPD    P.CCROW,X       ;is this the creature we want?
CF98 26F3             (       COMCRE.ASM):00073                 BNE     CFND10          ;   nope
                      (       COMCRE.ASM):00074         ;
CF9A 6D0C             (       COMCRE.ASM):00075         CFND30  TST     P.CCUSE,X       ;insure that this is a live creature
CF9C 27EF             (       COMCRE.ASM):00076                 BEQ     CFND10          ;   oops - dead (invalid) creature
                      (       COMCRE.ASM):00077         ;
CF9E 39               (       COMCRE.ASM):00078         CFND99  RTS                     ;winner!
                      (       COMCRE.ASM):00079         ;
                      (       COMCRE.ASM):00080         ;  FNDCEL: Find an occupiable cell
                      (       COMCRE.ASM):00081         ;
                      (       COMCRE.ASM):00082         ;  Returns:
                      (       COMCRE.ASM):00083         ;       A - Row
                      (       COMCRE.ASM):00084         ;       B - Col
                      (       COMCRE.ASM):00085         ;
CF9F 3416             (       COMCRE.ASM):00086         FNDCEL  PSHS    A,B,X           ;save regs
CFA1 BDCC79           (       COMCRE.ASM):00087         FCEL10  JSR     RNDCEL          ;pick a cell, any cell
CFA4 EDE4             (       COMCRE.ASM):00088                 STD     ,S              ;assume row/col is ok (2022 n.b. original was 0,S)
CFA6 A684             (       COMCRE.ASM):00089                 LDA     ,X              ;can we live here?
CFA8 4C               (       COMCRE.ASM):00090                 INCA                    ;   (solid wall = $FF)
CFA9 27F6             (       COMCRE.ASM):00091                 BEQ     FCEL10          ;   nope
CFAB 3596             (       COMCRE.ASM):00092                 PULS    A,B,X,PC        ;restore regs/exit
                      (       COMCRE.ASM):00093         
                      (       COMCRE.ASM):00094         
                      (       COMCRE.ASM):00095         
                      (       COMCRE.ASM):00096         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMCRE.ASM):00097         ;  C R E A T U R E   P O P U L A T O R
                      (       COMCRE.ASM):00098         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMCRE.ASM):00099         ;
                      (       COMCRE.ASM):00100         ;  CBIRTH: Give Birth to a Creature
                      (       COMCRE.ASM):00101         ;
                      (       COMCRE.ASM):00102         ;  Inputs:
                      (       COMCRE.ASM):00103         ;       A - Creature Type
                      (       COMCRE.ASM):00104         ;  Outputs:
                      (       COMCRE.ASM):00105         ;         - Creates a Creature Control Block (CCB)
                      (       COMCRE.ASM):00106         ;         - Creates and schedules CMOVE TCB
                      (       COMCRE.ASM):00107         ;
CFAD 3476             (       COMCRE.ASM):00108         CBIRTH  PSHS    A,B,X,Y,U       ;save some regs
                      (       COMCRE.ASM):00109         ;
                      (       COMCRE.ASM):00110         ;  Find the next available CCB
                      (       COMCRE.ASM):00111         ;
CFAF CE03C3           (       COMCRE.ASM):00112                 LDU     #CCBLND-CC.LEN  ;CCB table base addr
CFB2 33C811           (       COMCRE.ASM):00113         CBIR00  LEAU    CC.LEN,U        ;advance to next CCB
CFB5 6D4C             (       COMCRE.ASM):00114                 TST     P.CCUSE,U       ;is this CCB free?
CFB7 26F9             (       COMCRE.ASM):00115                 BNE     CBIR00          ;   no
CFB9 6A4C             (       COMCRE.ASM):00116                 DEC     P.CCUSE,U       ;mark CCB in-use
                      (       COMCRE.ASM):00117         ;
                      (       COMCRE.ASM):00118         ;  Fill in the new CCB
                      (       COMCRE.ASM):00119         ;
CFBB A74D             (       COMCRE.ASM):00120                 STA     P.CCTYP,U       ;store the creature type
CFBD C608             (       COMCRE.ASM):00121                 LDB     #CD.LEN         ;calculate offset into CDBTAB
CFBF 3D               (       COMCRE.ASM):00122                 MUL                     ;   .
CFC0 C3DAF2           (       COMCRE.ASM):00123                 ADDD    #CDBTAB         ;add CDB table base addr
CFC3 1F02             (       COMCRE.ASM):00124                 TFR     D,Y             ;source ptr
CFC5 1F31             (       COMCRE.ASM):00125                 TFR     U,X             ;destination ptr
CFC7 8608             (       COMCRE.ASM):00126                 LDA     #CD.LEN         ;number of bytes to copy
CFC9 BDC04B           (       COMCRE.ASM):00127                 JSR     COPY            ;copy ROM info
                      (       COMCRE.ASM):00128         ;
                      (       COMCRE.ASM):00129         ;  Place the new creature in the maze
                      (       COMCRE.ASM):00130         ;
CFCC 8DD1             (       COMCRE.ASM):00131         CBIR20  BSR     FNDCEL          ;find an occupiable cell
CFCE 8DBA             (       COMCRE.ASM):00132                 BSR     CFIND           ;does somebody else already live here?
CFD0 26FA             (       COMCRE.ASM):00133                 BNE     CBIR20          ;   oops, somebody here already
CFD2 ED4F             (       COMCRE.ASM):00134                 STD     P.CCROW,U       ;save position in CCB
                      (       COMCRE.ASM):00135         ;
                      (       COMCRE.ASM):00136         ;  Create the Creature Movement TCB
                      (       COMCRE.ASM):00137         ;
CFD4 1F31             (       COMCRE.ASM):00138                 TFR     U,X             ;copy CCB ptr
CFD6 BDC260           (       COMCRE.ASM):00139                 JSR     GETTCB          ;allocate core for TCB
CFD9 AF45             (       COMCRE.ASM):00140                 STX     P.TCDTA,U       ;store CCB ptr
CFDB CCD049           (       COMCRE.ASM):00141                 LDD     #CMOVE          ;store routine name
CFDE ED43             (       COMCRE.ASM):00142                 STD     P.TCRTN,U       ;   P.
CFE0 A606             (       COMCRE.ASM):00143                 LDA     P.CCTMV,X       ;load the delay time
CFE2 C604             (       COMCRE.ASM):00144                 LDB     #Q.TEN          ;into the TENTH queue
CFE4 BDC221           (       COMCRE.ASM):00145                 JSR     QUEADD          ;add to the correct queue
                      (       COMCRE.ASM):00146         ;
CFE7 35F6             (       COMCRE.ASM):00147                 PULS    A,B,X,Y,U,PC    ;restore regs/go home
                      (       COMCRE.ASM):00148         
                      (       COMCRE.ASM):00149         
                      (       COMCRE.ASM):00150         
                      (       COMCRE.ASM):00151         ;
                      (       COMCRE.ASM):00152         ;  VFIND: Vertical Feature Search Routine
                      (       COMCRE.ASM):00153         ;
                      (       COMCRE.ASM):00154         ;  Inputs:
                      (       COMCRE.ASM):00155         ;       A - row
                      (       COMCRE.ASM):00156         ;       B - column
                      (       COMCRE.ASM):00157         ;  Returns:
                      (       COMCRE.ASM):00158         ;       A - vertical feature code
                      (       COMCRE.ASM):00159         ;       N - condition code set if earch fails
                      (       COMCRE.ASM):00160         ;
CFE9 3456             (       COMCRE.ASM):00161         VFIND   PSHS    A,B,X,U         ;save regs
CFEB DE86             (       COMCRE.ASM):00162                 LDU     VFTPTR          ;base addr of vertical features table
CFED 8D0B             (       COMCRE.ASM):00163                 BSR     VSUB00          ;check for vertical features up
CFEF 4D               (       COMCRE.ASM):00164                 TSTA                    ;   .
CFF0 2A04             (       COMCRE.ASM):00165                 BPL     VFIND9          ;   winner
                      (       COMCRE.ASM):00166         ;
CFF2 8D06             (       COMCRE.ASM):00167                 BSR     VSUB00          ;check for vertical features down
CFF4 8B02             (       COMCRE.ASM):00168                 ADDA    #2              ;   .
CFF6 A7E4             (       COMCRE.ASM):00169         VFIND9  STA     ,S              ;store return code (2022 n.b. original was 0,S)
CFF8 35D6             (       COMCRE.ASM):00170                 PULS    A,B,X,U,PC      ;restore regs/exit
                      (       COMCRE.ASM):00171         ;
CFFA A6C0             (       COMCRE.ASM):00172         VSUB00  LDA     ,U+             ;load vertical feature code
CFFC 2B06             (       COMCRE.ASM):00173                 BMI     VSUB99          ;   end of table
CFFE AEC1             (       COMCRE.ASM):00174                 LDX     ,U++            ;load vertical feature position
D000 AC62             (       COMCRE.ASM):00175                 CMPX    2,S             ;did we get a match?
D002 26F6             (       COMCRE.ASM):00176                 BNE     VSUB00          ;   nope
D004 39               (       COMCRE.ASM):00177         VSUB99  RTS                     ;bye
                      (       COMCRE.ASM):00178         
                      (       COMCRE.ASM):00179         
                      (       COMCRE.ASM):00180         
                      (       COMCRE.ASM):00181         ;
                      (       COMCRE.ASM):00182         ;  Vertical Features Table
                      (       COMCRE.ASM):00183         ;
     D005             (       COMCRE.ASM):00184         VFTTAB  EQU     *
                      (       COMCRE.ASM):00185         ;                               ;level  0    1    2    3    4
D005 80               (       COMCRE.ASM):00186                 FCB     -128            ;
D006 010017           (       COMCRE.ASM):00187                 FCB     1,00,23         ;ladder DN   UP
D009 000F04           (       COMCRE.ASM):00188                 FCB     0,15,04         ;hole   DN   UP
D00C 001411           (       COMCRE.ASM):00189                 FCB     0,20,17         ;hole   DN   UP
D00F 011C1E           (       COMCRE.ASM):00190                 FCB     1,28,30         ;ladder DN   UP
D012 80               (       COMCRE.ASM):00191                 FCB     -128            ;
D013 010203           (       COMCRE.ASM):00192                 FCB     1,02,03         ;ladder      DN   UP
D016 00031F           (       COMCRE.ASM):00193                 FCB     0,03,31         ;hole        DN   UP
D019 001314           (       COMCRE.ASM):00194                 FCB     0,19,20         ;hole        DN   UP
D01C 001F00           (       COMCRE.ASM):00195                 FCB     0,31,00         ;hole        DN   UP
D01F 80               (       COMCRE.ASM):00196                 FCB     -128            ;
D020 80               (       COMCRE.ASM):00197                 FCB     -128            ;
D021 00001F           (       COMCRE.ASM):00198                 FCB     0,00,31         ;hole                  DN   UP
D024 000500           (       COMCRE.ASM):00199                 FCB     0,05,00         ;hole                  DN   UP
D027 00161C           (       COMCRE.ASM):00200                 FCB     0,22,28         ;hole                  DN   UP
D02A 001F10           (       COMCRE.ASM):00201                 FCB     0,31,16         ;hole                  DN   UP
D02D 80               (       COMCRE.ASM):00202                 FCB     -128            ;
D02E 80               (       COMCRE.ASM):00203                 FCB     -128            ;
                      (       COMCRE.ASM):00204         
                      (       COMCRE.ASM):00205         
                      (       COMCRE.ASM):00206         
                      (       COMCRE.ASM):00207         ;
                      (       COMCRE.ASM):00208         ;  CREGEN: Creature Regeneration Task
                      (       COMCRE.ASM):00209         ;
D02F 9E82             (       COMCRE.ASM):00210         CREGEN  LDX     CMXPTR          ;load current matrix level ptr
D031 C60B             (       COMCRE.ASM):00211                 LDB     #CTYPES-1       ;number of creatures - 1
D033 4F               (       COMCRE.ASM):00212                 CLRA                    ;reset accumulator
                      (       COMCRE.ASM):00213         ;
D034 AB85             (       COMCRE.ASM):00214         CGEN10  ADDA    B,X             ;figure number of creatures on level
D036 5A               (       COMCRE.ASM):00215                 DECB                    ;are we done?
D037 2AFB             (       COMCRE.ASM):00216                 BPL     CGEN10          ;   nope
                      (       COMCRE.ASM):00217         ;
D039 8120             (       COMCRE.ASM):00218                 CMPA    #32             ;max number of creatures on this level?
D03B 2408             (       COMCRE.ASM):00219                 BHS     CGEN99          ;   yes
                      (       COMCRE.ASM):00220         ;
D03D 3F               (       COMCRE.ASM):00221                 SWI                     ;create a random creature
D03E 07               (       COMCRE.ASM):00222                 FCB     RANDOM          ;   .
D03F 8407             (       COMCRE.ASM):00223                 ANDA    #7              ;(0-7)
D041 8B02             (       COMCRE.ASM):00224                 ADDA    #2              ;(2-9)
D043 6C86             (       COMCRE.ASM):00225                 INC     A,X             ;allow an extra creature of this type
                      (       COMCRE.ASM):00226         ;
D045                  (       COMCRE.ASM):00227         CGEN99  SCHED$  5,Q.MIN         ;re-sched every 5 minutes
D045 CC0508           (           SCHED$):00001                 LDD     #(5*256)+Q.MIN
D048 39               (       COMCRE.ASM):00228                 RTS
                      (       COMCRE.ASM):00229         ;
                      (       COMCRE.ASM):00230         ;
                      (       COMCRE.ASM):00231         ;;;;;        END
                      (    DAGGORATH.ASM):00115                 INCLUDE CRETUR.ASM       ;Creature Movement Routines
                      (       CRETUR.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       CRETUR.ASM):00002         ;  C R E A T U R E   M O V E M E N T   R O U T I N E S
                      (       CRETUR.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       CRETUR.ASM):00004         ;
                      (       CRETUR.ASM):00005         ;  The actions of a creature are governed primarily by
                      (       CRETUR.ASM):00006         ;  what is in the cell with him/her/it:
                      (       CRETUR.ASM):00007         ;
                      (       CRETUR.ASM):00008         ;  1)  Treasures/Magical Objects
                      (       CRETUR.ASM):00009         ;           A creature will pick up whatever is in the cell.
                      (       CRETUR.ASM):00010         ;      If there is more than one object, the creature will
                      (       CRETUR.ASM):00011         ;      pick them up one at a time.  Since the highest priority
                      (       CRETUR.ASM):00012         ;      action for a creature is to gather objects, the human
                      (       CRETUR.ASM):00013         ;      can delay creature attacks by dropping objects.
                      (       CRETUR.ASM):00014         ;
                      (       CRETUR.ASM):00015         ;  2)  Attacking Unlucky Adventurers
                      (       CRETUR.ASM):00016         ;           If a human should happen to be in the same cell as
                      (       CRETUR.ASM):00017         ;      creature, the creature will attack.  Creature attacks will
                      (       CRETUR.ASM):00018         ;      be repeated at "attack" speed (shorter delay times).
                      (       CRETUR.ASM):00019         ;
                      (       CRETUR.ASM):00020         ;  3)  Moving toward Tasty Humans
                      (       CRETUR.ASM):00021         ;             If there is nothing in the cell, the creature will
                      (       CRETUR.ASM):00022         ;      "look" for the human.  If it can see the human, the
                      (       CRETUR.ASM):00023         ;      creature will attempt to close.  The creature will move
                      (       CRETUR.ASM):00024         ;      randomly if it cannot see the human.
                      (       CRETUR.ASM):00025         
                      (       CRETUR.ASM):00026         
                      (       CRETUR.ASM):00027         
                      (       CRETUR.ASM):00028         ;
                      (       CRETUR.ASM):00029         ;  CMOVE:  Creature Movement Task
                      (       CRETUR.ASM):00030         ;
D049 10AE45           (       CRETUR.ASM):00031         CMOVE   LDY     P.TCDTA,U       ;load CCB pointer
D04C 0D2B             (       CRETUR.ASM):00032                 TST     FRZFLG          ;are we "frozen"?
D04E 2622             (       CRETUR.ASM):00033                 BNE     CMOV12          ;   yes!
                      (       CRETUR.ASM):00034         ;
                      (       CRETUR.ASM):00035         ;  Kill Off Dead Creatures
                      (       CRETUR.ASM):00036         ;
D050 E62C             (       CRETUR.ASM):00037                 LDB     P.CCUSE,Y       ;are we still alive?
D052 2601             (       CRETUR.ASM):00038                 BNE     CMOV10          ;   yes
D054 39               (       CRETUR.ASM):00039                 RTS                     ;dead creature - zap the TCB
                      (       CRETUR.ASM):00040         ;
                      (       CRETUR.ASM):00041         ;  Should I pick up objects?
                      (       CRETUR.ASM):00042         ;
D055 A62D             (       CRETUR.ASM):00043         CMOV10  LDA     P.CCTYP,Y       ;what am I?
D057 8106             (       CRETUR.ASM):00044                 CMPA    #6              ;   .
D059 271A             (       CRETUR.ASM):00045                 BEQ     CMOV20          ;   I am a SCORPION!
D05B 810A             (       CRETUR.ASM):00046                 CMPA    #10             ;   .
D05D 2C16             (       CRETUR.ASM):00047                 BGE     CMOV20          ;   I am a WIZZARD!
                      (       CRETUR.ASM):00048         ;
                      (       CRETUR.ASM):00049         ;  Look for Treasures/Objects
                      (       CRETUR.ASM):00050         ;
D05F EC2F             (       CRETUR.ASM):00051                 LDD     P.CCROW,Y       ;our position
D061 0F91             (       CRETUR.ASM):00052                 CLR     OFINDF          ;look for an object
D063 BDCF5B           (       CRETUR.ASM):00053                 JSR     OFIND           ;   .
D066 270D             (       CRETUR.ASM):00054                 BEQ     CMOV20          ;   no objects here
                      (       CRETUR.ASM):00055         ;
                      (       CRETUR.ASM):00056         ;  Pick up an object
                      (       CRETUR.ASM):00057         ;
D068 EC28             (       CRETUR.ASM):00058                 LDD     P.CCOBJ,Y       ;load current object ptr
D06A AF28             (       CRETUR.ASM):00059                 STX     P.CCOBJ,Y       ;new object becomes our first object
D06C ED84             (       CRETUR.ASM):00060                 STD     P.OCPTR,X       ;link new object with rest of list
D06E 6A05             (       CRETUR.ASM):00061                 DEC     P.OCOWN,X       ;mark object as creature owned
D070 3F               (       CRETUR.ASM):00062                 SWI                     ;request immediate update
D071 0E               (       CRETUR.ASM):00063                 FCB     PUPDAT          ;   .
                      (       CRETUR.ASM):00064         ;
D072 7ED10B           (       CRETUR.ASM):00065         CMOV12  JMP     CMOV90          ;done for this turn
                      (       CRETUR.ASM):00066         
                      (       CRETUR.ASM):00067         
                      (       CRETUR.ASM):00068         
                      (       CRETUR.ASM):00069         ;
                      (       CRETUR.ASM):00070         ;  Attack Any Unlucky Adventurers
                      (       CRETUR.ASM):00071         ;
D075 EC2F             (       CRETUR.ASM):00072         CMOV20  LDD     P.CCROW,Y       ;is the player here?
D077 109313           (       CRETUR.ASM):00073                 CMPD    PROW            ;   .
D07A 263E             (       CRETUR.ASM):00074                 BNE     CMOV50          ;   nope
                      (       CRETUR.ASM):00075         ;
D07C A62D             (       CRETUR.ASM):00076                 LDA     P.CCTYP,Y       ;creature type
D07E C6FF             (       CRETUR.ASM):00077                 LDB     #$FF            ;loud
D080 3F               (       CRETUR.ASM):00078                 SWI                     ;   .
D081 1C               (       CRETUR.ASM):00079                 FCB     SOUNDS          ;   .
                      (       CRETUR.ASM):00080         ;
                      (       CRETUR.ASM):00081         ;  Set Player Shielding Parameters
                      (       CRETUR.ASM):00082         ;
D082 CC8080           (       CRETUR.ASM):00083                 LDD     #$8080          ;load minimal shielding values
D085 9E1D             (       CRETUR.ASM):00084                 LDX     PLHAND          ;process left hand
D087 8D1D             (       CRETUR.ASM):00085                 BSR     SHIELD          ;   .
D089 9E1F             (       CRETUR.ASM):00086                 LDX     PRHAND          ;process right hand
D08B 8D19             (       CRETUR.ASM):00087                 BSR     SHIELD          ;   .
D08D 971A             (       CRETUR.ASM):00088                 STA     PMGD            ;store shielding parameters
D08F D71C             (       CRETUR.ASM):00089                 STB     PPHD            ;   .
                      (       CRETUR.ASM):00090         ;
                      (       CRETUR.ASM):00091         ;  Process Actual Attack
                      (       CRETUR.ASM):00092         ;
D091 1F21             (       CRETUR.ASM):00093                 TFR     Y,X             ;creature is the attacker
D093 CE0217           (       CRETUR.ASM):00094                 LDU     #PLRBLK         ;the player is the defender
D096 BDD40E           (       CRETUR.ASM):00095                 JSR     ATTACK          ;drop the hammer!
D099 2B06             (       CRETUR.ASM):00096                 BMI     CMOV30          ;   missed...
                      (       CRETUR.ASM):00097         ;
                      (       CRETUR.ASM):00098         ;
                      (       CRETUR.ASM):00099         ;
                      (       CRETUR.ASM):00100         ;        SOUND$  A$KLK3          ;CLANK!!!
                      (       CRETUR.ASM):00101         ;
D09B 3F               (       CRETUR.ASM):00102                 SWI                     ;CLANK!!!
D09C 1B               (       CRETUR.ASM):00103                 FCB     ISOUND          ;   .
D09D 13               (       CRETUR.ASM):00104                 FCB     A$KLK3          ;   .
D09E BDD443           (       CRETUR.ASM):00105                 JSR     DAMAGE          ;we took a chunk out of him
                      (       CRETUR.ASM):00106         ;
D0A1 3F               (       CRETUR.ASM):00107         CMOV30  SWI                     ;update the heartrate
D0A2 0C               (       CRETUR.ASM):00108                 FCB     HUPDAT          ;   .
D0A3 7ED117           (       CRETUR.ASM):00109                 JMP     CMOV92          ;prepare for next attack
                      (       CRETUR.ASM):00110         ;
                      (       CRETUR.ASM):00111         ;  SHIELD: Local routine to process Shield
                      (       CRETUR.ASM):00112         ;
D0A6 3416             (       CRETUR.ASM):00113         SHIELD  PSHS    A,B,X           ;save regs
D0A8 270E             (       CRETUR.ASM):00114                 BEQ     SHLD99          ;   empty hand!
D0AA A60A             (       CRETUR.ASM):00115                 LDA     P.OCCLS,X       ;load class
D0AC 8103             (       CRETUR.ASM):00116                 CMPA    #K.SHIE         ;is it a shield?
D0AE 2608             (       CRETUR.ASM):00117                 BNE     SHLD99          ;   nope
D0B0 AE06             (       CRETUR.ASM):00118                 LDX     P.OCXXX,X       ;store greater value as return parms
D0B2 ACE4             (       CRETUR.ASM):00119                 CMPX    ,S              ;   . (2022 n.b. original was 0,S)
D0B4 2402             (       CRETUR.ASM):00120                 BHS     SHLD99          ;   current shielding is superior
D0B6 AFE4             (       CRETUR.ASM):00121                 STX     ,S              ;upgrade shielding (2022 n.b. original was 0,S)
D0B8 3596             (       CRETUR.ASM):00122         SHLD99  PULS    A,B,X,PC        ;restore regs/exit
                      (       CRETUR.ASM):00123         
                      (       CRETUR.ASM):00124         
                      (       CRETUR.ASM):00125         
                      (       CRETUR.ASM):00126         ;
                      (       CRETUR.ASM):00127         ;  See if we are vertically/horizontally in line with player
                      (       CRETUR.ASM):00128         ;
D0BA 9113             (       CRETUR.ASM):00129         CMOV50  CMPA    PROW            ;   .
D0BC 260D             (       CRETUR.ASM):00130                 BNE     CMOV52          ;   nope
                      (       CRETUR.ASM):00131         ;
D0BE A6A810           (       CRETUR.ASM):00132                 LDA     P.CCCOL,Y       ;are we west/east of player?
D0C1 C601             (       CRETUR.ASM):00133                 LDB     #1              ;assume we are west of player
D0C3 9014             (       CRETUR.ASM):00134                 SUBA    PCOL            ;   .
D0C5 2B11             (       CRETUR.ASM):00135                 BMI     CMOV60          ;   west of player
D0C7 C603             (       CRETUR.ASM):00136                 LDB     #3              ;east of player
D0C9 200D             (       CRETUR.ASM):00137                 BRA     CMOV60          ;   .
                      (       CRETUR.ASM):00138         ;
D0CB EC2F             (       CRETUR.ASM):00139         CMOV52  LDD     P.CCROW,Y       ;same column as player?
D0CD D114             (       CRETUR.ASM):00140                 CMPB    PCOL            ;   .
D0CF 261B             (       CRETUR.ASM):00141                 BNE     CMOV70          ;   nope
                      (       CRETUR.ASM):00142         ;
D0D1 C602             (       CRETUR.ASM):00143                 LDB     #2              ;assume north
D0D3 9013             (       CRETUR.ASM):00144                 SUBA    PROW            ;   .
D0D5 2B01             (       CRETUR.ASM):00145                 BMI     CMOV60          ;   north of player
D0D7 5F               (       CRETUR.ASM):00146                 CLRB                    ;south of player
                      (       CRETUR.ASM):00147         ;
                      (       CRETUR.ASM):00148         ;  In-Line with Player - can we see him?
                      (       CRETUR.ASM):00149         ;
D0D8 D78A             (       CRETUR.ASM):00150         CMOV60  STB     DIR             ;store the direction
D0DA EC2F             (       CRETUR.ASM):00151                 LDD     P.CCROW,Y       ;load current position
                      (       CRETUR.ASM):00152         ;
D0DC 8D60             (       CRETUR.ASM):00153         CMOV62  BSR     STEPOK          ;take a tentative step
D0DE 260C             (       CRETUR.ASM):00154                 BNE     CMOV70          ;   loser - we hit a wall!
D0E0 109313           (       CRETUR.ASM):00155                 CMPD    PROW            ;player here?
D0E3 26F7             (       CRETUR.ASM):00156                 BNE     CMOV62          ;   not here - keep looking
                      (       CRETUR.ASM):00157         ;
                      (       CRETUR.ASM):00158         ;  Saw the player!
                      (       CRETUR.ASM):00159         ;
D0E5 D68A             (       CRETUR.ASM):00160                 LDB     DIR             ;load direction of travel
D0E7 E72E             (       CRETUR.ASM):00161                 STB     P.CCDIR,Y       ;face creature toward player
D0E9 5F               (       CRETUR.ASM):00162                 CLRB                    ;no relative change in direction
D0EA 201D             (       CRETUR.ASM):00163                 BRA     CMOV78          ;move toward player if possible
                      (       CRETUR.ASM):00164         
                      (       CRETUR.ASM):00165         
                      (       CRETUR.ASM):00166         
                      (       CRETUR.ASM):00167         ;
                      (       CRETUR.ASM):00168         ;  Select Random Movement Sequence
                      (       CRETUR.ASM):00169         ;
D0EC 8ED11C           (       CRETUR.ASM):00170         CMOV70  LDX     #MOVTAB         ;assume fwd/lt/rt sequence
D0EF 3F               (       CRETUR.ASM):00171                 SWI                     ;use other sequence?
D0F0 07               (       CRETUR.ASM):00172                 FCB     RANDOM          ;   .
D0F1 4D               (       CRETUR.ASM):00173                 TSTA                    ;   .
D0F2 2B02             (       CRETUR.ASM):00174                 BMI     CMOV72          ;   nope
D0F4 3003             (       CRETUR.ASM):00175                 LEAX    3,X             ;use fwd/rt/lt sequence
                      (       CRETUR.ASM):00176         ;
                      (       CRETUR.ASM):00177         ;  Attempt to change directions 25% of the time
                      (       CRETUR.ASM):00178         ;
D0F6 8403             (       CRETUR.ASM):00179         CMOV72  ANDA    #3              ;use 2 LSBits of random for that 25%
D0F8 2602             (       CRETUR.ASM):00180                 BNE     CMOV74          ;   not this time
D0FA 3001             (       CRETUR.ASM):00181                 LEAX    1,X             ;(LT/RT) or (RT/LT) before FWD (magic!)
                      (       CRETUR.ASM):00182         ;
                      (       CRETUR.ASM):00183         ;  Try the preferential directions
                      (       CRETUR.ASM):00184         ;
D0FC 8603             (       CRETUR.ASM):00185         CMOV74  LDA     #3              ;loop count
D0FE E680             (       CRETUR.ASM):00186         CMOV76  LDB     ,X+             ;load next relative change
D100 8D55             (       CRETUR.ASM):00187                 BSR     CWALK           ;attempt to move
D102 2707             (       CRETUR.ASM):00188                 BEQ     CMOV90          ;   winner!
D104 4A               (       CRETUR.ASM):00189                 DECA                    ;try again
D105 26F7             (       CRETUR.ASM):00190                 BNE     CMOV76          ;   .
                      (       CRETUR.ASM):00191         ;
D107 C602             (       CRETUR.ASM):00192                 LDB     #2              ;finally try to back out
D109 8D4C             (       CRETUR.ASM):00193         CMOV78  BSR     CWALK           ;don't care if we can't move
                      (       CRETUR.ASM):00194         ;
D10B A626             (       CRETUR.ASM):00195         CMOV90  LDA     P.CCTMV,Y       ;assume movement delay time
                      (       CRETUR.ASM):00196         ;
D10D AE2F             (       CRETUR.ASM):00197                 LDX     P.CCROW,Y       ;same square as player?
D10F 9C13             (       CRETUR.ASM):00198                 CMPX    PROW            ;   .
D111 2606             (       CRETUR.ASM):00199                 BNE     CMOV98          ;   nope
D113 3F               (       CRETUR.ASM):00200                 SWI                     ;force update
D114 0E               (       CRETUR.ASM):00201                 FCB     PUPDAT          ;   .
D115 0FB5             (       CRETUR.ASM):00202                 CLR     NEWLUK          ;no need for delayed update
                      (       CRETUR.ASM):00203         ;
D117 A627             (       CRETUR.ASM):00204         CMOV92  LDA     P.CCTAT,Y       ;use.attack delay time
D119 C604             (       CRETUR.ASM):00205         CMOV98  LDB     #Q.TEN          ;into the TENTH queue
D11B 39               (       CRETUR.ASM):00206         CMOV99  RTS                     ;that's all folks!!!
                      (       CRETUR.ASM):00207         ;
                      (       CRETUR.ASM):00208         ;  Preferential Random Movement Table
                      (       CRETUR.ASM):00209         ;
D11C 00               (       CRETUR.ASM):00210         MOVTAB  FCB     0               ;forward
D11D 03               (       CRETUR.ASM):00211                 FCB     3               ;left
D11E 01               (       CRETUR.ASM):00212                 FCB     1               ;right
                      (       CRETUR.ASM):00213         ;
D11F 00               (       CRETUR.ASM):00214                 FCB     0               ;forward
D120 01               (       CRETUR.ASM):00215                 FCB     1               ;right
D121 03               (       CRETUR.ASM):00216                 FCB     3               ;left
D122 00               (       CRETUR.ASM):00217                 FCB     0               ;forward
                      (       CRETUR.ASM):00218         
                      (       CRETUR.ASM):00219         
                      (       CRETUR.ASM):00220         
                      (       CRETUR.ASM):00221         ;
                      (       CRETUR.ASM):00222         ;  STEP:  Take a step in the current direction
                      (       CRETUR.ASM):00223         ;
                      (       CRETUR.ASM):00224         ;  Inputs:
                      (       CRETUR.ASM):00225         ;       A - row position
                      (       CRETUR.ASM):00226         ;       B - column position
                      (       CRETUR.ASM):00227         ;       DIR - direction to move
                      (       CRETUR.ASM):00228         ;
                      (       CRETUR.ASM):00229         ;  Returns:
                      (       CRETUR.ASM):00230         ;       A - new position
                      (       CRETUR.ASM):00231         ;       B - new position
                      (       CRETUR.ASM):00232         ;       X - cell address
                      (       CRETUR.ASM):00233         ;
D123 3406             (       CRETUR.ASM):00234         STEP    PSHS    A,B             ;stack row/col
D125 D68A             (       CRETUR.ASM):00235                 LDB     DIR             ;load current direction
D127 C403             (       CRETUR.ASM):00236                 ANDB    #%00000011      ;MOD 4
D129 58               (       CRETUR.ASM):00237                 LSLB                    ;*2 for word offset
D12A 8ED136           (       CRETUR.ASM):00238                 LDX     #STPTAB         ;load base addr
D12D EC85             (       CRETUR.ASM):00239                 LDD     B,X             ;load row/col offsets
D12F ABE0             (       CRETUR.ASM):00240                 ADDA    ,S+             ;offset row
D131 EBE0             (       CRETUR.ASM):00241                 ADDB    ,S+             ;offset column
D133 7ECC83           (       CRETUR.ASM):00242                 JMP     MAP32           ;calculate cell addr
                      (       CRETUR.ASM):00243         ;
                      (       CRETUR.ASM):00244         ;  Row/Column Modification Table
                      (       CRETUR.ASM):00245         ;
D136 FF00             (       CRETUR.ASM):00246         STPTAB  FCB     -1,0            ;north
D138 0001             (       CRETUR.ASM):00247                 FCB     0,1             ;east
D13A 0100             (       CRETUR.ASM):00248                 FCB     1,0             ;south
D13C 00FF             (       CRETUR.ASM):00249                 FCB     0,-1            ;west
                      (       CRETUR.ASM):00250         
                      (       CRETUR.ASM):00251         
                      (       CRETUR.ASM):00252         
                      (       CRETUR.ASM):00253         ;
                      (       CRETUR.ASM):00254         ;  STEPOK: Attempt to Take a Step
                      (       CRETUR.ASM):00255         ;
                      (       CRETUR.ASM):00256         ;  Inputs:
                      (       CRETUR.ASM):00257         ;       A - Row
                      (       CRETUR.ASM):00258         ;       B - Column
                      (       CRETUR.ASM):00259         ;       DIR - direction
                      (       CRETUR.ASM):00260         ;  Returns:
                      (       CRETUR.ASM):00261         ;       A - Possibly Updated Row
                      (       CRETUR.ASM):00262         ;       B - Possibly Updated Column
                      (       CRETUR.ASM):00263         ;       X - Possibly Updated to Cell Addr
                      (       CRETUR.ASM):00264         ;       Z - Condition code set if step is legal
                      (       CRETUR.ASM):00265         ;
D13E 3476             (       CRETUR.ASM):00266         STEPOK  PSHS    A,B,X,Y,U       ;save regs
D140 8DE1             (       CRETUR.ASM):00267                 BSR     STEP            ;take a tentative step
D142 BDCC96           (       CRETUR.ASM):00268                 JSR     BORDER          ;perform border check
D145 260E             (       CRETUR.ASM):00269                 BNE     STOK99          ;   loser - o.b.
                      (       CRETUR.ASM):00270         ;
D147 1F03             (       CRETUR.ASM):00271                 TFR     D,U             ;save updated row/col
D149 A684             (       CRETUR.ASM):00272                 LDA     ,X              ;load cell features
D14B 4C               (       CRETUR.ASM):00273                 INCA                    ;solid walls ($FF)?
D14C 2706             (       CRETUR.ASM):00274                 BEQ     STOK98          ;   yes - loser
                      (       CRETUR.ASM):00275         ;
D14E EFE4             (       CRETUR.ASM):00276                 STU     ,S              ;update position (2022 n.b. original was 0,S)
D150 AF62             (       CRETUR.ASM):00277                 STX     2,S             ;update cell addr
D152 8601             (       CRETUR.ASM):00278                 LDA     #1              ;insure Z-condition code will be set
                      (       CRETUR.ASM):00279         ;
D154 4A               (       CRETUR.ASM):00280         STOK98  DECA                    ;set/reset Z-condition code
D155 35F6             (       CRETUR.ASM):00281         STOK99  PULS    A,B,X,Y,U,PC    ;restore regs/exit
                      (       CRETUR.ASM):00282         
                      (       CRETUR.ASM):00283         
                      (       CRETUR.ASM):00284         
                      (       CRETUR.ASM):00285         ;
                      (       CRETUR.ASM):00286         ;  CWALK: Attempt to move creature in desired direction
                      (       CRETUR.ASM):00287         ;
                      (       CRETUR.ASM):00288         ;  Inputs:
                      (       CRETUR.ASM):00289         ;       B - relative change in direction
                      (       CRETUR.ASM):00290         ;       Y - pointer to CCB
                      (       CRETUR.ASM):00291         ;  Returns:
                      (       CRETUR.ASM):00292         ;       P.CCDIR,Y - modified if CWALK wins
                      (       CRETUR.ASM):00293         ;       P.CCROW,Y - modified if CWALK wins
                      (       CRETUR.ASM):00294         ;       P.CCCOL,Y - modified if CWALK wins
                      (       CRETUR.ASM):00295         ;       Z - Condition code set if CWALK wins
                      (       CRETUR.ASM):00296         ;  Destroys:
                      (       CRETUR.ASM):00297         ;       DIR,ROW,COL
                      (       CRETUR.ASM):00298         ;
D157 3416             (       CRETUR.ASM):00299         CWALK   PSHS    A,B,X           ;save some regs
D159 EB2E             (       CRETUR.ASM):00300                 ADDB    P.CCDIR,Y       ;effect relative change in direction
D15B C403             (       CRETUR.ASM):00301                 ANDB    #3              ;MOD 4
D15D D78A             (       CRETUR.ASM):00302                 STB     DIR             ;   .
                      (       CRETUR.ASM):00303         ;
                      (       CRETUR.ASM):00304         ;  Is the next cell occupiable?
                      (       CRETUR.ASM):00305         ;
D15F EC2F             (       CRETUR.ASM):00306                 LDD     P.CCROW,Y       ;load current position
D161 8DDB             (       CRETUR.ASM):00307                 BSR     STEPOK          ;take a tentative step
D163 263C             (       CRETUR.ASM):00308                 BNE     CWLK99          ;   loser
                      (       CRETUR.ASM):00309         ;
                      (       CRETUR.ASM):00310         ;  Somebody here already?
                      (       CRETUR.ASM):00311         ;
D165 BDCF8A           (       CRETUR.ASM):00312                 JSR     CFIND           ;use updated coordinates
D168 2637             (       CRETUR.ASM):00313                 BNE     CWLK99          ;   occupied cell - loser
                      (       CRETUR.ASM):00314         ;
D16A ED2F             (       CRETUR.ASM):00315                 STD     P.CCROW,Y       ;update creature position
D16C D68A             (       CRETUR.ASM):00316                 LDB     DIR             ;update direction
D16E E72E             (       CRETUR.ASM):00317                 STB     P.CCDIR,Y       ;   .
                      (       CRETUR.ASM):00318         ;
                      (       CRETUR.ASM):00319         ;  Need to update screen?
                      (       CRETUR.ASM):00320         ;
D170 EC2F             (       CRETUR.ASM):00321                 LDD     P.CCROW,Y       ;load position
                      (       CRETUR.ASM):00322         ;
D172 9013             (       CRETUR.ASM):00323                 SUBA    PROW            ;absolute row difference
D174 2A01             (       CRETUR.ASM):00324                 BPL     CWLK10          ;   .
D176 40               (       CRETUR.ASM):00325                 NEGA                    ;   .
D177 D014             (       CRETUR.ASM):00326         CWLK10  SUBB    PCOL            ;absolute column difference
D179 2A01             (       CRETUR.ASM):00327                 BPL     CWLK12          ;   .
D17B 50               (       CRETUR.ASM):00328                 NEGB                    ;   .
                      (       CRETUR.ASM):00329         
                      (       CRETUR.ASM):00330         ;
D17C D7C1             (       CRETUR.ASM):00331         CWLK12  STB     T0              ;store column difference
D17E 91C1             (       CRETUR.ASM):00332                 CMPA    T0              ;bigger difference into ACCA
D180 2C02             (       CRETUR.ASM):00333                 BGE     CWLK20          ;   .
D182 1E89             (       CRETUR.ASM):00334                 EXG     A,B             ;   .
                      (       CRETUR.ASM):00335         ;
D184 97C1             (       CRETUR.ASM):00336         CWLK20  STA     T0              ;store big difference
D186 8108             (       CRETUR.ASM):00337                 CMPA    #8              ;greater than 8?
D188 2E16             (       CRETUR.ASM):00338                 BGT     CWLK92          ;   no update/no sounds
                      (       CRETUR.ASM):00339         ;
D18A C102             (       CRETUR.ASM):00340                 CMPB    #2              ;check little difference
D18C 2E12             (       CRETUR.ASM):00341                 BGT     CWLK92          ;   no update/no sounds
                      (       CRETUR.ASM):00342         
                      (       CRETUR.ASM):00343         
                      (       CRETUR.ASM):00344         
                      (       CRETUR.ASM):00345         ;
                      (       CRETUR.ASM):00346         ;  Should we make a sound?
                      (       CRETUR.ASM):00347         ;
D18E 3F               (       CRETUR.ASM):00348                 SWI                     ;make sounds 50% of the time
D18F 07               (       CRETUR.ASM):00349                 FCB     RANDOM          ;   .
D190 8501             (       CRETUR.ASM):00350                 BITA    #BIT0           ;   .
D192 270A             (       CRETUR.ASM):00351                 BEQ     CWLK90          ;   silence...
                      (       CRETUR.ASM):00352         ;
                      (       CRETUR.ASM):00353         ;  Creatures are louder as they approach
                      (       CRETUR.ASM):00354         ;
D194 96C1             (       CRETUR.ASM):00355                 LDA     T0              ;use range to attenuate volume
D196 C61F             (       CRETUR.ASM):00356                 LDB     #31             ;   .
D198 3D               (       CRETUR.ASM):00357                 MUL                     ;   .
D199 53               (       CRETUR.ASM):00358                 COMB                    ;   .
D19A A62D             (       CRETUR.ASM):00359                 LDA     P.CCTYP,Y       ;creature type as index
D19C 3F               (       CRETUR.ASM):00360                 SWI                     ;   .
D19D 1C               (       CRETUR.ASM):00361                 FCB     SOUNDS          ;   .
                      (       CRETUR.ASM):00362         ;
D19E 0AB5             (       CRETUR.ASM):00363         CWLK90  DEC     NEWLUK          ;request screen update
D1A0 4F               (       CRETUR.ASM):00364         CWLK92  CLRA                    ;winner - set Z-condition code
                      (       CRETUR.ASM):00365         ;
D1A1 3596             (       CRETUR.ASM):00366         CWLK99  PULS    A,B,X,PC        ;restore regs/go home
                      (       CRETUR.ASM):00367         ;
                      (       CRETUR.ASM):00368         ;;;;;        END
                      (    DAGGORATH.ASM):00116                 INCLUDE COMPLR.ASM       ;Common Player Routines
                      (       COMPLR.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMPLR.ASM):00002         ;  C O M M O N   P L A Y E R   R O U T I N E S
                      (       COMPLR.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMPLR.ASM):00004         ;
                      (       COMPLR.ASM):00005                 NAM     COMPLR
                      (       COMPLR.ASM):00006         ;     LIBRY  CD
                      (       COMPLR.ASM):00007         ;        XDEF    BURNER,LUKNEW,HSLOW
                      (       COMPLR.ASM):00008         ;
                      (       COMPLR.ASM):00009         ;        XREF    ASRD6,MAPPER,ADJTAB,GENTAB,T.TOR05
                      (       COMPLR.ASM):00010         ;        PSCT
                      (       COMPLR.ASM):00011         ;
                      (       COMPLR.ASM):00012         ;
                      (       COMPLR.ASM):00013         ;
                      (       COMPLR.ASM):00014         ;  BURNER: Torch Burn-Time Task
                      (       COMPLR.ASM):00015         ;
D1A3 DE24             (       COMPLR.ASM):00016         BURNER  LDU     PTORCH          ;load ptr to torch OCB
D1A5 271D             (       COMPLR.ASM):00017                 BEQ     BURN99          ;   no torch!
                      (       COMPLR.ASM):00018         ;
                      (       COMPLR.ASM):00019         ;  Decrement timer
                      (       COMPLR.ASM):00020         ;
D1A7 A646             (       COMPLR.ASM):00021                 LDA     P.OCXXX,U       ;load timer value
D1A9 2719             (       COMPLR.ASM):00022                 BEQ     BURN99          ;   dead torch
D1AB 4A               (       COMPLR.ASM):00023                 DECA                    ;decrement timer
D1AC A746             (       COMPLR.ASM):00024                 STA     P.OCXXX,U       ;update timer
D1AE 8105             (       COMPLR.ASM):00025                 CMPA    #5              ;dead torch at FIVE minutes to go
D1B0 2E06             (       COMPLR.ASM):00026                 BGT     BURN10          ;   still ok
                      (       COMPLR.ASM):00027         ;
                      (       COMPLR.ASM):00028         ;  Torch just died...
                      (       COMPLR.ASM):00029         ;
D1B2 C618             (       COMPLR.ASM):00030                 LDB     #T.TOR5         ;mark as dead
D1B4 E749             (       COMPLR.ASM):00031                 STB     P.OCTYP,U       ;   .
D1B6 6F4B             (       COMPLR.ASM):00032                 CLR     P.OCREV,U       ;insure it shows up as dead
                      (       COMPLR.ASM):00033         ;
                      (       COMPLR.ASM):00034         ;  Adjust regular/magic light as necessary
                      (       COMPLR.ASM):00035         ;
D1B8 A147             (       COMPLR.ASM):00036         BURN10  CMPA    P.OCXXX+1,U     ;adjust regular light?
D1BA 2C02             (       COMPLR.ASM):00037                 BGE     BURN20          ;   nope
D1BC A747             (       COMPLR.ASM):00038                 STA     P.OCXXX+1,U     ;update regular light
                      (       COMPLR.ASM):00039         ;
D1BE A148             (       COMPLR.ASM):00040         BURN20  CMPA    P.OCXXX+2,U     ;adjust magic light?
D1C0 2C02             (       COMPLR.ASM):00041                 BGE     BURN99          ;   nope
D1C2 A748             (       COMPLR.ASM):00042                 STA     P.OCXXX+2,U     ;adjust magic light
D1C4 0AB5             (       COMPLR.ASM):00043         BURN99  DEC     NEWLUK          ;request delayed screen update
                      (       COMPLR.ASM):00044         ;
                      (       COMPLR.ASM):00045                 SCHED$  1,Q.MIN         ;once per minute
D1C6 CC0108           (           SCHED$):00001                 LDD     #(1*256)+Q.MIN
D1C9 39               (       COMPLR.ASM):00046                 RTS
                      (       COMPLR.ASM):00047         
                      (       COMPLR.ASM):00048         
                      (       COMPLR.ASM):00049         
                      (       COMPLR.ASM):00050         ;
                      (       COMPLR.ASM):00051         ;  LUKNEW: Task to Update the Screen if necessary
                      (       COMPLR.ASM):00052         ;
D1CA 0DB5             (       COMPLR.ASM):00053         LUKNEW  TST     NEWLUK          ;did a creature request an update?
D1CC 2607             (       COMPLR.ASM):00054                 BNE     LNEW10          ;   yes
                      (       COMPLR.ASM):00055         ;
D1CE 8ECDBA           (       COMPLR.ASM):00056                 LDX     #MAPPER         ;is the map display up?
D1D1 9CB2             (       COMPLR.ASM):00057                 CMPX    DSPMOD          ;   .
D1D3 2604             (       COMPLR.ASM):00058                 BNE     LNEW99          ;   nope
                      (       COMPLR.ASM):00059         ;
D1D5 0FB5             (       COMPLR.ASM):00060         LNEW10  CLR     NEWLUK          ;reset flag
D1D7 3F               (       COMPLR.ASM):00061                 SWI                     ;update the screen
D1D8 0E               (       COMPLR.ASM):00062                 FCB     PUPDAT          ;   .
D1D9                  (       COMPLR.ASM):00063         LNEW99  SCHED$  3,Q.TEN         ;twice per second
D1D9 CC0304           (           SCHED$):00001                 LDD     #(3*256)+Q.TEN
D1DC 39               (       COMPLR.ASM):00064                 RTS
                      (       COMPLR.ASM):00065         
                      (       COMPLR.ASM):00066         
                      (       COMPLR.ASM):00067         
                      (       COMPLR.ASM):00068         ;
                      (       COMPLR.ASM):00069         ;  HSLOW: Player Damage Recovery
                      (       COMPLR.ASM):00070         ;
D1DD 4F               (       COMPLR.ASM):00071         HSLOW   CLRA                    ;reset accumulator
D1DE 5F               (       COMPLR.ASM):00072                 CLRB                    ;   .
D1DF 9321             (       COMPLR.ASM):00073                 SUBD    PDAM            ;recover 1/64th of damage
D1E1 BDD3B0           (       COMPLR.ASM):00074                 JSR     ASRD6           ;   .
D1E4 D321             (       COMPLR.ASM):00075                 ADDD    PDAM            ;-(pdmage/64) + pdmage
D1E6 2E02             (       COMPLR.ASM):00076                 BGT     HSLOW2          ;still damage left
                      (       COMPLR.ASM):00077         ;
D1E8 4F               (       COMPLR.ASM):00078         HSLOW1  CLRA                    ;can't have negative damage
D1E9 5F               (       COMPLR.ASM):00079                 CLRB                    ;   .
D1EA DD21             (       COMPLR.ASM):00080         HSLOW2  STD     PDAM            ;update damage counter
D1EC 3F               (       COMPLR.ASM):00081                 SWI                     ;update the heart rate
D1ED 0C               (       COMPLR.ASM):00082                 FCB     HUPDAT          ;   .
                      (       COMPLR.ASM):00083         ;
                      (       COMPLR.ASM):00084         ;  Heartrate determines execution frequency
                      (       COMPLR.ASM):00085         ;
D1EE 96AF             (       COMPLR.ASM):00086                 LDA     HEARTR          ;delay time
D1F0 C602             (       COMPLR.ASM):00087                 LDB     #Q.JIF          ;jiffy queue
D1F2 39               (       COMPLR.ASM):00088                 RTS
                      (       COMPLR.ASM):00089         ;
                      (       COMPLR.ASM):00090         ;;;;;        END
                      (    DAGGORATH.ASM):00117                 INCLUDE HUMAN.ASM        ;Human Interface Module
                      (        HUMAN.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (        HUMAN.ASM):00002         ;  H U M A N   I N T E R F A C E   M O D U L E
                      (        HUMAN.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (        HUMAN.ASM):00004         ;
                      (        HUMAN.ASM):00005         ;  PLAYER: Keyboard Input/Autoplay Task
                      (        HUMAN.ASM):00006         ;
                      (        HUMAN.ASM):00007         ;       This task takes its input from the keyboard
                      (        HUMAN.ASM):00008         ;       or from the AUTOPLAY tables.  A character at
                      (        HUMAN.ASM):00009         ;       a time is fed to the subroutine HUMAN.  This
                      (        HUMAN.ASM):00010         ;       task runs as often as possible (delay: 1 jiffy).
                      (        HUMAN.ASM):00011         ;
D1F3 0D77             (        HUMAN.ASM):00012         PLAYER  TST     AUTFLG          ;autoplay?
D1F5 265B             (        HUMAN.ASM):00013                 BNE     PLAY20          ;   yes
                      (        HUMAN.ASM):00014         ;
                      (        HUMAN.ASM):00015         ;  Process Keyboard Buffer
                      (        HUMAN.ASM):00016         ;
D1F7                  (        HUMAN.ASM):00017         PLAY10  
                      (        HUMAN.ASM):00018                 ; NAB - check for joystick input.
                      (        HUMAN.ASM):00019         
                      (        HUMAN.ASM):00020                 ; button
                      (        HUMAN.ASM):00021                 ;LDA     65280
                      (        HUMAN.ASM):00022                 ;CMPA    #254
                      (        HUMAN.ASM):00023                 ;BNE     NOMOVE
                      (        HUMAN.ASM):00024         
D1F7 AD9FA00A         (        HUMAN.ASM):00025                 JSR     [$A00A]         ; BASIC joystick reading routine.
D1FB B6015B           (        HUMAN.ASM):00026                 LDA     $015B           ; Right joystick y-axis
D1FE 810A             (        HUMAN.ASM):00027                 CMPA    #10
D200 2206             (        HUMAN.ASM):00028                 BHI     NOMOVEFORWARD
                      (        HUMAN.ASM):00029         
                      (        HUMAN.ASM):00030                 ; Move forward
D202 BDD711           (        HUMAN.ASM):00031                 JSR     PMOVEFORWARD
D205 7ED226           (        HUMAN.ASM):00032                 JMP     NOMOVE
                      (        HUMAN.ASM):00033         
D208                  (        HUMAN.ASM):00034         NOMOVEFORWARD
D208 8132             (        HUMAN.ASM):00035                 CMPA    #50
D20A 2506             (        HUMAN.ASM):00036                 BLO     NOMOVEBACKWARD
                      (        HUMAN.ASM):00037         
                      (        HUMAN.ASM):00038                 ; Move backward
D20C BDD71E           (        HUMAN.ASM):00039                 JSR     PMOVEBACKWARD
D20F 7ED226           (        HUMAN.ASM):00040                 JMP     NOMOVE
                      (        HUMAN.ASM):00041         
D212                  (        HUMAN.ASM):00042         NOMOVEBACKWARD
D212 B6015A           (        HUMAN.ASM):00043                 LDA     $015A           ; Right joystick x-axis
D215 810A             (        HUMAN.ASM):00044                 CMPA    #10
D217 2206             (        HUMAN.ASM):00045                 BHI     NOMOVELEFT
                      (        HUMAN.ASM):00046         
                      (        HUMAN.ASM):00047                 ; Move left
D219 BDD684           (        HUMAN.ASM):00048                 JSR PMOVELEFT
D21C 7ED226           (        HUMAN.ASM):00049                 JMP NOMOVE
                      (        HUMAN.ASM):00050         
D21F                  (        HUMAN.ASM):00051         NOMOVELEFT
D21F 8132             (        HUMAN.ASM):00052                 CMPA    #50
D221 2503             (        HUMAN.ASM):00053                 BLO     NOMOVE
                      (        HUMAN.ASM):00054         
                      (        HUMAN.ASM):00055                 ; Move right
D223 BDD68F           (        HUMAN.ASM):00056                 JSR     PMOVERIGHT
                      (        HUMAN.ASM):00057         
D226                  (        HUMAN.ASM):00058         NOMOVE
                      (        HUMAN.ASM):00059                 ; NAB - END check for joystick input.
                      (        HUMAN.ASM):00060         
                      (        HUMAN.ASM):00061         
D226 BDC32D           (        HUMAN.ASM):00062                 JSR     KBDGET          ;get the next char
D229 4D               (        HUMAN.ASM):00063                 TSTA                    ;check for nulls
D22A 2753             (        HUMAN.ASM):00064                 BEQ     PLAY99          ;   NULL means we are done
                      (        HUMAN.ASM):00065         ;
D22C 0D28             (        HUMAN.ASM):00066                 TST     FAINT           ;did we faint?
D22E 26C7             (        HUMAN.ASM):00067                 BNE     PLAY10          ;   yes - just eat chars
                      (        HUMAN.ASM):00068         ;
                      (        HUMAN.ASM):00069         ;  Convert from ASCII to Internal Codes
                      (        HUMAN.ASM):00070         ;
D230 8120             (        HUMAN.ASM):00071                 CMPA    #C.SP           ;space?
D232 2718             (        HUMAN.ASM):00072                 BEQ     PLAY14          ;   yes
                      (        HUMAN.ASM):00073         ;
D234 C61F             (        HUMAN.ASM):00074                 LDB     #I.CR           ;assume carriage return
D236 810D             (        HUMAN.ASM):00075                 CMPA    #C.CR           ;   .
D238 270F             (        HUMAN.ASM):00076                 BEQ     PLAY12          ;   was a carriage return
                      (        HUMAN.ASM):00077         ;
D23A C624             (        HUMAN.ASM):00078                 LDB     #I.BS           ;assume backspace
D23C 8108             (        HUMAN.ASM):00079                 CMPA    #C.BS           ;   .
D23E 2709             (        HUMAN.ASM):00080                 BEQ     PLAY12          ;   was a backspace
                      (        HUMAN.ASM):00081         ;
D240 5F               (        HUMAN.ASM):00082                 CLRB                    ;non-alpha becomes a space
D241 8141             (        HUMAN.ASM):00083                 CMPA    #'A'            ;uppercase-A
D243 2504             (        HUMAN.ASM):00084                 BLO     PLAY12          ;   non-alpha
D245 815A             (        HUMAN.ASM):00085                 CMPA    #'Z'            ;uppercase-Z
D247 2303             (        HUMAN.ASM):00086                 BLS     PLAY14          ;   was alpha
                      (        HUMAN.ASM):00087         ;
D249 1F98             (        HUMAN.ASM):00088         PLAY12  TFR     B,A             ;replace original character
D24B 8C               (        HUMAN.ASM):00089                 FCB     SKIP2           ;   (use full 8 bits)
D24C 841F             (        HUMAN.ASM):00090         PLAY14  ANDA    #$1F            ;use lower 5-bits
D24E 8D33             (        HUMAN.ASM):00091                 BSR     HUMAN           ;process the char
D250 20A5             (        HUMAN.ASM):00092                 BRA     PLAY10          ;loop
                      (        HUMAN.ASM):00093         
                      (        HUMAN.ASM):00094         
                      (        HUMAN.ASM):00095         
                      (        HUMAN.ASM):00096         ;
                      (        HUMAN.ASM):00097         ;  Process Autoplay Commands
                      (        HUMAN.ASM):00098         ;
D252 109E0D           (        HUMAN.ASM):00099         PLAY20  LDY     AUTPTR          ;load ptr to next command
D255 E6A0             (        HUMAN.ASM):00100                 LDB     ,Y+             ;load token count
D257 2A07             (        HUMAN.ASM):00101                 BPL     PLAY30          ;   commands still left
                      (        HUMAN.ASM):00102         ;
D259 3F               (        HUMAN.ASM):00103                 SWI                     ;otherwise hang around for awhile
D25A 10               (        HUMAN.ASM):00104                 FCB     WAIT            ;   .
D25B 3F               (        HUMAN.ASM):00105                 SWI                     ;   .
D25C 10               (        HUMAN.ASM):00106                 FCB     WAIT            ;   .
D25D 7EC000           (        HUMAN.ASM):00107                 JMP     DEMO            ;then restart the whole shebang!!!
                      (        HUMAN.ASM):00108         ;
                      (        HUMAN.ASM):00109         ;  Feed next autoplay command to HUMAN
                      (        HUMAN.ASM):00110         ;
D260 AEA1             (        HUMAN.ASM):00111         PLAY30  LDX     ,Y++            ;load next token string ptr
D262 CE0361           (        HUMAN.ASM):00112                 LDU     #OBJSTR+1       ;buffer addr
D265 3F               (        HUMAN.ASM):00113                 SWI                     ;expand the 5-bit string
D266 06               (        HUMAN.ASM):00114                 FCB     EXPAN0          ;   .
D267 3341             (        HUMAN.ASM):00115                 LEAU    1,U             ;advance past class byte
D269 3F               (        HUMAN.ASM):00116                 SWI                     ;delay between words
D26A 10               (        HUMAN.ASM):00117                 FCB     WAIT            ;   .
D26B 8C               (        HUMAN.ASM):00118                 FCB     SKIP2           ;   .
                      (        HUMAN.ASM):00119         ;
D26C 8D15             (        HUMAN.ASM):00120         PLAY40  BSR     HUMAN           ;process the char
D26E A6C0             (        HUMAN.ASM):00121                 LDA     ,U+             ;load next char
D270 2AFA             (        HUMAN.ASM):00122                 BPL     PLAY40          ;   valid chars goto HUMAN
                      (        HUMAN.ASM):00123         ;
D272 4F               (        HUMAN.ASM):00124                 CLRA                    ;terminate tokens with spaces
D273 8D0E             (        HUMAN.ASM):00125                 BSR     HUMAN           ;   .
                      (        HUMAN.ASM):00126         ;
D275 5A               (        HUMAN.ASM):00127                 DECB                    ;decrement token count
D276 26E8             (        HUMAN.ASM):00128                 BNE     PLAY30          ;   until no more tokens
                      (        HUMAN.ASM):00129         ;
D278 861F             (        HUMAN.ASM):00130         PLAY50  LDA     #I.CR           ;terminate commands with return
D27A 8D07             (        HUMAN.ASM):00131                 BSR     HUMAN           ;   .
D27C 109F0D           (        HUMAN.ASM):00132                 STY     AUTPTR          ;update ptr
                      (        HUMAN.ASM):00133         ;
D27F                  (        HUMAN.ASM):00134         PLAY99  SCHED$  1,Q.JIF         ;once per jiffy
D27F CC0102           (           SCHED$):00001                 LDD     #(1*256)+Q.JIF
D282 39               (        HUMAN.ASM):00135                 RTS
                      (        HUMAN.ASM):00136         
                      (        HUMAN.ASM):00137         
                      (        HUMAN.ASM):00138         
                      (        HUMAN.ASM):00139         ;
                      (        HUMAN.ASM):00140         ;  HUMAN: Process Character Input/Command Dispatch
                      (        HUMAN.ASM):00141         ;
                      (        HUMAN.ASM):00142         ;  Inputs:
                      (        HUMAN.ASM):00143         ;       A - Char to be processed
                      (        HUMAN.ASM):00144         ;  Returns:
                      (        HUMAN.ASM):00145         ;       LINBUF - Char buffered
                      (        HUMAN.ASM):00146         ;       LINPTR - updated
                      (        HUMAN.ASM):00147         ;
                      (        HUMAN.ASM):00148         ;  Notes:
                      (        HUMAN.ASM):00149         ;       This routine is reponsible for maintaining the
                      (        HUMAN.ASM):00150         ;       primary text display.  It handles character echoing
                      (        HUMAN.ASM):00151         ;       erasing deleted characters, and prompting the player.
                      (        HUMAN.ASM):00152         ;       As characters are received, they are buffered until
                      (        HUMAN.ASM):00153         ;       a line terminator (carriage return) is seen.  This
                      (        HUMAN.ASM):00154         ;       routine will atempt to dispatch to the proper command
                      (        HUMAN.ASM):00155         ;       handler based on the first TOKEN in the line buffer.
                      (        HUMAN.ASM):00156         ;
D283 3476             (        HUMAN.ASM):00157         HUMAN   PSHS    A,B,X,Y,U       ;save regs
                      (        HUMAN.ASM):00158         ;
                      (        HUMAN.ASM):00159         ;  Check if we are displaying the map
                      (        HUMAN.ASM):00160         ;
D285 0DAD             (        HUMAN.ASM):00161         HMAN10  TST     HEARTF          ;are we in map mode?
D287 2604             (        HUMAN.ASM):00162                 BNE     HMAN20          ;   nope
D289 3F               (        HUMAN.ASM):00163                 SWI                     ;forward-looking display
D28A 19               (        HUMAN.ASM):00164                 FCB     INIVU           ;   .
D28B 3F               (        HUMAN.ASM):00165                 SWI                     ;fake the prompt
D28C 0F               (        HUMAN.ASM):00166                 FCB     PROMPT          ;   .
                      (        HUMAN.ASM):00167         ;
                      (        HUMAN.ASM):00168         ;  Process Characters
                      (        HUMAN.ASM):00169         ;
D28D DE11             (        HUMAN.ASM):00170         HMAN20  LDU     LINPTR          ;load line buffer ptr
D28F 811F             (        HUMAN.ASM):00171                 CMPA    #I.CR           ;check for line terminator
D291 2713             (        HUMAN.ASM):00172                 BEQ     HMAN30          ;   .
D293 8124             (        HUMAN.ASM):00173                 CMPA    #I.BS           ;check for character delete
D295 271D             (        HUMAN.ASM):00174                 BEQ     HMAN40          ;   .
                      (        HUMAN.ASM):00175         ;
                      (        HUMAN.ASM):00176         ;  Buffer Normal Chars
                      (        HUMAN.ASM):00177         ;
D297 3F               (        HUMAN.ASM):00178                 SWI                     ;echo char to the screen
D298 04               (        HUMAN.ASM):00179                 FCB     OUTCHR          ;   .
D299 A7C0             (        HUMAN.ASM):00180                 STA     ,U+             ;buffer char and advance ptr
D29B 8EC684           (        HUMAN.ASM):00181                 LDX     #M$CURS         ;print the cursor
D29E 3F               (        HUMAN.ASM):00182                 SWI                     ;   .
D29F 03               (        HUMAN.ASM):00183                 FCB     OUTSTR          ;   .
D2A0 11830311         (        HUMAN.ASM):00184                 CMPU    #LINEND         ;insure against buffer overruns
D2A4 2645             (        HUMAN.ASM):00185                 BNE     HMAN99          ;   buffer still has room
                      (        HUMAN.ASM):00186         
                      (        HUMAN.ASM):00187         
                      (        HUMAN.ASM):00188         
                      (        HUMAN.ASM):00189         ;
                      (        HUMAN.ASM):00190         ;  Process Carriage Returns
                      (        HUMAN.ASM):00191         ;
D2A6 4F               (        HUMAN.ASM):00192         HMAN30  CLRA                    ;erase old cursor
D2A7 3F               (        HUMAN.ASM):00193                 SWI                     ;   .
D2A8 04               (        HUMAN.ASM):00194                 FCB     OUTCHR          ;   .
D2A9 DC03             (        HUMAN.ASM):00195                 LDD     NEGONE          ;terminate buffer
D2AB EDC1             (        HUMAN.ASM):00196                 STD     ,U++            ;   .
D2AD CE02F1           (        HUMAN.ASM):00197                 LDU     #LINBUF         ;reset line buffer ptr for parsing
D2B0 DF11             (        HUMAN.ASM):00198                 STU     LINPTR          ;   .
D2B2 2015             (        HUMAN.ASM):00199                 BRA     HMAN50          ;drop into dispatching code
                      (        HUMAN.ASM):00200         ;
                      (        HUMAN.ASM):00201         ;  Process Character Delete
                      (        HUMAN.ASM):00202         ;
D2B4 118302F1         (        HUMAN.ASM):00203         HMAN40  CMPU    #LINBUF         ;check buffer boundary
D2B8 2731             (        HUMAN.ASM):00204                 BEQ     HMAN99          ;   .
D2BA 335F             (        HUMAN.ASM):00205                 LEAU    -1,U            ;decrement ptr
D2BC 8ED2C3           (        HUMAN.ASM):00206                 LDX     #M$ERAS         ;print <BS><SP><BS>
D2BF 3F               (        HUMAN.ASM):00207                 SWI                     ;   .
D2C0 03               (        HUMAN.ASM):00208                 FCB     OUTSTR          ;   .
D2C1 2028             (        HUMAN.ASM):00209                 BRA     HMAN99          ;loop for more
                      (        HUMAN.ASM):00210         ;
D2C3 0024241C24FF     (        HUMAN.ASM):00211         M$ERAS  FCB     I.SP,I.BS,I.BS,I.BAR,I.BS,$FF
                      (        HUMAN.ASM):00212         ;
                      (        HUMAN.ASM):00213         ;  Dispatch to Proper Routine
                      (        HUMAN.ASM):00214         ;
D2C9 8ED8CB           (        HUMAN.ASM):00215         HMAN50  LDX     #CMDTAB         ;primary commands
D2CC BDCBF4           (        HUMAN.ASM):00216                 JSR     PARSER          ;get the next token
D2CF 270D             (        HUMAN.ASM):00217                 BEQ     HMAN70          ;   null token
D2D1 2A05             (        HUMAN.ASM):00218                 BPL     HMAN60          ;   legal command
D2D3 BDCBE9           (        HUMAN.ASM):00219                 JSR     CMDERR          ;indicate error
D2D6 2006             (        HUMAN.ASM):00220                 BRA     HMAN70          ;flush rest of line
                      (        HUMAN.ASM):00221         ;
D2D8 48               (        HUMAN.ASM):00222         HMAN60  LSLA                    ;code*2 for offset
D2D9 8EDA07           (        HUMAN.ASM):00223                 LDX     #DISPAT         ;dispatch table base addr
D2DC AD96             (        HUMAN.ASM):00224                 JSR     [A,X]           ;dispatch to correct routine
                      (        HUMAN.ASM):00225         ;
D2DE CE02F1           (        HUMAN.ASM):00226         HMAN70  LDU     #LINBUF         ;reset line buffer ptr
D2E1 0DAD             (        HUMAN.ASM):00227                 TST     HEARTF          ;are we in map mode?
D2E3 2706             (        HUMAN.ASM):00228                 BEQ     HMAN99          ;   yes - no prompt
D2E5 0D28             (        HUMAN.ASM):00229                 TST     FAINT           ;are we unconscious?
D2E7 2602             (        HUMAN.ASM):00230                 BNE     HMAN99          ;   yes - no prompt
                      (        HUMAN.ASM):00231         ;
D2E9 3F               (        HUMAN.ASM):00232                 SWI                     ;prompt the human
D2EA 0F               (        HUMAN.ASM):00233                 FCB     PROMPT          ;   .
                      (        HUMAN.ASM):00234         ;
D2EB DF11             (        HUMAN.ASM):00235         HMAN99  STU     LINPTR          ;update the line ptr
D2ED 35F6             (        HUMAN.ASM):00236                 PULS    A,B,X,Y,U,PC    ;restore regs/exit
                      (        HUMAN.ASM):00237         ;
                      (        HUMAN.ASM):00238         ;;;;;        END
                      (    DAGGORATH.ASM):00118                 INCLUDE PATTK.ASM        ;Attack Command
                      (        PATTK.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (        PATTK.ASM):00002         ;  A T T A C K   C O M M A N D
                      (        PATTK.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (        PATTK.ASM):00004         ;
                      (        PATTK.ASM):00005         ;  PATTK: Player attack routine
                      (        PATTK.ASM):00006         ;
                      (        PATTK.ASM):00007         ;  Command Syntax:
                      (        PATTK.ASM):00008         ;       ATTACK LEFT             ;attack with object in left hand
                      (        PATTK.ASM):00009         ;       ATTACK RIGHT            ;attack with object in right hand
                      (        PATTK.ASM):00010         ;
D2EF BDCC39           (        PATTK.ASM):00011         PATTK   JSR     PARHND          ;select a hand
D2F2 EEC4             (        PATTK.ASM):00012                 LDU     ,U              ;load held object
D2F4 2603             (        PATTK.ASM):00013                 BNE     PATT10          ;   something in hand
D2F6 CE0B07           (        PATTK.ASM):00014                 LDU     #EMPHND         ;empty hand
                      (        PATTK.ASM):00015         ;
                      (        PATTK.ASM):00016         ;  Set Up ATTACK Parameter Blocks
                      (        PATTK.ASM):00017         ;
D2F9 1F32             (        PATTK.ASM):00018         PATT10  TFR     U,Y             ;make copy of OCB ptr
D2FB A64C             (        PATTK.ASM):00019                 LDA     P.OCMGO,U       ;copy offensive parms to PLRBLK
D2FD 9719             (        PATTK.ASM):00020                 STA     PMGO            ;   .
D2FF A64D             (        PATTK.ASM):00021                 LDA     P.OCPHO,U       ;   .
D301 971B             (        PATTK.ASM):00022                 STA     PPHO            ;   .
                      (        PATTK.ASM):00023         ;
                      (        PATTK.ASM):00024         ;  Calculate amount of energy expended
D303 9B19             (        PATTK.ASM):00025                 ADDA    PMGO            ;physical + magic offense
D305 46               (        PATTK.ASM):00026                 RORA                    ;1/8th of total offensive pct
D306 44               (        PATTK.ASM):00027                 LSRA                    ;   .
D307 44               (        PATTK.ASM):00028                 LSRA                    ;   .
D308 9E17             (        PATTK.ASM):00029                 LDX     PPOW            ;load current power rating
D30A BDD46D           (        PATTK.ASM):00030                 JSR     SCAL16          ;   .
D30D D321             (        PATTK.ASM):00031                 ADDD    PDAM            ;increase damage
D30F DD21             (        PATTK.ASM):00032                 STD     PDAM            ;   .
                      (        PATTK.ASM):00033         ;
                      (        PATTK.ASM):00034         ;  Attack Sound Effect Goes Here
                      (        PATTK.ASM):00035         ;
D311 A64A             (        PATTK.ASM):00036                 LDA     P.OCCLS,U       ;make object sound
D313 8B0C             (        PATTK.ASM):00037                 ADDA    #SNDOBJ         ;   .
D315 C6FF             (        PATTK.ASM):00038                 LDB     #$FF            ;loud
D317 3F               (        PATTK.ASM):00039                 SWI                     ;   .
D318 1C               (        PATTK.ASM):00040                 FCB     SOUNDS          ;   .
                      (        PATTK.ASM):00041         ;
                      (        PATTK.ASM):00042         ;  Decrement Ring Usage Counters
                      (        PATTK.ASM):00043         ;
D319 A649             (        PATTK.ASM):00044                 LDA     P.OCTYP,U       ;player using incantable ring?
D31B 8113             (        PATTK.ASM):00045                 CMPA    #T.RN11         ;   .
D31D 2D0F             (        PATTK.ASM):00046                 BLT     PATT20          ;   loser
D31F 8115             (        PATTK.ASM):00047                 CMPA    #T.RN12         ;   .
D321 2E0B             (        PATTK.ASM):00048                 BGT     PATT20          ;   loser
                      (        PATTK.ASM):00049         ;
D323 6A46             (        PATTK.ASM):00050                 DEC     P.OCXXX,U       ;decrement usage counter
D325 2607             (        PATTK.ASM):00051                 BNE     PATT20          ;   charges still left
D327 8616             (        PATTK.ASM):00052                 LDA     #T.RN20         ;gold ring (useless)
D329 A749             (        PATTK.ASM):00053                 STA     P.OCTYP,U       ;change used rings into gold
D32B BDD66F           (        PATTK.ASM):00054                 JSR     PREV00          ;   .
                      (        PATTK.ASM):00055         
                      (        PATTK.ASM):00056         
                      (        PATTK.ASM):00057         
                      (        PATTK.ASM):00058         ;
                      (        PATTK.ASM):00059         ;  Is there something to attack?
                      (        PATTK.ASM):00060         ;
D32E DC13             (        PATTK.ASM):00061         PATT20  LDD     PROW            ;is there a creature here?
D330 BDCF8A           (        PATTK.ASM):00062                 JSR     CFIND           ;   .
D333 2777             (        PATTK.ASM):00063                 BEQ     PATT99          ;   nope
                      (        PATTK.ASM):00064         ;
                      (        PATTK.ASM):00065         ;  Attempt to hit creature
                      (        PATTK.ASM):00066         ;
D335 CE0217           (        PATTK.ASM):00067                 LDU     #PLRBLK         ;player is attacker
D338 1E13             (        PATTK.ASM):00068                 EXG     X,U             ;creature is the defender
                      (        PATTK.ASM):00069         ;
D33A A62A             (        PATTK.ASM):00070                 LDA     P.OCCLS,Y       ;check for a ring
D33C 8101             (        PATTK.ASM):00071                 CMPA    #K.RING         ;   .
D33E 2716             (        PATTK.ASM):00072                 BEQ     PATT24          ;   rings are guaranteed to hit
                      (        PATTK.ASM):00073         ;
D340 BDD40E           (        PATTK.ASM):00074                 JSR     ATTACK          ;swing at the creature
D343 2B67             (        PATTK.ASM):00075                 BMI     PATT99          ;   big miss
                      (        PATTK.ASM):00076         ;
                      (        PATTK.ASM):00077         ;  Potentially hit creature - how dark is it?
                      (        PATTK.ASM):00078         ;
D345 109E24           (        PATTK.ASM):00079                 LDY     PTORCH          ;using a torch?
D348 2706             (        PATTK.ASM):00080                 BEQ     PATT22          ;   nope
D34A A629             (        PATTK.ASM):00081                 LDA     P.OCTYP,Y       ;what kind of torch...
D34C 8118             (        PATTK.ASM):00082                 CMPA    #T.TOR5         ;dead?
D34E 2606             (        PATTK.ASM):00083                 BNE     PATT24          ;   nope
D350 3F               (        PATTK.ASM):00084         PATT22  SWI                     ;only 25% of normal percentage
D351 07               (        PATTK.ASM):00085                 FCB     RANDOM          ;   .
D352 8403             (        PATTK.ASM):00086                 ANDA    #3              ;   (use the two LSBits)
D354 2656             (        PATTK.ASM):00087                 BNE     PATT99          ;   sorry - darkness prevails
                      (        PATTK.ASM):00088         ;
                      (        PATTK.ASM):00089         ;  We hit the creature!
                      (        PATTK.ASM):00090         ;
D356                  (        PATTK.ASM):00091         PATT24
D356 3F               (        PATTK.ASM):00092                 SWI
D357 1B               (        PATTK.ASM):00093                 FCB     ISOUND
D358 12               (        PATTK.ASM):00094                 FCB     A$KLK2          ;KLINK!!!
D359 3F               (        PATTK.ASM):00095                 SWI                     ;indicate that we hit him
D35A 02               (        PATTK.ASM):00096                 FCB     OUTSTI          ;   .
D35B 16               (        PATTK.ASM):00097                 FCB     %00010110       ;!!!
D35C F7               (        PATTK.ASM):00098                 FCB     %11110111       ;!!!
D35D B0               (        PATTK.ASM):00099                 FCB     %10110000       ;!!!
                      (        PATTK.ASM):00100         ;
D35E BDD443           (        PATTK.ASM):00101                 JSR     DAMAGE          ;take a chunk out of him
D361 2249             (        PATTK.ASM):00102                 BHI     PATT99          ;   still alive
                      (        PATTK.ASM):00103         
                      (        PATTK.ASM):00104         
                      (        PATTK.ASM):00105         
                      (        PATTK.ASM):00106         ;
                      (        PATTK.ASM):00107         ;  DEAD Creature!  Drop all objects to the floor
                      (        PATTK.ASM):00108         ;
D363 3048             (        PATTK.ASM):00109         PATT30  LEAX    P.CCOBJ,U       ;load initial object ptr
D365 AE84             (        PATTK.ASM):00110         PATT32  LDX     P.OCPTR,X       ;advance to next object
D367 2708             (        PATTK.ASM):00111                 BEQ     PATT40          ;   done
D369 6F05             (        PATTK.ASM):00112                 CLR     P.OCOWN,X       ;mark object unowned
D36B EC4F             (        PATTK.ASM):00113                 LDD     P.CCROW,U       ;drop objects where creature stands
D36D ED02             (        PATTK.ASM):00114                 STD     P.OCROW,X       ;mark new position
D36F 20F4             (        PATTK.ASM):00115                 BRA     PATT32          ;do next object
                      (        PATTK.ASM):00116         ;
                      (        PATTK.ASM):00117         ;  Decrement proper entry in CMXLND
                      (        PATTK.ASM):00118         ;
D371 9E82             (        PATTK.ASM):00119         PATT40  LDX     CMXPTR          ;creature matrix pointer
D373 E64D             (        PATTK.ASM):00120                 LDB     P.CCTYP,U       ;load creature type
D375 6A85             (        PATTK.ASM):00121                 DEC     B,X             ;decrement table entry
D377 6F4C             (        PATTK.ASM):00122                 CLR     P.CCUSE,U       ;mark creature as dead
D379 3F               (        PATTK.ASM):00123                 SWI                     ;update the screen
D37A 0E               (        PATTK.ASM):00124                 FCB     PUPDAT          ;   .
                      (        PATTK.ASM):00125         ;
                      (        PATTK.ASM):00126         ;        SOUND$  A$EXP0          ;loud explosion!
                      (        PATTK.ASM):00127         ;
D37B 3F               (        PATTK.ASM):00128                 SWI                     ;loud explosion!
D37C 1B               (        PATTK.ASM):00129                 FCB     ISOUND          ;   .
D37D 15               (        PATTK.ASM):00130                 FCB     A$EXP0          ;   .
                      (        PATTK.ASM):00131         ;
                      (        PATTK.ASM):00132         ;  Absorb "life-energy" of creature
                      (        PATTK.ASM):00133         ;
D37E ECC4             (        PATTK.ASM):00134                 LDD     P.CCPOW,U       ;increase PPOW by 1/8th of creature
D380 8D34             (        PATTK.ASM):00135                 BSR     ASRD3           ;   .
D382 D317             (        PATTK.ASM):00136                 ADDD    PPOW            ;add to our power level
D384 2A02             (        PATTK.ASM):00137                 BPL     PATT42          ;   power within limits
D386 867F             (        PATTK.ASM):00138                 LDA     #$7F            ;peg power at approximately 32K
D388 DD17             (        PATTK.ASM):00139         PATT42  STD     PPOW            ;update player power
                      (        PATTK.ASM):00140         ;
                      (        PATTK.ASM):00141         ;  Check for Fake Wizard (Plain)
                      (        PATTK.ASM):00142         ;
D38A A64D             (        PATTK.ASM):00143                 LDA     P.CCTYP,U       ;plain wizard?
D38C 810A             (        PATTK.ASM):00144                 CMPA    #10             ;   .
D38E 272D             (        PATTK.ASM):00145                 BEQ     ENDGAM          ;   nope
                      (        PATTK.ASM):00146         ;
                      (        PATTK.ASM):00147         ;  Check for Evil Wizard (Crescent)
                      (        PATTK.ASM):00148         ;
D390 810B             (        PATTK.ASM):00149                 CMPA    #11             ;evil wizard?
D392 2618             (        PATTK.ASM):00150                 BNE     PATT99          ;   nope
                      (        PATTK.ASM):00151         
                      (        PATTK.ASM):00152         
                      (        PATTK.ASM):00153         
                      (        PATTK.ASM):00154         ;
                      (        PATTK.ASM):00155         ;  Perform Special Ring Riddle Code
D394 0A2B             (        PATTK.ASM):00156                 DEC     FRZFLG          ;stop all creature activity
D396 CC0713           (        PATTK.ASM):00157                 LDD     #$0713          ;set lighting levels
D399 DD26             (        PATTK.ASM):00158                 STD     PRLITE          ;   .
D39B 8E0B23           (        PATTK.ASM):00159                 LDX     #OCBLND+OC.LEN  ;single object (OMEGA ring)
D39E 9F0F             (        PATTK.ASM):00160                 STX     OCBPTR          ;   .
D3A0 DC00             (        PATTK.ASM):00161                 LDD     BIGZER          ;zero all ptrs
D3A2 DD29             (        PATTK.ASM):00162                 STD     BAGPTR          ;nothing in bag
D3A4 DD24             (        PATTK.ASM):00163                 STD     PTORCH          ;no torch
D3A6 DD1F             (        PATTK.ASM):00164                 STD     PRHAND          ;nothing in hands
D3A8 DD1D             (        PATTK.ASM):00165                 STD     PLHAND          ;   .
D3AA 3F               (        PATTK.ASM):00166                 SWI                     ;update the screen
D3AB 19               (        PATTK.ASM):00167                 FCB     INIVU           ;   .
D3AC 3F               (        PATTK.ASM):00168         PATT99  SWI                     ;update the heartrate
D3AD 0C               (        PATTK.ASM):00169                 FCB     HUPDAT          ;   .
                      (        PATTK.ASM):00170         
                      (        PATTK.ASM):00171         
                      (        PATTK.ASM):00172         
                      (        PATTK.ASM):00173         ;  ASRDn: 16-bit Arithmetic Shift Right
                      (        PATTK.ASM):00174         ;
D3AE 47               (        PATTK.ASM):00175         ASRD7   ASRA
D3AF 56               (        PATTK.ASM):00176                 RORB
D3B0 47               (        PATTK.ASM):00177         ASRD6   ASRA
D3B1 56               (        PATTK.ASM):00178                 RORB
D3B2 47               (        PATTK.ASM):00179         ASRD5   ASRA
D3B3 56               (        PATTK.ASM):00180                 RORB
D3B4 47               (        PATTK.ASM):00181         ASRD4   ASRA
D3B5 56               (        PATTK.ASM):00182                 RORB
D3B6 47               (        PATTK.ASM):00183         ASRD3   ASRA
D3B7 56               (        PATTK.ASM):00184                 RORB
D3B8 47               (        PATTK.ASM):00185         ASRD2   ASRA
D3B9 56               (        PATTK.ASM):00186                 RORB
D3BA 47               (        PATTK.ASM):00187         ASRD    ASRA
D3BB 56               (        PATTK.ASM):00188                 RORB
D3BC 39               (        PATTK.ASM):00189                 RTS
                      (        PATTK.ASM):00190         
                      (        PATTK.ASM):00191         
                      (        PATTK.ASM):00192         
D3BD 8EDF47           (        PATTK.ASM):00193         ENDGAM  LDX     #WIZ1           ;fade in crescent wizzard
D3C0 3F               (        PATTK.ASM):00194                 SWI                     ;   (clear the status line)
D3C1 13               (        PATTK.ASM):00195                 FCB     WIZIN           ;   .
                      (        PATTK.ASM):00196         ;
D3C2 3F               (        PATTK.ASM):00197                 SWI                     ;a message from our sponsor
D3C3 02               (        PATTK.ASM):00198                 FCB     OUTSTI          ;   .
D3C4 FF               (        PATTK.ASM):00199                 FCB     %11111111       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3C5 C0               (        PATTK.ASM):00200                 FCB     %11000000       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3C6 57               (        PATTK.ASM):00201                 FCB     %01010111       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3C7 3E               (        PATTK.ASM):00202                 FCB     %00111110       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3C8 A7               (        PATTK.ASM):00203                 FCB     %10100111       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3C9 46               (        PATTK.ASM):00204                 FCB     %01000110       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3CA C0               (        PATTK.ASM):00205                 FCB     %11000000       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3CB 90               (        PATTK.ASM):00206                 FCB     %10010000       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3CC 51               (        PATTK.ASM):00207                 FCB     %01010001       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3CD 32               (        PATTK.ASM):00208                 FCB     %00110010       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3CE 28               (        PATTK.ASM):00209                 FCB     %00101000       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3CF 1E               (        PATTK.ASM):00210                 FCB     %00011110       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3D0 60               (        PATTK.ASM):00211                 FCB     %01100000       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3D1 51               (        PATTK.ASM):00212                 FCB     %01010001       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3D2 09               (        PATTK.ASM):00213                 FCB     %00001001       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3D3 98               (        PATTK.ASM):00214                 FCB     %10011000       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3D4 20               (        PATTK.ASM):00215                 FCB     %00100000       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3D5 C0               (        PATTK.ASM):00216                 FCB     %11000000       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3D6 E7               (        PATTK.ASM):00217                 FCB     %11100111       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3D7 DE               (        PATTK.ASM):00218                 FCB     %11011110       ;^ ENOUGH! I TIRE OF THIS PLAY...
D3D8 F0               (        PATTK.ASM):00219                 FCB     %11110000       ;^ ENOUGH! I TIRE OF THIS PLAY...
                      (        PATTK.ASM):00220         ;
D3D9 3F               (        PATTK.ASM):00221                 SWI                     ;more comercials
D3DA 02               (        PATTK.ASM):00222                 FCB     OUTSTI          ;   .
D3DB E8               (        PATTK.ASM):00223                 FCB     %11101000       ;   PREPARE TO MEET THY DOOM!!!
D3DC 00               (        PATTK.ASM):00224                 FCB     %00000000       ;   PREPARE TO MEET THY DOOM!!!
D3DD 08               (        PATTK.ASM):00225                 FCB     %00001000       ;   PREPARE TO MEET THY DOOM!!!
D3DE 48               (        PATTK.ASM):00226                 FCB     %01001000       ;   PREPARE TO MEET THY DOOM!!!
D3DF B0               (        PATTK.ASM):00227                 FCB     %10110000       ;   PREPARE TO MEET THY DOOM!!!
D3E0 0C               (        PATTK.ASM):00228                 FCB     %00001100       ;   PREPARE TO MEET THY DOOM!!!
D3E1 8A               (        PATTK.ASM):00229                 FCB     %10001010       ;   PREPARE TO MEET THY DOOM!!!
D3E2 0A               (        PATTK.ASM):00230                 FCB     %00001010       ;   PREPARE TO MEET THY DOOM!!!
D3E3 3C               (        PATTK.ASM):00231                 FCB     %00111100       ;   PREPARE TO MEET THY DOOM!!!
D3E4 0D               (        PATTK.ASM):00232                 FCB     %00001101       ;   PREPARE TO MEET THY DOOM!!!
D3E5 29               (        PATTK.ASM):00233                 FCB     %00101001       ;   PREPARE TO MEET THY DOOM!!!
D3E6 68               (        PATTK.ASM):00234                 FCB     %01101000       ;   PREPARE TO MEET THY DOOM!!!
D3E7 0A               (        PATTK.ASM):00235                 FCB     %00001010       ;   PREPARE TO MEET THY DOOM!!!
D3E8 23               (        PATTK.ASM):00236                 FCB     %00100011       ;   PREPARE TO MEET THY DOOM!!!
D3E9 20               (        PATTK.ASM):00237                 FCB     %00100000       ;   PREPARE TO MEET THY DOOM!!!
D3EA 23               (        PATTK.ASM):00238                 FCB     %00100011       ;   PREPARE TO MEET THY DOOM!!!
D3EB DE               (        PATTK.ASM):00239                 FCB     %11011110       ;   PREPARE TO MEET THY DOOM!!!
D3EC DD               (        PATTK.ASM):00240                 FCB     %11011101       ;   PREPARE TO MEET THY DOOM!!!
D3ED EF               (        PATTK.ASM):00241                 FCB     %11101111       ;   PREPARE TO MEET THY DOOM!!!
D3EE 60               (        PATTK.ASM):00242                 FCB     %01100000       ;   PREPARE TO MEET THY DOOM!!!
D3EF 3F               (        PATTK.ASM):00243                 SWI                     ;take your time...
D3F0 10               (        PATTK.ASM):00244                 FCB     WAIT            ;   .
                      (        PATTK.ASM):00245         
                      (        PATTK.ASM):00246         
                      (        PATTK.ASM):00247         
                      (        PATTK.ASM):00248         ;
                      (        PATTK.ASM):00249         ;  Strip player of everything/save PLHAND, PRHAND, PTORCH
                      (        PATTK.ASM):00250         ;
D3F1 DE24             (        PATTK.ASM):00251                 LDU     PTORCH          ;torch is the only object left in the bag
D3F3 DF29             (        PATTK.ASM):00252                 STU     BAGPTR          ;   .
D3F5 2704             (        PATTK.ASM):00253                 BEQ     EGAM10          ;   no torch even!
D3F7 4F               (        PATTK.ASM):00254                 CLRA                    ;terminate object list
D3F8 5F               (        PATTK.ASM):00255                 CLRB                    ;   .
D3F9 EDC4             (        PATTK.ASM):00256                 STD     P.OCPTR,U       ;   .
                      (        PATTK.ASM):00257         ;
D3FB CC00C8           (        PATTK.ASM):00258         EGAM10  LDD     #200            ;set penalty weight
D3FE DD15             (        PATTK.ASM):00259                 STD     POBJWT          ;   .
                      (        PATTK.ASM):00260         ;
                      (        PATTK.ASM):00261         ;  Create Endgame Upper Level
                      (        PATTK.ASM):00262         ;
D400 8603             (        PATTK.ASM):00263                 LDA     #3              ;endgame upper level
D402 3F               (        PATTK.ASM):00264                 SWI                     ;   .
D403 1A               (        PATTK.ASM):00265                 FCB     NEWLVL          ;   .
D404 BDCF9F           (        PATTK.ASM):00266                 JSR     FNDCEL          ;a new position for the player
D407 DD13             (        PATTK.ASM):00267                 STD     PROW            ;   .
                      (        PATTK.ASM):00268         ;
D409 3F               (        PATTK.ASM):00269                 SWI                     ;now fade the wizzard out
D40A 15               (        PATTK.ASM):00270                 FCB     WIZOUT          ;   .
D40B 3F               (        PATTK.ASM):00271                 SWI                     ;display initial screen
D40C 19               (        PATTK.ASM):00272                 FCB     INIVU           ;   .
D40D 39               (        PATTK.ASM):00273                 RTS                     ;bye
                      (        PATTK.ASM):00274         
                      (        PATTK.ASM):00275         
                      (        PATTK.ASM):00276         
                      (        PATTK.ASM):00277         ;
                      (        PATTK.ASM):00278         ;  ATTACK: Combat Resolution Routine
                      (        PATTK.ASM):00279         ;
                      (        PATTK.ASM):00280         ;  Inputs:
                      (        PATTK.ASM):00281         ;       X - Attacker Attack Block
                      (        PATTK.ASM):00282         ;       U - Defender Attack Block
                      (        PATTK.ASM):00283         ;  Returns:
                      (        PATTK.ASM):00284         ;       N - condition code set if attack fails
                      (        PATTK.ASM):00285         ;
D40E 3456             (        PATTK.ASM):00286         ATTACK  PSHS    A,B,X,U         ;save regs
D410 860F             (        PATTK.ASM):00287                 LDA     #15             ;set percentage index
D412 97C1             (        PATTK.ASM):00288                 STA     T0              ;   .
                      (        PATTK.ASM):00289         ;
                      (        PATTK.ASM):00290         ;  Calculate Defender/Attacker Percentage Index (steps of 25%)
D414 ECC4             (        PATTK.ASM):00291                 LDD     P.ATPOW,U       ;defender power
D416 A34A             (        PATTK.ASM):00292                 SUBD    P.ATDAM,U       ;minus defender damage
D418 BDCA1A           (        PATTK.ASM):00293                 JSR     LSLD2           ;times 4
                      (        PATTK.ASM):00294         ;
D41B A384             (        PATTK.ASM):00295         ATTK10  SUBD    P.ATPOW,X       ;multiple subtractions
D41D 2504             (        PATTK.ASM):00296                 BCS     ATTK20          ;   finally minus
D41F 0AC1             (        PATTK.ASM):00297                 DEC     T0              ;decrement index
D421 26F8             (        PATTK.ASM):00298                 BNE     ATTK10          ;   loop until zero
                      (        PATTK.ASM):00299         ;
                      (        PATTK.ASM):00300         ;  Use Index to Calculate Reward/Penalty Percentage
                      (        PATTK.ASM):00301         ;
D423 D6C1             (        PATTK.ASM):00302         ATTK20  LDB     T0              ;load percentage index
D425 C003             (        PATTK.ASM):00303                 SUBB    #3              ;offset index
D427 2A09             (        PATTK.ASM):00304                 BPL     ATTK22          ;   reward anything above 100%
                      (        PATTK.ASM):00305         ;
D429 50               (        PATTK.ASM):00306                 NEGB                    ;penalize anything below 75%
D42A 8619             (        PATTK.ASM):00307                 LDA     #25             ;   .
D42C 3D               (        PATTK.ASM):00308                 MUL                     ;   .
D42D BDCAA1           (        PATTK.ASM):00309                 JSR     NEGD            ;   .
D430 2003             (        PATTK.ASM):00310                 BRA     ATTK30          ;   .
                      (        PATTK.ASM):00311         ;
D432 860A             (        PATTK.ASM):00312         ATTK22  LDA     #10             ;reap the rewards
D434 3D               (        PATTK.ASM):00313                 MUL                     ;   .
                      (        PATTK.ASM):00314         ;
D435 EDE3             (        PATTK.ASM):00315         ATTK30  STD     ,--S            ;stack reward/penalty
D437 3F               (        PATTK.ASM):00316                 SWI                     ;create 16-bit random number (0:255)
D438 07               (        PATTK.ASM):00317                 FCB     RANDOM          ;   .
D439 1F89             (        PATTK.ASM):00318                 TFR     A,B             ;   .
D43B 4F               (        PATTK.ASM):00319                 CLRA                    ;   .
D43C E3E1             (        PATTK.ASM):00320                 ADDD    ,S++            ;calculate weighted percentage
D43E 83007F           (        PATTK.ASM):00321                 SUBD    #127            ;did we hit him?
D441 35D6             (        PATTK.ASM):00322         ATTK99  PULS    A,B,X,U,PC      ;restore regs/exit
                      (        PATTK.ASM):00323         ;
                      (        PATTK.ASM):00324         ;  DAMAGE: Process Damage Done
                      (        PATTK.ASM):00325         ;
                      (        PATTK.ASM):00326         ;  Inputs:
                      (        PATTK.ASM):00327         ;       X - Attacker ATB ptr
                      (        PATTK.ASM):00328         ;       U - Defender ATB ptr
                      (        PATTK.ASM):00329         ;  Returns:
                      (        PATTK.ASM):00330         ;       N - condition code set if defender died
                      (        PATTK.ASM):00331         ;
D443 3476             (        PATTK.ASM):00332         DAMAGE  PSHS    A,B,X,Y,U       ;save regs
D445 1F12             (        PATTK.ASM):00333                 TFR     X,Y             ;copy attacker ATB ptr
                      (        PATTK.ASM):00334         ;
                      (        PATTK.ASM):00335         ;  Calculate Magical Damage
                      (        PATTK.ASM):00336         ;
D447 AEA4             (        PATTK.ASM):00337                 LDX     P.ATPOW,Y       ;channel power thru magic offense pct
D449 A622             (        PATTK.ASM):00338                 LDA     P.ATMGO,Y       ;   .
D44B 8D20             (        PATTK.ASM):00339                 BSR     SCAL16          ;   .
D44D 1F01             (        PATTK.ASM):00340                 TFR     D,X             ;filter damage thru magic defense pct
D44F A643             (        PATTK.ASM):00341                 LDA     P.ATMGD,U       ;   .
D451 8D1A             (        PATTK.ASM):00342                 BSR     SCAL16          ;   .
D453 E34A             (        PATTK.ASM):00343                 ADDD    P.ATDAM,U       ;accumulate defender damage
D455 ED4A             (        PATTK.ASM):00344                 STD     P.ATDAM,U       ;   .
                      (        PATTK.ASM):00345         ;
                      (        PATTK.ASM):00346         ;  Calculate Magical Damage
                      (        PATTK.ASM):00347         ;
D457 AEA4             (        PATTK.ASM):00348                 LDX     P.ATPOW,Y       ;channel power thru physical offense pct
D459 A624             (        PATTK.ASM):00349                 LDA     P.ATPHO,Y       ;   .
D45B 8D10             (        PATTK.ASM):00350                 BSR     SCAL16          ;   .
D45D 1F01             (        PATTK.ASM):00351                 TFR     D,X             ;filter damage thru physical defense pct
D45F A645             (        PATTK.ASM):00352                 LDA     P.ATPHD,U       ;   .
D461 8D0A             (        PATTK.ASM):00353                 BSR     SCAL16          ;   .
D463 E34A             (        PATTK.ASM):00354                 ADDD    P.ATDAM,U       ;accumulate defender damage
D465 ED4A             (        PATTK.ASM):00355                 STD     P.ATDAM,U       ;   .
                      (        PATTK.ASM):00356         ;
D467 AEC4             (        PATTK.ASM):00357                 LDX     P.ATPOW,U       ;compare power vs damage
D469 AC4A             (        PATTK.ASM):00358                 CMPX    P.ATDAM,U       ;   .
D46B 35F6             (        PATTK.ASM):00359                 PULS    A,B,X,Y,U,PC    ;restore regs/exit
                      (        PATTK.ASM):00360         
                      (        PATTK.ASM):00361         
                      (        PATTK.ASM):00362         
                      (        PATTK.ASM):00363         ;
                      (        PATTK.ASM):00364         ;  SCAL16: Multiply 16-bit number by RADIX-7 value
                      (        PATTK.ASM):00365         ;
                      (        PATTK.ASM):00366         ;  Inputs:
                      (        PATTK.ASM):00367         ;       X - 16-bit unsigned number
                      (        PATTK.ASM):00368         ;       A - RADIX-7 value
                      (        PATTK.ASM):00369         ;  Returns:
                      (        PATTK.ASM):00370         ;       D - 16-bit unsigned result
                      (        PATTK.ASM):00371         ;
D46D 3416             (        PATTK.ASM):00372         SCAL16  PSHS    A,B,X           ;save regs
D46F 0FC1             (        PATTK.ASM):00373                 CLR     T0              ;reset MSByte of result
D471 E663             (        PATTK.ASM):00374                 LDB     3,S             ;LSByte of 16-bit number
D473 3D               (        PATTK.ASM):00375                 MUL                     ;multiply by RADIX-7 value
D474 DDC2             (        PATTK.ASM):00376                 STD     T1              ;T1:carry, T2:LSByte of result
                      (        PATTK.ASM):00377         ;
D476 A6E4             (        PATTK.ASM):00378                 LDA     ,S              ;load RADIX-7 value (2022 n.b. original was 0,S)
D478 E662             (        PATTK.ASM):00379                 LDB     2,S             ;load MSByte of 16-bit number
D47A 3D               (        PATTK.ASM):00380                 MUL                     ;multiply
D47B D3C1             (        PATTK.ASM):00381                 ADDD    T0              ;add carry portion
                      (        PATTK.ASM):00382         ;
D47D 08C3             (        PATTK.ASM):00383                 LSL     T2              ;MSBit of LSByte into carry
D47F 59               (        PATTK.ASM):00384                 ROLB                    ;shift carry into final result
D480 49               (        PATTK.ASM):00385                 ROLA                    ;   .
D481 EDE4             (        PATTK.ASM):00386                 STD     ,S              ;return as parm (2022 n.b. original was 0,S)
D483 3596             (        PATTK.ASM):00387                 PULS    A,B,X,PC        ;restore regs/exit
                      (        PATTK.ASM):00388         ;
                      (        PATTK.ASM):00389         ;;;;;        END
                      (    DAGGORATH.ASM):00119                 INCLUDE PCLIMB.ASM       ;Climb Command
                      (       PCLIMB.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       PCLIMB.ASM):00002         ;  C L I M B   C O M M A N D
                      (       PCLIMB.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       PCLIMB.ASM):00004         ;
                      (       PCLIMB.ASM):00005         ;  PCLIMB: Climb Up/Down Ladders
                      (       PCLIMB.ASM):00006         ;
                      (       PCLIMB.ASM):00007         ;  Command Syntax:
                      (       PCLIMB.ASM):00008         ;       CLIMB                   ;climb up a ladder
                      (       PCLIMB.ASM):00009         ;       CLIMB UP                ;   .
                      (       PCLIMB.ASM):00010         ;       CLIMB DOWN              ;climb down
                      (       PCLIMB.ASM):00011         ;
D485 DC13             (       PCLIMB.ASM):00012         PCLIMB  LDD     PROW            ;our position
D487 BDCFE9           (       PCLIMB.ASM):00013                 JSR     VFIND           ;what kind of vertical feature?
D48A 2B1A             (       PCLIMB.ASM):00014                 BMI     PCLI00          ;   no features
D48C 97C1             (       PCLIMB.ASM):00015                 STA     T0              ;save vertical features on stack
                      (       PCLIMB.ASM):00016         ;
D48E 8ED910           (       PCLIMB.ASM):00017                 LDX     #DIRTAB         ;directions
D491 BDCBF4           (       PCLIMB.ASM):00018                 JSR     PARSER          ;get the next token
D494 2F10             (       PCLIMB.ASM):00019                 BLE     PCLI00          ;   null/illegal token
                      (       PCLIMB.ASM):00020         ;
D496 D6C1             (       PCLIMB.ASM):00021                 LDB     T0              ;retrieve vertical feature code
D498 8104             (       PCLIMB.ASM):00022                 CMPA    #T.UP           ;climb up
D49A 270D             (       PCLIMB.ASM):00023                 BEQ     PCLI10          ;   .
D49C 8105             (       PCLIMB.ASM):00024                 CMPA    #T.DN           ;climb down
D49E 2606             (       PCLIMB.ASM):00025                 BNE     PCLI00          ;   .
                      (       PCLIMB.ASM):00026         ;
                      (       PCLIMB.ASM):00027         ;  Go Down a level
                      (       PCLIMB.ASM):00028         ;
D4A0 8601             (       PCLIMB.ASM):00029                 LDA     #1              ;assume we are going down
D4A2 C502             (       PCLIMB.ASM):00030                 BITB    #BIT1           ;downward vertical feature?
D4A4 2609             (       PCLIMB.ASM):00031                 BNE     PCLI20          ;   yes
D4A6 7ECBE9           (       PCLIMB.ASM):00032         PCLI00  JMP     CMDERR          ;can't go down!
                      (       PCLIMB.ASM):00033         ;
                      (       PCLIMB.ASM):00034         ;  Go Up a Level
                      (       PCLIMB.ASM):00035         ;
D4A9 86FF             (       PCLIMB.ASM):00036         PCLI10  LDA     #-1             ;assume we are going up
D4AB C101             (       PCLIMB.ASM):00037                 CMPB    #VF.LUP         ;ladder up?
D4AD 26F7             (       PCLIMB.ASM):00038                 BNE     PCLI00          ;   nope - no way up
                      (       PCLIMB.ASM):00039         ;
                      (       PCLIMB.ASM):00040         ;  Process Level Change
                      (       PCLIMB.ASM):00041         ;
D4AF 3F               (       PCLIMB.ASM):00042         PCLI20  SWI                     ;dispay prepare message
D4B0 16               (       PCLIMB.ASM):00043                 FCB     PREPAR          ;   .
D4B1 9B81             (       PCLIMB.ASM):00044                 ADDA    LEVEL           ;change the level
D4B3 3F               (       PCLIMB.ASM):00045                 SWI                     ;create a new dungeon level
D4B4 1A               (       PCLIMB.ASM):00046                 FCB     NEWLVL          ;   .
D4B5 3F               (       PCLIMB.ASM):00047                 SWI                     ;print current screen
D4B6 19               (       PCLIMB.ASM):00048                 FCB     INIVU           ;   .
D4B7 39               (       PCLIMB.ASM):00049                 RTS                     ;bye
                      (       PCLIMB.ASM):00050         ;
                      (       PCLIMB.ASM):00051         ;;;;;        END
                      (    DAGGORATH.ASM):00120                 INCLUDE PEXAM.ASM        ;Examine Command
                      (        PEXAM.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (        PEXAM.ASM):00002         ;  E X A M I N E   C O M M A N D
                      (        PEXAM.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (        PEXAM.ASM):00004         ;
                      (        PEXAM.ASM):00005         ;  PEXAM: Examine our Backpack and the Floor
                      (        PEXAM.ASM):00006         ;
                      (        PEXAM.ASM):00007         ;  Command Syntax:
                      (        PEXAM.ASM):00008         ;       EXAMINE
                      (        PEXAM.ASM):00009         ;
D4B8 8ED4CC           (        PEXAM.ASM):00010         PEXAM   LDX     #EXAMIN         ;set the examine display mode
D4BB 9FB2             (        PEXAM.ASM):00011                 STX     DSPMOD          ;   .
D4BD 3F               (        PEXAM.ASM):00012                 SWI                     ;update the display
D4BE 0E               (        PEXAM.ASM):00013                 FCB     PUPDAT          ;   .
D4BF 39               (        PEXAM.ASM):00014                 RTS                     ;bye
                      (        PEXAM.ASM):00015         
                      (        PEXAM.ASM):00016         
                      (        PEXAM.ASM):00017         
                      (        PEXAM.ASM):00018         ;
                      (        PEXAM.ASM):00019         ;  EXAMIN: "EXAMINE" Command Display Generator
                      (        PEXAM.ASM):00020         ;
D4C0 3F               (        PEXAM.ASM):00021         EXAMIO  SWI                     ;clear alternate screen
D4C1 09               (        PEXAM.ASM):00022                 FCB     ZFLOP           ;   .
D4C2 AEC4             (        PEXAM.ASM):00023                 LDX     P.VDBAS,U       ;load base addr
D4C4 CE0380           (        PEXAM.ASM):00024                 LDU     #TXTEXA         ;i/o to EXAMine screen
D4C7 AFC4             (        PEXAM.ASM):00025                 STX     P.TXBAS,U       ;set base address
D4C9 0AB7             (        PEXAM.ASM):00026                 DEC     TXBFLG          ;indicate non-std i/o
D4CB 39               (        PEXAM.ASM):00027                 RTS                     ;bye
                      (        PEXAM.ASM):00028         ;
D4CC 8DF2             (        PEXAM.ASM):00029         EXAMIN  BSR     EXAMIO          ;prepare for i/o to EXAMINE screen
D4CE 0FB6             (        PEXAM.ASM):00030                 CLR     NEWLIN          ;indicate we are on a new line
                      (        PEXAM.ASM):00031         ;
                      (        PEXAM.ASM):00032         ;  Print Header
                      (        PEXAM.ASM):00033         ;
D4D0 CC000A           (        PEXAM.ASM):00034                 LDD     #10             ;set cursor position
D4D3 ED44             (        PEXAM.ASM):00035                 STD     P.TXCUR,U       ;   .
D4D5 3F               (        PEXAM.ASM):00036                 SWI                     ;header
D4D6 02               (        PEXAM.ASM):00037                 FCB     OUTSTI          ;   .
D4D7 62               (        PEXAM.ASM):00038                 FCB     %01100010       ;IN THIS ROOM^
D4D8 5C               (        PEXAM.ASM):00039                 FCB     %01011100       ;IN THIS ROOM^
D4D9 0A               (        PEXAM.ASM):00040                 FCB     %00001010       ;IN THIS ROOM^
D4DA 21               (        PEXAM.ASM):00041                 FCB     %00100001       ;IN THIS ROOM^
D4DB 33               (        PEXAM.ASM):00042                 FCB     %00110011       ;IN THIS ROOM^
D4DC 04               (        PEXAM.ASM):00043                 FCB     %00000100       ;IN THIS ROOM^
D4DD 9E               (        PEXAM.ASM):00044                 FCB     %10011110       ;IN THIS ROOM^
D4DE F6               (        PEXAM.ASM):00045                 FCB     %11110110       ;IN THIS ROOM^
D4DF FC               (        PEXAM.ASM):00046                 FCB     %11111100       ;IN THIS ROOM^
                      (        PEXAM.ASM):00047         ;
                      (        PEXAM.ASM):00048         ;  Check for Creatures
                      (        PEXAM.ASM):00049         ;
D4E0 DC13             (        PEXAM.ASM):00050                 LDD     PROW            ;check for a creature
D4E2 BDCF8A           (        PEXAM.ASM):00051                 JSR     CFIND           ;   .
D4E5 2710             (        PEXAM.ASM):00052                 BEQ     EXAM10          ;   nothing here
                      (        PEXAM.ASM):00053         ;
D4E7 AE44             (        PEXAM.ASM):00054                 LDX     P.TXCUR,U       ;position cursor
D4E9 300B             (        PEXAM.ASM):00055                 LEAX    11,X            ;   .
D4EB AF44             (        PEXAM.ASM):00056                 STX     P.TXCUR,U       ;   .
D4ED 3F               (        PEXAM.ASM):00057                 SWI                     ;indicate bad guy present
D4EE 02               (        PEXAM.ASM):00058                 FCB     OUTSTI          ;   .
D4EF 56               (        PEXAM.ASM):00059                 FCB     %01010110       ;!CREATURE!^
D4F0 C7               (        PEXAM.ASM):00060                 FCB     %11000111       ;!CREATURE!^
D4F1 22               (        PEXAM.ASM):00061                 FCB     %00100010       ;!CREATURE!^
D4F2 86               (        PEXAM.ASM):00062                 FCB     %10000110       ;!CREATURE!^
D4F3 95               (        PEXAM.ASM):00063                 FCB     %10010101       ;!CREATURE!^
D4F4 91               (        PEXAM.ASM):00064                 FCB     %10010001       ;!CREATURE!^
D4F5 77               (        PEXAM.ASM):00065                 FCB     %01110111       ;!CREATURE!^
D4F6 F0               (        PEXAM.ASM):00066                 FCB     %11110000       ;!CREATURE!^
                      (        PEXAM.ASM):00067         
                      (        PEXAM.ASM):00068         
                      (        PEXAM.ASM):00069         
                      (        PEXAM.ASM):00070         ;
                      (        PEXAM.ASM):00071         ;  Check for Objects on the Floor
                      (        PEXAM.ASM):00072         ;
D4F7 0F91             (        PEXAM.ASM):00073         EXAM10  CLR     OFINDF          ;start at beginning
D4F9 DC13             (        PEXAM.ASM):00074         EXAM12  LDD     PROW            ;find an object
D4FB BDCF5B           (        PEXAM.ASM):00075                 JSR     OFIND           ;   .
D4FE 2704             (        PEXAM.ASM):00076                 BEQ     EXAM20          ;   no more objects
D500 8D3A             (        PEXAM.ASM):00077                 BSR     PRTOBJ          ;print object name/new line
D502 20F5             (        PEXAM.ASM):00078                 BRA     EXAM12          ;loop
                      (        PEXAM.ASM):00079         
                      (        PEXAM.ASM):00080         
                      (        PEXAM.ASM):00081         
                      (        PEXAM.ASM):00082         ;
                      (        PEXAM.ASM):00083         ;  Draw Separation Line
                      (        PEXAM.ASM):00084         ;
D504 0DB6             (        PEXAM.ASM):00085         EXAM20  TST     NEWLIN          ;check new line flag
D506 2702             (        PEXAM.ASM):00086                 BEQ     EXAM24          ;   .
D508 8D2B             (        PEXAM.ASM):00087                 BSR     PCRLF           ;force new line
                      (        PEXAM.ASM):00088         ;
D50A CC1B20           (        PEXAM.ASM):00089         EXAM24  LDD     #(I.EXCL*256)+32        ;I.EXCL,,32
D50D 3F               (        PEXAM.ASM):00090         EXAM26  SWI                     ;   .
D50E 04               (        PEXAM.ASM):00091                 FCB     OUTCHR          ;   .
D50F 5A               (        PEXAM.ASM):00092                 DECB                    ;   .
D510 26FB             (        PEXAM.ASM):00093                 BNE     EXAM26          ;   .
                      (        PEXAM.ASM):00094         ;
                      (        PEXAM.ASM):00095         ;  Print Header
                      (        PEXAM.ASM):00096         ;
D512 AE44             (        PEXAM.ASM):00097                 LDX     P.TXCUR,U       ;position cursor
D514 300C             (        PEXAM.ASM):00098                 LEAX    12,X            ;   .
D516 AF44             (        PEXAM.ASM):00099                 STX     P.TXCUR,U       ;   .
D518 3F               (        PEXAM.ASM):00100                 SWI                     ;header
D519 02               (        PEXAM.ASM):00101                 FCB     OUTSTI          ;   .
D51A 40               (        PEXAM.ASM):00102                 FCB     %01000000       ;BACKPACK^
D51B 82               (        PEXAM.ASM):00103                 FCB     %10000010       ;BACKPACK^
D51C 35               (        PEXAM.ASM):00104                 FCB     %00110101       ;BACKPACK^
D51D C0               (        PEXAM.ASM):00105                 FCB     %11000000       ;BACKPACK^
D51E 23               (        PEXAM.ASM):00106                 FCB     %00100011       ;BACKPACK^
D51F 5F               (        PEXAM.ASM):00107                 FCB     %01011111       ;BACKPACK^
D520 C0               (        PEXAM.ASM):00108                 FCB     %11000000       ;BACKPACK^
                      (        PEXAM.ASM):00109         ;
                      (        PEXAM.ASM):00110         ;  Display Bag Contents        
                      (        PEXAM.ASM):00111         ;
D521 8E0229           (        PEXAM.ASM):00112                 LDX     #BAGPTR         ;initial ptr
D524 AE84             (        PEXAM.ASM):00113         EXAM30  LDX     P.OCPTR,X       ;advance to next object
D526 270A             (        PEXAM.ASM):00114                 BEQ     EXAM99          ;   exhausted list
                      (        PEXAM.ASM):00115         ;
                      (        PEXAM.ASM):00116         ;  Check for the TORCH
                      (        PEXAM.ASM):00117         ;
D528 9C24             (        PEXAM.ASM):00118                 CMPX    PTORCH          ;lighted torch?
D52A 2602             (        PEXAM.ASM):00119                 BNE     EXAM32          ;   nope
D52C 6346             (        PEXAM.ASM):00120                 COM     P.TXINV,U       ;highlight burning torch
                      (        PEXAM.ASM):00121         ;
D52E 8D0C             (        PEXAM.ASM):00122         EXAM32  BSR     PRTOBJ          ;print object name/new line
D530 20F2             (        PEXAM.ASM):00123                 BRA     EXAM30          ;round and round
                      (        PEXAM.ASM):00124         ;
D532 0FB7             (        PEXAM.ASM):00125         EXAM99  CLR     TXBFLG          ;restore standard i/o
D534 39               (        PEXAM.ASM):00126                 RTS                     ;bye
                      (        PEXAM.ASM):00127         
                      (        PEXAM.ASM):00128         
                      (        PEXAM.ASM):00129         
                      (        PEXAM.ASM):00130         ;
                      (        PEXAM.ASM):00131         ;  PCRLF: Print Carriage Return/Linefeed
                      (        PEXAM.ASM):00132         ;
D535 861F             (        PEXAM.ASM):00133         PCRLF   LDA     #I.CR           ;print carriage return
D537 3F               (        PEXAM.ASM):00134                 SWI                     ;   .
D538 04               (        PEXAM.ASM):00135                 FCB     OUTCHR          ;   .
D539 0FB6             (        PEXAM.ASM):00136                 CLR     NEWLIN          ;reset flag
D53B 39               (        PEXAM.ASM):00137                 RTS
                      (        PEXAM.ASM):00138         ;
                      (        PEXAM.ASM):00139         ;  PRTOBJ: Print the Object Name in Regular Mode
                      (        PEXAM.ASM):00140         ;
D53C 3416             (        PEXAM.ASM):00141         PRTOBJ  PSHS    A,B,X           ;save regs
D53E BDC61F           (        PEXAM.ASM):00142                 JSR     OBJNAM          ;determine object name
D541 3F               (        PEXAM.ASM):00143                 SWI                     ;print object name
D542 03               (        PEXAM.ASM):00144                 FCB     OUTSTR          ;   .
                      (        PEXAM.ASM):00145         ;
D543 962C             (        PEXAM.ASM):00146                 LDA     VDGINV          ;insure highlighting is off
D545 A746             (        PEXAM.ASM):00147                 STA     P.TXINV,U       ;   .
                      (        PEXAM.ASM):00148         ;
                      (        PEXAM.ASM):00149         ;  Determine TAB/CRLF
                      (        PEXAM.ASM):00150         ;
D547 03B6             (        PEXAM.ASM):00151                 COM     NEWLIN          ;flip flag
D549 270A             (        PEXAM.ASM):00152                 BEQ     POBJ101         ;   perform new line function
                      (        PEXAM.ASM):00153         ;
D54B EC44             (        PEXAM.ASM):00154                 LDD     P.TXCUR,U       ;load cursor position
D54D C30010           (        PEXAM.ASM):00155                 ADDD    #16             ;adjust cursor
D550 C4F0             (        PEXAM.ASM):00156                 ANDB    #$F0            ;   .
D552 ED44             (        PEXAM.ASM):00157                 STD     P.TXCUR,U       ;update cursor
D554 8C               (        PEXAM.ASM):00158                 FCB     SKIP2           ;   .
                      (        PEXAM.ASM):00159         ;
D555 8DDE             (        PEXAM.ASM):00160         POBJ101 BSR     PCRLF           ;output CRLF
D557 3596             (        PEXAM.ASM):00161         POBJ990 PULS    A,B,X,PC        ;restore regs/exit
                      (        PEXAM.ASM):00162         ;
                      (        PEXAM.ASM):00163         ;;;;;        END
                      (    DAGGORATH.ASM):00121                 INCLUDE PGET.ASM         ;Get Command
                      (         PGET.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         PGET.ASM):00002         ;  G E T   C O M M A N D
                      (         PGET.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         PGET.ASM):00004         ;
                      (         PGET.ASM):00005                 NAM     PGET
                      (         PGET.ASM):00006         ;     LIBRY  CD
                      (         PGET.ASM):00007         ;        XDEF    PGET,PDROP,PSTOW,PSTOW0,PPULL
                      (         PGET.ASM):00008         ;
                      (         PGET.ASM):00009         ;        XREF    PARHND,PAROBJ,CMDERR,OFIND,OBJWGT
                      (         PGET.ASM):00010         ;        PSCT
                      (         PGET.ASM):00011         ;
                      (         PGET.ASM):00012         ;
                      (         PGET.ASM):00013         ;
                      (         PGET.ASM):00014         ;  PGET: Grab an object with either hand
                      (         PGET.ASM):00015         ;
                      (         PGET.ASM):00016         ;  Command Syntax:
                      (         PGET.ASM):00017         ;       GET LEFT <generic>
                      (         PGET.ASM):00018         ;       GET LEFT <specific>
                      (         PGET.ASM):00019         ;       GET RIGHT <generic>
                      (         PGET.ASM):00020         ;       GET RIGHT <specific>
                      (         PGET.ASM):00021         ;
D559 8D52             (         PGET.ASM):00022         PGET    BSR     HNDPAR          ;determine left/right hand
D55B 264D             (         PGET.ASM):00023                 BNE     ERRCMD1         ;   something already in hand!
                      (         PGET.ASM):00024         ;
                      (         PGET.ASM):00025         ;  Search the cell for the object
                      (         PGET.ASM):00026         ;
D55D BDCBC2           (         PGET.ASM):00027         PGET10  JSR     PAROBJ          ;determine generic/specific object
D560 0F91             (         PGET.ASM):00028                 CLR     OFINDF          ;start search from the beginning
D562 DC13             (         PGET.ASM):00029         PGET20  LDD     PROW            ;position
D564 BDCF5B           (         PGET.ASM):00030                 JSR     OFIND           ;get the next object
D567 2741             (         PGET.ASM):00031                 BEQ     ERRCMD1         ;   can't find the object
                      (         PGET.ASM):00032         ;
D569 0D90             (         PGET.ASM):00033                 TST     SPEFLG          ;generic/specific?
D56B 2606             (         PGET.ASM):00034                 BNE     PGET22          ;   specific
                      (         PGET.ASM):00035         ;
D56D A60A             (         PGET.ASM):00036                 LDA     P.OCCLS,X       ;perform generic compare
D56F 918F             (         PGET.ASM):00037                 CMPA    OBJCLS          ;   .
D571 2004             (         PGET.ASM):00038                 BRA     PGET24          ;   .
                      (         PGET.ASM):00039         ;
D573 A609             (         PGET.ASM):00040         PGET22  LDA     P.OCTYP,X       ;perform specific compare
D575 918E             (         PGET.ASM):00041                 CMPA    OBJTYP          ;   .
D577 26E9             (         PGET.ASM):00042         PGET24  BNE     PGET20          ;   loop if failure
                      (         PGET.ASM):00043         ;
                      (         PGET.ASM):00044         ;  Place the object into the correct hand
                      (         PGET.ASM):00045         ;
D579 AFC4             (         PGET.ASM):00046         PGET30  STX     ,U              ;store object ptr into correct hand
D57B 6C05             (         PGET.ASM):00047                 INC     P.OCOWN,X       ;mark object as owned
D57D E60A             (         PGET.ASM):00048                 LDB     P.OCCLS,X       ;accumulate weight
D57F 8EDA31           (         PGET.ASM):00049                 LDX     #OBJWGT         ;   .
D582 E685             (         PGET.ASM):00050                 LDB     B,X             ;   .
D584 4F               (         PGET.ASM):00051                 CLRA                    ;16-bit value/fall into WUPDAT
D585 201B             (         PGET.ASM):00052                 BRA     WUPDAT          ;   .
                      (         PGET.ASM):00053         ;
                      (         PGET.ASM):00054         
                      (         PGET.ASM):00055         
                      (         PGET.ASM):00056         
                      (         PGET.ASM):00057         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         PGET.ASM):00058         ;  D R O P   C O M M A N D
                      (         PGET.ASM):00059         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         PGET.ASM):00060         ;
                      (         PGET.ASM):00061         ;  PDROP: Drop an object
                      (         PGET.ASM):00062         ;
                      (         PGET.ASM):00063         ;  Command Syntax:
                      (         PGET.ASM):00064         ;       DROP LEFT               ;drop object in left hand
                      (         PGET.ASM):00065         ;       DROP RIGHT              ;drop object in right hand
                      (         PGET.ASM):00066         ;
D587 8D24             (         PGET.ASM):00067         PDROP   BSR     HNDPAR          ;left/right hand
D589 271F             (         PGET.ASM):00068                 BEQ     ERRCMD1         ;   empty hand!
                      (         PGET.ASM):00069         ;
D58B 4F               (         PGET.ASM):00070                 CLRA                    ;mark hand empty
D58C 5F               (         PGET.ASM):00071                 CLRB                    ;   .
D58D EDC4             (         PGET.ASM):00072                 STD     ,U              ;   .
D58F 6F05             (         PGET.ASM):00073                 CLR     P.OCOWN,X       ;mark object unowned
D591 DC13             (         PGET.ASM):00074                 LDD     PROW            ;load our position
D593 ED02             (         PGET.ASM):00075                 STD     P.OCROW,X       ;store as object position
D595 9681             (         PGET.ASM):00076                 LDA     LEVEL           ;store the current level
D597 A704             (         PGET.ASM):00077                 STA     P.OCLVL,X       ;   .
                      (         PGET.ASM):00078         ;
                      (         PGET.ASM):00079         ;  Decrease Player Weight
                      (         PGET.ASM):00080         ;
D599 E60A             (         PGET.ASM):00081                 LDB     P.OCCLS,X       ;load generic class
D59B 8EDA31           (         PGET.ASM):00082                 LDX     #OBJWGT         ;table base addr
D59E E685             (         PGET.ASM):00083                 LDB     B,X             ;load weight value
D5A0 50               (         PGET.ASM):00084                 NEGB                    ;negate weight (16-bit value)
D5A1 1D               (         PGET.ASM):00085                 SEX                     ;   .
                      (         PGET.ASM):00086         ;
                      (         PGET.ASM):00087         ;  WUPDAT: Common Player Weight Modification Routine
                      (         PGET.ASM):00088         ;
                      (         PGET.ASM):00089         ;  Used by PGET,PDROP
                      (         PGET.ASM):00090         ;
D5A2 D315             (         PGET.ASM):00091         WUPDAT  ADDD    POBJWT          ;effect relative change
D5A4 DD15             (         PGET.ASM):00092                 STD     POBJWT          ;update player weight
D5A6 3F               (         PGET.ASM):00093                 SWI                     ;update the heartrate
D5A7 0C               (         PGET.ASM):00094                 FCB     HUPDAT          ;   .
D5A8 2044             (         PGET.ASM):00095                 BRA     COMUPD          ;update status line/display
                      (         PGET.ASM):00096         ;
                      (         PGET.ASM):00097         ;  Local Jumps
                      (         PGET.ASM):00098         ;
D5AA 7ECBE9           (         PGET.ASM):00099         ERRCMD1 JMP     CMDERR          ;flag errors
D5AD 7ECC39           (         PGET.ASM):00100         HNDPAR  JMP     PARHND          ;dispatch to hand parse routine
                      (         PGET.ASM):00101         
                      (         PGET.ASM):00102         
                      (         PGET.ASM):00103         
                      (         PGET.ASM):00104         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         PGET.ASM):00105         ;  S T O W   C O M M A N D
                      (         PGET.ASM):00106         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         PGET.ASM):00107         ;
                      (         PGET.ASM):00108         ;  PSTOW: Put an object into our bag
                      (         PGET.ASM):00109         ;
                      (         PGET.ASM):00110         ;  Command Syntax:
                      (         PGET.ASM):00111         ;       STOW LEFT
                      (         PGET.ASM):00112         ;       STOW RIGHT
                      (         PGET.ASM):00113         ;
D5B0 8DFB             (         PGET.ASM):00114         PSTOW   BSR     HNDPAR          ;determine left/right hand
D5B2 27F6             (         PGET.ASM):00115                 BEQ     ERRCMD1         ;   empty hand!
                      (         PGET.ASM):00116         ;
D5B4 DC29             (         PGET.ASM):00117         PSTOW0  LDD     BAGPTR          ;insert object into bag list
D5B6 ED84             (         PGET.ASM):00118                 STD     P.OCPTR,X       ;   .
D5B8 9F29             (         PGET.ASM):00119                 STX     BAGPTR          ;   .
                      (         PGET.ASM):00120         ;
D5BA 4F               (         PGET.ASM):00121                 CLRA                    ;zap hand pointer
D5BB 5F               (         PGET.ASM):00122                 CLRB                    ;   .
D5BC EDC4             (         PGET.ASM):00123                 STD     ,U              ;   .
D5BE 202E             (         PGET.ASM):00124                 BRA     COMUPD          ;update status line/display
                      (         PGET.ASM):00125         ;
                      (         PGET.ASM):00126         
                      (         PGET.ASM):00127         
                      (         PGET.ASM):00128         
                      (         PGET.ASM):00129         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         PGET.ASM):00130         ;  P U L L   C O M M A N D
                      (         PGET.ASM):00131         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         PGET.ASM):00132         ;
                      (         PGET.ASM):00133         ;  PPULL: Take an object from our bag
                      (         PGET.ASM):00134         ;
                      (         PGET.ASM):00135         ;  Command Syntax:
                      (         PGET.ASM):00136         ;       PULL LEFT <generic>
                      (         PGET.ASM):00137         ;       PULL LEFT <specific>
                      (         PGET.ASM):00138         ;       PULL RIGHT <generic>
                      (         PGET.ASM):00139         ;       PULL RIGHT <specific>
                      (         PGET.ASM):00140         ;
D5C0 8DEB             (         PGET.ASM):00141         PPULL   BSR     HNDPAR          ;determine left/right hand
D5C2 26E6             (         PGET.ASM):00142                 BNE     ERRCMD1         ;   non-empty hand
D5C4 BDCBC2           (         PGET.ASM):00143                 JSR     PAROBJ          ;determine generic/specific name
                      (         PGET.ASM):00144         ;
                      (         PGET.ASM):00145         ;  Attempt to find object in BAG
                      (         PGET.ASM):00146         ;
D5C7 8E0229           (         PGET.ASM):00147                 LDX     #BAGPTR         ;starting point of the loop
D5CA 1F12             (         PGET.ASM):00148         PULL10  TFR     X,Y             ;save current link ptr
D5CC AE84             (         PGET.ASM):00149                 LDX     ,X              ;advance link ptr
D5CE 27DA             (         PGET.ASM):00150                 BEQ     ERRCMD1         ;   search failure
D5D0 0D90             (         PGET.ASM):00151                 TST     SPEFLG          ;generic/specific?
D5D2 2606             (         PGET.ASM):00152                 BNE     PULL12          ;   specific
                      (         PGET.ASM):00153         ;
D5D4 A60A             (         PGET.ASM):00154                 LDA     P.OCCLS,X       ;perform generic compare
D5D6 918F             (         PGET.ASM):00155                 CMPA    OBJCLS          ;   .
D5D8 2004             (         PGET.ASM):00156                 BRA     PULL14          ;   .
                      (         PGET.ASM):00157         ;
D5DA A609             (         PGET.ASM):00158         PULL12  LDA     P.OCTYP,X       ;perform specific compare
D5DC 918E             (         PGET.ASM):00159                 CMPA    OBJTYP          ;   .
D5DE 26EA             (         PGET.ASM):00160         PULL14  BNE     PULL10          ;   loop if failure
                      (         PGET.ASM):00161         ;
                      (         PGET.ASM):00162         ;  Place the Object into the Correct Hand
                      (         PGET.ASM):00163         ;
D5E0 EC84             (         PGET.ASM):00164                 LDD     P.OCPTR,X       ;remove object from bag list
D5E2 EDA4             (         PGET.ASM):00165                 STD     ,Y              ;   .
D5E4 AFC4             (         PGET.ASM):00166                 STX     ,U              ;store object into correct hand
                      (         PGET.ASM):00167         ;
D5E6 4F               (         PGET.ASM):00168                 CLRA                    ;clear ACCA, ACCB
D5E7 5F               (         PGET.ASM):00169                 CLRB                    ;   .
D5E8 9C24             (         PGET.ASM):00170                 CMPX    PTORCH          ;using this object as a torch?
D5EA 2602             (         PGET.ASM):00171                 BNE     COMUPD          ;   nope
D5EC DD24             (         PGET.ASM):00172                 STD     PTORCH          ;no longer using this torch
                      (         PGET.ASM):00173         ;
D5EE 3F               (         PGET.ASM):00174         COMUPD  SWI                     ;update status line
D5EF 0D               (         PGET.ASM):00175                 FCB     STATUS          ;   .
D5F0 3F               (         PGET.ASM):00176                 SWI                     ;update main display
D5F1 0E               (         PGET.ASM):00177                 FCB     PUPDAT          ;   .
D5F2 39               (         PGET.ASM):00178                 RTS                     ;bye
                      (         PGET.ASM):00179         ;
                      (         PGET.ASM):00180         ;;;;;        END
                      (    DAGGORATH.ASM):00122                 INCLUDE PINCAN.ASM       ;Incant Command
                      (       PINCAN.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       PINCAN.ASM):00002         ;  I N C A N T   C O M M A N D
                      (       PINCAN.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       PINCAN.ASM):00004         ;
                      (       PINCAN.ASM):00005         ;  PINCAN: Activate a magic object via incantation
                      (       PINCAN.ASM):00006         ;
D5F3 8ED92A           (       PINCAN.ASM):00007         PINCAN  LDX     #ADJTAB         ;find a magic word?
D5F6 BDCBF4           (       PINCAN.ASM):00008                 JSR     PARSER          ;   .
D5F9 2F2B             (       PINCAN.ASM):00009                 BLE     PINC99          ;   null/illegal token
D5FB 0D7B             (       PINCAN.ASM):00010                 TST     FULFLG          ;spell out the entire word?
D5FD 2727             (       PINCAN.ASM):00011                 BEQ     PINC99          ;   nope
D5FF DD8E             (       PINCAN.ASM):00012                 STD     OBJTYP          ;store parms
                      (       PINCAN.ASM):00013         ;
D601 DE1D             (       PINCAN.ASM):00014                 LDU     PLHAND          ;process left hand object
D603 8D02             (       PINCAN.ASM):00015                 BSR     PINC10          ;   .
D605 DE1F             (       PINCAN.ASM):00016                 LDU     PRHAND          ;process right hand object
                      (       PINCAN.ASM):00017         ;
                      (       PINCAN.ASM):00018         ;  Are we holding a ring?
                      (       PINCAN.ASM):00019         ;
D607 271D             (       PINCAN.ASM):00020         PINC10  BEQ     PINC99          ;   empty hand!
D609 A64A             (       PINCAN.ASM):00021                 LDA     P.OCCLS,U       ;do we have a ring?
D60B 8101             (       PINCAN.ASM):00022                 CMPA    #K.RING         ;   .
D60D 2617             (       PINCAN.ASM):00023                 BNE     PINC99          ;   nope
                      (       PINCAN.ASM):00024         ;
                      (       PINCAN.ASM):00025         ;  Did he say the secret word? (and win $50...)
                      (       PINCAN.ASM):00026         ;
D60F A647             (       PINCAN.ASM):00027                 LDA     P.OCXXX+1,U     ;load special object type
D611 2713             (       PINCAN.ASM):00028                 BEQ     PINC99          ;   must have already been INCANTed
D613 918E             (       PINCAN.ASM):00029                 CMPA    OBJTYP          ;does it match the token code?
D615 260F             (       PINCAN.ASM):00030                 BNE     PINC99          ;   nope
                      (       PINCAN.ASM):00031         ;
                      (       PINCAN.ASM):00032         ;  Transform the object...
                      (       PINCAN.ASM):00033         ;
D617 A749             (       PINCAN.ASM):00034                 STA     P.OCTYP,U       ;set the new object type
D619 3F               (       PINCAN.ASM):00035                 SWI                     ;fill in new parameters
D61A 18               (       PINCAN.ASM):00036                 FCB     OCBFIL          ;   .
                      (       PINCAN.ASM):00037         ;
                      (       PINCAN.ASM):00038         ;        SOUND$  A$RING          ;make the ring sound
                      (       PINCAN.ASM):00039         ;
D61B 3F               (       PINCAN.ASM):00040                 SWI                     ;   .
D61C 1B               (       PINCAN.ASM):00041                 FCB     ISOUND          ;   .
D61D 0D               (       PINCAN.ASM):00042                 FCB     A$RING          ;   .
D61E 3F               (       PINCAN.ASM):00043                 SWI                     ;show the new ring
D61F 0D               (       PINCAN.ASM):00044                 FCB     STATUS          ;   .
D620 6F47             (       PINCAN.ASM):00045                 CLR     P.OCXXX+1,U     ;insure he can't do this again
                      (       PINCAN.ASM):00046         ;
                      (       PINCAN.ASM):00047         ;  Terminate the game?
                      (       PINCAN.ASM):00048         ;
D622 8112             (       PINCAN.ASM):00049                 CMPA    #T.RN15         ;is this the OMEGA ring?
D624 2701             (       PINCAN.ASM):00050                 BEQ     WINNER          ;   yes - that's all folks!!!
                      (       PINCAN.ASM):00051         ;
D626 39               (       PINCAN.ASM):00052         PINC99  RTS                     ;bye
                      (       PINCAN.ASM):00053         
                      (       PINCAN.ASM):00054         
                      (       PINCAN.ASM):00055         
                      (       PINCAN.ASM):00056         ;
                      (       PINCAN.ASM):00057         ;  WINNER: Tell Player the Good News...
                      (       PINCAN.ASM):00058         ;
D627 8EDF70           (       PINCAN.ASM):00059         WINNER  LDX     #WIZ2           ;star wizzard
D62A 0A9E             (       PINCAN.ASM):00060                 DEC     FADFLG          ;fade in
D62C 3F               (       PINCAN.ASM):00061                 SWI                     ;   (clear the status line)
D62D 13               (       PINCAN.ASM):00062                 FCB     WIZIN           ;   .
D62E 3F               (       PINCAN.ASM):00063                 SWI                     ;we have a winner
D62F 02               (       PINCAN.ASM):00064                 FCB     OUTSTI          ;   .
D630 FF               (       PINCAN.ASM):00065                 FCB     %11111111       ;^BEHOLD! DESTINY AWAITS THE HAND
D631 C4               (       PINCAN.ASM):00066                 FCB     %11000100       ;^BEHOLD! DESTINY AWAITS THE HAND
D632 54               (       PINCAN.ASM):00067                 FCB     %01010100       ;^BEHOLD! DESTINY AWAITS THE HAND
D633 3D               (       PINCAN.ASM):00068                 FCB     %00111101       ;^BEHOLD! DESTINY AWAITS THE HAND
D634 84               (       PINCAN.ASM):00069                 FCB     %10000100       ;^BEHOLD! DESTINY AWAITS THE HAND
D635 D8               (       PINCAN.ASM):00070                 FCB     %11011000       ;^BEHOLD! DESTINY AWAITS THE HAND
D636 08               (       PINCAN.ASM):00071                 FCB     %00001000       ;^BEHOLD! DESTINY AWAITS THE HAND
D637 59               (       PINCAN.ASM):00072                 FCB     %01011001       ;^BEHOLD! DESTINY AWAITS THE HAND
D638 D1               (       PINCAN.ASM):00073                 FCB     %11010001       ;^BEHOLD! DESTINY AWAITS THE HAND
D639 2E               (       PINCAN.ASM):00074                 FCB     %00101110       ;^BEHOLD! DESTINY AWAITS THE HAND
D63A C8               (       PINCAN.ASM):00075                 FCB     %11001000       ;^BEHOLD! DESTINY AWAITS THE HAND
D63B 03               (       PINCAN.ASM):00076                 FCB     %00000011       ;^BEHOLD! DESTINY AWAITS THE HAND
D63C 70               (       PINCAN.ASM):00077                 FCB     %01110000       ;^BEHOLD! DESTINY AWAITS THE HAND
D63D A6               (       PINCAN.ASM):00078                 FCB     %10100110       ;^BEHOLD! DESTINY AWAITS THE HAND
D63E 93               (       PINCAN.ASM):00079                 FCB     %10010011       ;^BEHOLD! DESTINY AWAITS THE HAND
D63F 05               (       PINCAN.ASM):00080                 FCB     %00000101       ;^BEHOLD! DESTINY AWAITS THE HAND
D640 10               (       PINCAN.ASM):00081                 FCB     %00010000       ;^BEHOLD! DESTINY AWAITS THE HAND
D641 50               (       PINCAN.ASM):00082                 FCB     %01010000       ;^BEHOLD! DESTINY AWAITS THE HAND
D642 20               (       PINCAN.ASM):00083                 FCB     %00100000       ;^BEHOLD! DESTINY AWAITS THE HAND
D643 2E               (       PINCAN.ASM):00084                 FCB     %00101110       ;^BEHOLD! DESTINY AWAITS THE HAND
D644 20               (       PINCAN.ASM):00085                 FCB     %00100000       ;^BEHOLD! DESTINY AWAITS THE HAND
                      (       PINCAN.ASM):00086         ;
D645 3F               (       PINCAN.ASM):00087                 SWI                     ;and so on...
D646 02               (       PINCAN.ASM):00088                 FCB     OUTSTI          ;   .
D647 C8               (       PINCAN.ASM):00089                 FCB     %11001000       ;        OF A NEW WIZARD...
D648 00               (       PINCAN.ASM):00090                 FCB     %00000000       ;        OF A NEW WIZARD...
D649 00               (       PINCAN.ASM):00091                 FCB     %00000000       ;        OF A NEW WIZARD...
D64A 00               (       PINCAN.ASM):00092                 FCB     %00000000       ;        OF A NEW WIZARD...
D64B 00               (       PINCAN.ASM):00093                 FCB     %00000000       ;        OF A NEW WIZARD...
D64C 03               (       PINCAN.ASM):00094                 FCB     %00000011       ;        OF A NEW WIZARD...
D64D CC               (       PINCAN.ASM):00095                 FCB     %11001100       ;        OF A NEW WIZARD...
D64E 00               (       PINCAN.ASM):00096                 FCB     %00000000       ;        OF A NEW WIZARD...
D64F 81               (       PINCAN.ASM):00097                 FCB     %10000001       ;        OF A NEW WIZARD...
D650 C5               (       PINCAN.ASM):00098                 FCB     %11000101       ;        OF A NEW WIZARD...
D651 B8               (       PINCAN.ASM):00099                 FCB     %10111000       ;        OF A NEW WIZARD...
D652 2E               (       PINCAN.ASM):00100                 FCB     %00101110       ;        OF A NEW WIZARD...
D653 9D               (       PINCAN.ASM):00101                 FCB     %10011101       ;        OF A NEW WIZARD...
D654 06               (       PINCAN.ASM):00102                 FCB     %00000110       ;        OF A NEW WIZARD...
D655 44               (       PINCAN.ASM):00103                 FCB     %01000100       ;        OF A NEW WIZARD...
D656 F7               (       PINCAN.ASM):00104                 FCB     %11110111       ;        OF A NEW WIZARD...
D657 BC               (       PINCAN.ASM):00105                 FCB     %10111100       ;        OF A NEW WIZARD...
                      (       PINCAN.ASM):00106         ;
D658 20FE             (       PINCAN.ASM):00107                 BRA     *               ;round and round (forever)...
                      (       PINCAN.ASM):00108         ;
                      (       PINCAN.ASM):00109         ;;;;;        END
                      (    DAGGORATH.ASM):00123                 INCLUDE PREVEA.ASM       ;Reveal Command
                      (       PREVEA.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       PREVEA.ASM):00002         ;  R E V E A L   C O M M A N D
                      (       PREVEA.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       PREVEA.ASM):00004         ;
                      (       PREVEA.ASM):00005                 NAM     PREVEA
                      (       PREVEA.ASM):00006         ;     LIBRY  CD
                      (       PREVEA.ASM):00007         ;        XDEF    PREVEA,PREV00
                      (       PREVEA.ASM):00008         ;
                      (       PREVEA.ASM):00009         ;        XREF    PARHND
                      (       PREVEA.ASM):00010         ;        PSCT
                      (       PREVEA.ASM):00011         ;
                      (       PREVEA.ASM):00012         ;  PREVEA: Reveal a given magical object
                      (       PREVEA.ASM):00013         ;
                      (       PREVEA.ASM):00014         ;  Command Syntax:
                      (       PREVEA.ASM):00015         ;       REVEAL LEFT
                      (       PREVEA.ASM):00016         ;       REVEAL RIGHT
                      (       PREVEA.ASM):00017         ;
D65A BDCC39           (       PREVEA.ASM):00018         PREVEA  JSR     PARHND          ;determine left/right hand
D65D EEC4             (       PREVEA.ASM):00019                 LDU     ,U              ;load object ptr
D65F 2714             (       PREVEA.ASM):00020                 BEQ     PREV99          ;   empty hand
                      (       PREVEA.ASM):00021         ;
                      (       PREVEA.ASM):00022         ;  Confirm Power Requirements have been met
                      (       PREVEA.ASM):00023         ;
D661 A64B             (       PREVEA.ASM):00024                 LDA     P.OCREV,U       ;do we have enough power to reveal?
D663 2710             (       PREVEA.ASM):00025                 BEQ     PREV99          ;   already revealed
D665 C619             (       PREVEA.ASM):00026                 LDB     #25             ;   .
D667 3D               (       PREVEA.ASM):00027                 MUL                     ;   .
D668 109317           (       PREVEA.ASM):00028                 CMPD    PPOW            ;   .
D66B 2E08             (       PREVEA.ASM):00029                 BGT     PREV99          ;   nope
                      (       PREVEA.ASM):00030         ;
                      (       PREVEA.ASM):00031         ;  Transform and Reveal the Object
                      (       PREVEA.ASM):00032         ;
D66D A649             (       PREVEA.ASM):00033                 LDA     P.OCTYP,U       ;copy new parameters
D66F 3F               (       PREVEA.ASM):00034         PREV00  SWI                     ;   .
D670 18               (       PREVEA.ASM):00035                 FCB     OCBFIL          ;   .
D671 6F4B             (       PREVEA.ASM):00036                 CLR     P.OCREV,U       ;mark as revealed
D673 3F               (       PREVEA.ASM):00037                 SWI                     ;update the status line
D674 0D               (       PREVEA.ASM):00038                 FCB     STATUS          ;   .
                      (       PREVEA.ASM):00039         ;
D675 39               (       PREVEA.ASM):00040         PREV99  RTS                     ;exit
                      (       PREVEA.ASM):00041         ;
                      (       PREVEA.ASM):00042         ;;;;;        END
                      (    DAGGORATH.ASM):00124                 INCLUDE PTURN.ASM        ;Turn Command
                      (        PTURN.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (        PTURN.ASM):00002         ;  T U R N   C O M M A N D
                      (        PTURN.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (        PTURN.ASM):00004         ;
                      (        PTURN.ASM):00005         ;  PTURN: Change the Player Direction
                      (        PTURN.ASM):00006         ;
                      (        PTURN.ASM):00007         ;  Command Syntax:
                      (        PTURN.ASM):00008         ;       TURN LEFT               ;left-hand 90-degree turn
                      (        PTURN.ASM):00009         ;       TURN RIGHT              ;right-hand 90-degree turn
                      (        PTURN.ASM):00010         ;       TURN AROUND             ;180-degree turn
                      (        PTURN.ASM):00011         ;
D676 8ED910           (        PTURN.ASM):00012         PTURN   LDX     #DIRTAB         ;direction names
D679 BDCBF4           (        PTURN.ASM):00013                 JSR     PARSER          ;get the second token
D67C 2F4C             (        PTURN.ASM):00014                 BLE     ERRCMD2         ;   null/illegal token
D67E D623             (        PTURN.ASM):00015                 LDB     PDIR            ;load current facing direction
                      (        PTURN.ASM):00016         ;
                      (        PTURN.ASM):00017         ;  Check for left turn
                      (        PTURN.ASM):00018         ;
D680 8100             (        PTURN.ASM):00019                 CMPA    #T.LT           ;left turn?
D682 2607             (        PTURN.ASM):00020                 BNE     PTUR10          ;   nope
                      (        PTURN.ASM):00021         
                      (        PTURN.ASM):00022         ; NAB
D684                  (        PTURN.ASM):00023         PMOVELEFT
                      (        PTURN.ASM):00024         
D684 5A               (        PTURN.ASM):00025                 DECB                    ;change directions
D685 8D1D             (        PTURN.ASM):00026                 BSR     PREVU           ;create next display
D687 8D22             (        PTURN.ASM):00027                 BSR     LRTURN          ;display left-to-right turn
D689 2015             (        PTURN.ASM):00028                 BRA     PTUR90          ;   .
                      (        PTURN.ASM):00029         ;
                      (        PTURN.ASM):00030         ;  Check for right turn
                      (        PTURN.ASM):00031         ;
D68B 8101             (        PTURN.ASM):00032         PTUR10  CMPA    #T.RT           ;right turn?
D68D 2605             (        PTURN.ASM):00033                 BNE     PTUR20          ;   nope
                      (        PTURN.ASM):00034         
                      (        PTURN.ASM):00035         ; NAB
D68F                  (        PTURN.ASM):00036         PMOVERIGHT
                      (        PTURN.ASM):00037         
D68F 5C               (        PTURN.ASM):00038                 INCB                    ;change directions
D690 8D12             (        PTURN.ASM):00039                 BSR     PREVU           ;create next display
D692 200A             (        PTURN.ASM):00040                 BRA     PTUR22          ;display right-to-left turn
                      (        PTURN.ASM):00041         ;
                      (        PTURN.ASM):00042         ;  Check for about-face
                      (        PTURN.ASM):00043         ;
D694 8103             (        PTURN.ASM):00044         PTUR20  CMPA    #T.AROU         ;turn around?
D696 2632             (        PTURN.ASM):00045                 BNE     ERRCMD2         ;   loser2!
D698 CB02             (        PTURN.ASM):00046                 ADDB    #2              ;change directions
D69A 8D08             (        PTURN.ASM):00047                 BSR     PREVU           ;create next display
D69C 8D1D             (        PTURN.ASM):00048                 BSR     RLTURN          ;round and round
D69E 8D1B             (        PTURN.ASM):00049         PTUR22  BSR     RLTURN          ;   .
                      (        PTURN.ASM):00050         ;
                      (        PTURN.ASM):00051         ;  Show the next display
                      (        PTURN.ASM):00052         ;
D6A0 0AB4             (        PTURN.ASM):00053         PTUR90  DEC     UPDATE          ;request screen update
D6A2 13               (        PTURN.ASM):00054                 SYNC                    ;   .
D6A3 39               (        PTURN.ASM):00055                 RTS
                      (        PTURN.ASM):00056         
                      (        PTURN.ASM):00057         
                      (        PTURN.ASM):00058         
                      (        PTURN.ASM):00059         ;
                      (        PTURN.ASM):00060         ;  PREVU: Generate the next display in FLOP
                      (        PTURN.ASM):00061         ;
D6A4 C403             (        PTURN.ASM):00062         PREVU   ANDB    #3              ;directions are MOD 4
D6A6 D723             (        PTURN.ASM):00063                 STB     PDIR            ;   .
D6A8 7EC668           (        PTURN.ASM):00064                 JMP     PUPSUB          ;generate display without update
                      (        PTURN.ASM):00065         ;
                      (        PTURN.ASM):00066         ;  LRTURN: Display Left-to-Right Turn Sequence
     D6AB             (        PTURN.ASM):00067         LRTURN  EQU     *               ;--- start of procedure LRTURN
D6AB 8D20             (        PTURN.ASM):00068                 BSR     TURN00          ;do initialization
D6AD 260B             (        PTURN.ASM):00069                 BNE     LRTU99          ;   not looking forward
                      (        PTURN.ASM):00070         ;
D6AF CC0008           (        PTURN.ASM):00071                 LDD     #8              ;start from left side
D6B2 8D3D             (        PTURN.ASM):00072         LRTU10  BSR     TURN10          ;draw/erase line
D6B4 C30020           (        PTURN.ASM):00073                 ADDD    #32             ;move toward the right
D6B7 4D               (        PTURN.ASM):00074                 TSTA                    ;done yet?
D6B8 27F8             (        PTURN.ASM):00075                 BEQ     LRTU10          ;   nope
D6BA 39               (        PTURN.ASM):00076         LRTU99  RTS                     ;--- end of procedure LRTURN
                      (        PTURN.ASM):00077         ;
                      (        PTURN.ASM):00078         ;  RLTURN: Display Right-to-Left Sequence
                      (        PTURN.ASM):00079         ;
     D6BB             (        PTURN.ASM):00080         RLTURN  EQU     *               ;--- start of procedure RLTURN
D6BB 8D10             (        PTURN.ASM):00081                 BSR     TURN00          ;do initialization
D6BD 260A             (        PTURN.ASM):00082                 BNE     RLTU99          ;   not looking forward
                      (        PTURN.ASM):00083         ;
D6BF CC00F8           (        PTURN.ASM):00084                 LDD     #248            ;start from right side
D6C2 8D2D             (        PTURN.ASM):00085         RLTU10  BSR     TURN10          ;draw/erase the line
D6C4 830020           (        PTURN.ASM):00086                 SUBD    #32             ;move toward left
D6C7 2AF9             (        PTURN.ASM):00087                 BPL     RLTU10          ;   .
D6C9 39               (        PTURN.ASM):00088         RLTU99  RTS                     ;--- end of procedure RLTURN
                      (        PTURN.ASM):00089         ;
                      (        PTURN.ASM):00090         ;  Local Jumps
                      (        PTURN.ASM):00091         ;
D6CA 7ECBE9           (        PTURN.ASM):00092         ERRCMD2 JMP     CMDERR          ;flag errors
                      (        PTURN.ASM):00093         ;
                      (        PTURN.ASM):00094         ;  TURN00: Initialization
                      (        PTURN.ASM):00095         ;
D6CD DEB2             (        PTURN.ASM):00096         TURN00  LDU     DSPMOD          ;are we in forward viewing mode?
D6CF 1183CE6E         (        PTURN.ASM):00097                 CMPU    #VIEWER         ;   .
D6D3 261B             (        PTURN.ASM):00098                 BNE     TURN02          ;   nope - don't do anything
                      (        PTURN.ASM):00099         ;
D6D5 8E8080           (        PTURN.ASM):00100                 LDX     #$8080          ;manually set scaling
D6D8 9F4F             (        PTURN.ASM):00101                 STX     VXSCAL          ;   .
D6DA 0F8B             (        PTURN.ASM):00102                 CLR     RANGE           ;set the range
D6DC 3F               (        PTURN.ASM):00103                 SWI                     ;set the amount of fading
D6DD 00               (        PTURN.ASM):00104                 FCB     SETFAD          ;   .
                      (        PTURN.ASM):00105         ;
D6DE 3F               (        PTURN.ASM):00106                 SWI                     ;erase the CURRENT screen
D6DF 08               (        PTURN.ASM):00107                 FCB     ZFLIP           ;   .
D6E0 8ED6FD           (        PTURN.ASM):00108                 LDX     #LINES          ;draw horizontal lines
D6E3 3F               (        PTURN.ASM):00109                 SWI                     ;   .
D6E4 01               (        PTURN.ASM):00110                 FCB     VCTLST          ;   .
                      (        PTURN.ASM):00111         ;
D6E5 8E0011           (        PTURN.ASM):00112                 LDX     #17             ;set Y-coordinates
D6E8 9F2F             (        PTURN.ASM):00113                 STX     Y0              ;   .
                      (        PTURN.ASM):00114         
                      (        PTURN.ASM):00115         
                      (        PTURN.ASM):00116         
D6EA 8E0087           (        PTURN.ASM):00117                 LDX     #135            ;   .
D6ED 9F33             (        PTURN.ASM):00118                 STX     Y1              ;   .
                      (        PTURN.ASM):00119         ;
D6EF 4F               (        PTURN.ASM):00120                 CLRA                    ;successful return
D6F0 39               (        PTURN.ASM):00121         TURN02  RTS                     ;bye
                      (        PTURN.ASM):00122         ;
                      (        PTURN.ASM):00123         ;  TURN10:  Draw/Erase a line
                      (        PTURN.ASM):00124         ;
D6F1 DD31             (        PTURN.ASM):00125         TURN10  STD     X0              ;store x-coordinates
D6F3 DD35             (        PTURN.ASM):00126                 STD     X1              ;   .
D6F5 8D00             (        PTURN.ASM):00127                 BSR     TURN12          ;draw the line
D6F7 BDCABF           (        PTURN.ASM):00128         TURN12  JSR     VECTOR          ;then erase it
D6FA 032C             (        PTURN.ASM):00129                 COM     VDGINV          ;   .
D6FC 39               (        PTURN.ASM):00130                 RTS                     ;   .
                      (        PTURN.ASM):00131         ;
                      (        PTURN.ASM):00132         ;  LINES: Horizontal Lines
                      (        PTURN.ASM):00133         ;
D6FD 1000             (        PTURN.ASM):00134         LINES   FCB     16,0
D6FF 10FF             (        PTURN.ASM):00135                 FCB     16,255
D701 FF               (        PTURN.ASM):00136                 FCB     V$NEW
                      (        PTURN.ASM):00137         ;
D702 8800             (        PTURN.ASM):00138                 FCB     136,0
D704 88FF             (        PTURN.ASM):00139                 FCB     136,255
D706 FE               (        PTURN.ASM):00140                 FCB     V$END
                      (        PTURN.ASM):00141         ;
                      (        PTURN.ASM):00142         
                      (        PTURN.ASM):00143         
                      (        PTURN.ASM):00144         
                      (        PTURN.ASM):00145         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (        PTURN.ASM):00146         ;  M O V E   C O M M A N D
                      (        PTURN.ASM):00147         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (        PTURN.ASM):00148         ;
                      (        PTURN.ASM):00149         ;  PMOVE: Player Movement
                      (        PTURN.ASM):00150         ;
                      (        PTURN.ASM):00151         ;  Command Syntax:
                      (        PTURN.ASM):00152         ;       MOVE                    ;move forward
                      (        PTURN.ASM):00153         ;       MOVE BACKWARD           ;take a step backward
                      (        PTURN.ASM):00154         ;       MOVE LEFT               ;sidestep left
                      (        PTURN.ASM):00155         ;       MOVE RIGHT              ;sidestep right
                      (        PTURN.ASM):00156         ;
D707 8ED910           (        PTURN.ASM):00157         PMOVE   LDX     #DIRTAB         ;direction names
D70A BDCBF4           (        PTURN.ASM):00158                 JSR     PARSER          ;get the second token
D70D 2DBB             (        PTURN.ASM):00159                 BLT     ERRCMD2         ;   illegal token
D70F 2E09             (        PTURN.ASM):00160                 BGT     PMOV20          ;   legal token
                      (        PTURN.ASM):00161         ;
                      (        PTURN.ASM):00162         ;  Move Forward
                      (        PTURN.ASM):00163         ;
                      (        PTURN.ASM):00164         
                      (        PTURN.ASM):00165         ; NAB
D711                  (        PTURN.ASM):00166         PMOVEFORWARD
                      (        PTURN.ASM):00167         
D711 0A73             (        PTURN.ASM):00168                 DEC     HLFSTP          ;request half-step view
D713 3F               (        PTURN.ASM):00169                 SWI                     ;   .
D714 0E               (        PTURN.ASM):00170                 FCB     PUPDAT          ;   .
D715 5F               (        PTURN.ASM):00171                 CLRB                    ;step forward
D716 0F73             (        PTURN.ASM):00172                 CLR     HLFSTP          ;   .
D718 200C             (        PTURN.ASM):00173                 BRA     PMOV22          ;   .
                      (        PTURN.ASM):00174         ;
                      (        PTURN.ASM):00175         ;  Move Backward
                      (        PTURN.ASM):00176         ;
D71A 8102             (        PTURN.ASM):00177         PMOV20  CMPA    #T.BAK          ;backward
D71C 260C             (        PTURN.ASM):00178                 BNE     PMOV30          ;   .
                      (        PTURN.ASM):00179         
                      (        PTURN.ASM):00180         ; NAB
D71E                  (        PTURN.ASM):00181         PMOVEBACKWARD
                      (        PTURN.ASM):00182         
D71E 0A74             (        PTURN.ASM):00183                 DEC     BAKSTP          ;flag for back half-step
D720 3F               (        PTURN.ASM):00184                 SWI                     ;update the screen
D721 0E               (        PTURN.ASM):00185                 FCB     PUPDAT          ;   .
D722 C602             (        PTURN.ASM):00186                 LDB     #2              ;step backward
D724 0F74             (        PTURN.ASM):00187                 CLR     BAKSTP          ;   .
D726 8D2F             (        PTURN.ASM):00188         PMOV22  BSR     PSTEP           ;   .
D728 201B             (        PTURN.ASM):00189                 BRA     PMOV90          ;   .
                      (        PTURN.ASM):00190         ;
                      (        PTURN.ASM):00191         ;  Move Left/Right
                      (        PTURN.ASM):00192         ;
D72A 8101             (        PTURN.ASM):00193         PMOV30  CMPA    #T.RT           ;sidestep right?
D72C 260A             (        PTURN.ASM):00194                 BNE     PMOV40          ;   nope
D72E C601             (        PTURN.ASM):00195                 LDB     #1              ;take a step right
D730 8D25             (        PTURN.ASM):00196                 BSR     PSTEP           ;   .
D732 2611             (        PTURN.ASM):00197                 BNE     PMOV90          ;   we couldn't move
D734 8D85             (        PTURN.ASM):00198                 BSR     RLTURN          ;right-to-left line
D736 200D             (        PTURN.ASM):00199                 BRA     PMOV90          ;   .
                      (        PTURN.ASM):00200         ;
D738 8100             (        PTURN.ASM):00201         PMOV40  CMPA    #T.LT           ;sidestep left?
D73A 268E             (        PTURN.ASM):00202                 BNE     ERRCMD2         ;   nope - error
D73C C603             (        PTURN.ASM):00203                 LDB     #3              ;take a step left
D73E 8D17             (        PTURN.ASM):00204                 BSR     PSTEP           ;   .
D740 2603             (        PTURN.ASM):00205                 BNE     PMOV90          ;   we couldn't move
D742 BDD6AB           (        PTURN.ASM):00206                 JSR     LRTURN          ;left-to-right line
                      (        PTURN.ASM):00207         
                      (        PTURN.ASM):00208         
                      (        PTURN.ASM):00209         
                      (        PTURN.ASM):00210         ;
                      (        PTURN.ASM):00211         ;  Determine energy requirements
                      (        PTURN.ASM):00212         ;
D745 DC15             (        PTURN.ASM):00213         PMOV90  LDD     POBJWT          ;(weight / 8) + 3
D747 BDD3B6           (        PTURN.ASM):00214                 JSR     ASRD3           ;divide by 8
D74A C30003           (        PTURN.ASM):00215                 ADDD    #3              ;   .
D74D D321             (        PTURN.ASM):00216                 ADDD    PDAM            ;accumulate as damage
D74F DD21             (        PTURN.ASM):00217                 STD     PDAM            ;   .
D751 3F               (        PTURN.ASM):00218                 SWI                     ;   .
D752 0C               (        PTURN.ASM):00219                 FCB     HUPDAT          ;   .
D753 0AB4             (        PTURN.ASM):00220                 DEC     UPDATE          ;request screen switch
D755 13               (        PTURN.ASM):00221                 SYNC                    ;wait for it to happen
D756 39               (        PTURN.ASM):00222                 RTS                     ;   .
                      (        PTURN.ASM):00223         
                      (        PTURN.ASM):00224         
                      (        PTURN.ASM):00225         
                      (        PTURN.ASM):00226         ;
                      (        PTURN.ASM):00227         ;  PSTEP: Move the Player
                      (        PTURN.ASM):00228         ;
                      (        PTURN.ASM):00229         ;  Inputs:
                      (        PTURN.ASM):00230         ;       B - relative change in direction
                      (        PTURN.ASM):00231         ;  Returns:
                      (        PTURN.ASM):00232         ;       PROW - updated
                      (        PTURN.ASM):00233         ;       PCOL - updated
                      (        PTURN.ASM):00234         ;
D757 3406             (        PTURN.ASM):00235         PSTEP   PSHS    A,B             ;save some regs
D759 6FE2             (        PTURN.ASM):00236                 CLR     ,-S             ;assume we will win
                      (        PTURN.ASM):00237         ;
D75B DB23             (        PTURN.ASM):00238                 ADDB    PDIR            ;effect relative change
D75D C403             (        PTURN.ASM):00239                 ANDB    #3              ;MOD 4
D75F D78A             (        PTURN.ASM):00240                 STB     DIR             ;save direction
D761 DC13             (        PTURN.ASM):00241                 LDD     PROW            ;player position
D763 BDD13E           (        PTURN.ASM):00242                 JSR     STEPOK          ;can we legally move?
D766 2707             (        PTURN.ASM):00243                 BEQ     PSTP10          ;   yes
                      (        PTURN.ASM):00244         ;
                      (        PTURN.ASM):00245         ;  We can't move!
                      (        PTURN.ASM):00246         ;
                      (        PTURN.ASM):00247         ;
                      (        PTURN.ASM):00248         ;        SOUND$  A$THUD          ;THUD!!!
                      (        PTURN.ASM):00249         ;
D768 3F               (        PTURN.ASM):00250                 SWI                     ;   .
D769 1B               (        PTURN.ASM):00251                 FCB     ISOUND          ;   .
D76A 14               (        PTURN.ASM):00252                 FCB     A$THUD          ;   .
D76B 6AE4             (        PTURN.ASM):00253                 DEC     ,S              ;loser (2022 n.b. original was 0,S)
D76D DC13             (        PTURN.ASM):00254                 LDD     PROW            ;restore original position
                      (        PTURN.ASM):00255         ;
D76F DD13             (        PTURN.ASM):00256         PSTP10  STD     PROW            ;update position
D771 BDC668           (        PTURN.ASM):00257                 JSR     PUPSUB          ;create image in backplane
                      (        PTURN.ASM):00258         ;
D774 6DE0             (        PTURN.ASM):00259         PSTP99  TST     ,S+             ;set condition codes
D776 3586             (        PTURN.ASM):00260                 PULS    A,B,PC          ;restore regs/exit
                      (        PTURN.ASM):00261         ;
                      (        PTURN.ASM):00262         ;;;;;        END
                      (    DAGGORATH.ASM):00125                 INCLUDE PUSE.ASM         ;Use Command
                      (         PUSE.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         PUSE.ASM):00002         ;  U S E   C O M M A N D
                      (         PUSE.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         PUSE.ASM):00004         ;
                      (         PUSE.ASM):00005         ;  PUSE: Activate an Object
                      (         PUSE.ASM):00006         ;
                      (         PUSE.ASM):00007         ;  Command Syntax:
                      (         PUSE.ASM):00008         ;       USE LEFT
                      (         PUSE.ASM):00009         ;       USE RIGHT
                      (         PUSE.ASM):00010         ;
D778 BDCC39           (         PUSE.ASM):00011         PUSE    JSR     PARHND          ;parse for an object
D77B 2721             (         PUSE.ASM):00012                 BEQ     PUSE24          ;   empty hand
                      (         PUSE.ASM):00013         ;
                      (         PUSE.ASM):00014         ;  Dispatch to proper routine
                      (         PUSE.ASM):00015         ;
D77D EC09             (         PUSE.ASM):00016                 LDD     P.OCTYP,X       ;load the object type/class
                      (         PUSE.ASM):00017         ;
D77F C105             (         PUSE.ASM):00018         PUSE10  CMPB    #K.TORC         ;torch?
D781 260B             (         PUSE.ASM):00019                 BNE     PUSE20          ;   nope
D783 9F24             (         PUSE.ASM):00020                 STX     PTORCH          ;light torch
D785 BDD5B4           (         PUSE.ASM):00021         PUSE12  JSR     PSTOW0          ;stow object
                      (         PUSE.ASM):00022         ;
                      (         PUSE.ASM):00023         ;        SOUND$  A$TORC          ;make loud torch sound
                      (         PUSE.ASM):00024         ;
D788 3F               (         PUSE.ASM):00025                 SWI                     ;   .
D789 1B               (         PUSE.ASM):00026                 FCB     ISOUND          ;   .
D78A 11               (         PUSE.ASM):00027                 FCB     A$TORC          ;   .
D78B 3F               (         PUSE.ASM):00028                 SWI                     ;update the screen
D78C 0E               (         PUSE.ASM):00029                 FCB     PUPDAT          ;   .
D78D 39               (         PUSE.ASM):00030                 RTS                     ;bye
                      (         PUSE.ASM):00031         ;
                      (         PUSE.ASM):00032         ;  Check for specific objects
                      (         PUSE.ASM):00033         ;
D78E 1F13             (         PUSE.ASM):00034         PUSE20  TFR     X,U             ;copy OCB ptr
D790 8ED7A2           (         PUSE.ASM):00035                 LDX     #USETAB         ;dispatch table addr
D793 A184             (         PUSE.ASM):00036         PUSE22  CMPA    ,X              ;match?
D795 2708             (         PUSE.ASM):00037                 BEQ     PUSE30          ;   yes
D797 3003             (         PUSE.ASM):00038                 LEAX    3,X             ;advance to next entry
D799 8CD7B1           (         PUSE.ASM):00039                 CMPX    #USEEND         ;exhausted table?
D79C 25F5             (         PUSE.ASM):00040                 BLO     PUSE22          ;   nope
D79E 39               (         PUSE.ASM):00041         PUSE24  RTS                     ;loser!
                      (         PUSE.ASM):00042         ;
D79F 6E9801           (         PUSE.ASM):00043         PUSE30  JMP     [1,X]           ;dispatch to proper routine/exit
                      (         PUSE.ASM):00044         
                      (         PUSE.ASM):00045         
                      (         PUSE.ASM):00046         
                      (         PUSE.ASM):00047         ;
                      (         PUSE.ASM):00048         ;  Macro To Define Specific Object Dispatch Table Entries
                      (         PUSE.ASM):00049         ;
D7A2                  (         PUSE.ASM):00050         USM     MACR
                      (         PUSE.ASM):00051                 FCB     \1
                      (         PUSE.ASM):00052                 FDB     \2
                      (         PUSE.ASM):00053                 ENDM
                      (         PUSE.ASM):00054         ;
     D7A2             (         PUSE.ASM):00055         USETAB  EQU     *               ;beginning of table
D7A2 05               (         PUSE.ASM):00056                 FCB     T.FLA1          ;avatar flask (strength)
D7A3 D7B1             (         PUSE.ASM):00057                 FDB     UFL100
D7A5 09               (         PUSE.ASM):00058                 FCB     T.FLA2          ;soma flask (healing)
D7A6 D7BA             (         PUSE.ASM):00059                 FDB     UFL200
D7A8 08               (         PUSE.ASM):00060                 FCB     T.FLA3          ;gift flask (poison)
D7A9 D7BE             (         PUSE.ASM):00061                 FDB     UFL300
                      (         PUSE.ASM):00062         ;
D7AB 04               (         PUSE.ASM):00063                 FCB     T.SCR1          ;seer scroll (map w/all)
D7AC D7D9             (         PUSE.ASM):00064                 FDB     USC200
D7AE 07               (         PUSE.ASM):00065                 FCB     T.SCR2          ;vision scroll (plain)
D7AF D7D7             (         PUSE.ASM):00066                 FDB     USC100
                      (         PUSE.ASM):00067         ;
     D7B1             (         PUSE.ASM):00068         USEEND  EQU     *
                      (         PUSE.ASM):00069         
                      (         PUSE.ASM):00070         
                      (         PUSE.ASM):00071         
                      (         PUSE.ASM):00072         ;
                      (         PUSE.ASM):00073         ;  Avatar Flask (Strength)
                      (         PUSE.ASM):00074         ;
D7B1 CC03E8           (         PUSE.ASM):00075         UFL100  LDD     #1000           ;increase power by 1000 pts
D7B4 D317             (         PUSE.ASM):00076                 ADDD    PPOW            ;   .
D7B6 DD17             (         PUSE.ASM):00077                 STD     PPOW            ;   .
D7B8 200F             (         PUSE.ASM):00078                 BRA     UFL900          ;   .
                      (         PUSE.ASM):00079         ;
                      (         PUSE.ASM):00080         ;  Soma Flask (Healing)
                      (         PUSE.ASM):00081         ;
D7BA 4F               (         PUSE.ASM):00082         UFL200  CLRA                    ;heal all damage
D7BB 5F               (         PUSE.ASM):00083                 CLRB                    ;   .
D7BC 2009             (         PUSE.ASM):00084                 BRA     UFL310          ;   .
                      (         PUSE.ASM):00085         ;
                      (         PUSE.ASM):00086         ;  Solanum Flask (Poison)
                      (         PUSE.ASM):00087         ;
D7BE 9E17             (         PUSE.ASM):00088         UFL300  LDX     PPOW            ;cause 80% damage
D7C0 8666             (         PUSE.ASM):00089                 LDA     #102            ;   .
D7C2 BDD46D           (         PUSE.ASM):00090                 JSR     SCAL16          ;   .
D7C5 D321             (         PUSE.ASM):00091                 ADDD    PDAM            ;   .
D7C7 DD21             (         PUSE.ASM):00092         UFL310  STD     PDAM            ;   .
                      (         PUSE.ASM):00093         ;
D7C9 C617             (         PUSE.ASM):00094         UFL900  LDB     #T.FLA4         ;now empty the flask
D7CB E749             (         PUSE.ASM):00095                 STB     P.OCTYP,U       ;   .
D7CD 6F4B             (         PUSE.ASM):00096                 CLR     P.OCREV,U       ;empty flasks are always revealed
D7CF 3F               (         PUSE.ASM):00097                 SWI
D7D0 1B               (         PUSE.ASM):00098                 FCB     ISOUND
D7D1 0C               (         PUSE.ASM):00099                 FCB     A$FLAS          ;make flask sound
D7D2 3F               (         PUSE.ASM):00100                 SWI                     ;update the status line
D7D3 0D               (         PUSE.ASM):00101                 FCB     STATUS          ;   .
D7D4 3F               (         PUSE.ASM):00102                 SWI                     ;update the heartrate
D7D5 0C               (         PUSE.ASM):00103                 FCB     HUPDAT          ;   .
D7D6 39               (         PUSE.ASM):00104                 RTS                     ;done
                      (         PUSE.ASM):00105         ;
                      (         PUSE.ASM):00106         ;  Vision Scroll
                      (         PUSE.ASM):00107         ;
D7D7 4F               (         PUSE.ASM):00108         USC100  CLRA                    ;map w/o features
D7D8 8C               (         PUSE.ASM):00109                 FCB     SKIP2           ;   .
                      (         PUSE.ASM):00110         ;
                      (         PUSE.ASM):00111         ;  Seer Scroll
                      (         PUSE.ASM):00112         ;
     D7D9             (         PUSE.ASM):00113         DEBMAP  EQU     *               ;debugging command
D7D9 86FF             (         PUSE.ASM):00114         USC200  LDA     #$FF            ;map with the features
D7DB 9794             (         PUSE.ASM):00115                 STA     MAPFLG          ;set the flag
D7DD 6D4B             (         PUSE.ASM):00116                 TST     P.OCREV,U       ;has this object been revealed?
D7DF 260C             (         PUSE.ASM):00117                 BNE     USC199          ;   nope!
                      (         PUSE.ASM):00118         ;
                      (         PUSE.ASM):00119         ;        SOUND$  A$SCRO          ;make scroll sound
D7E1 3F               (         PUSE.ASM):00120                 SWI                     ;   .
D7E2 1B               (         PUSE.ASM):00121                 FCB     ISOUND          ;   .
D7E3 0E               (         PUSE.ASM):00122                 FCB     A$SCRO          ;   .
D7E4 0FAD             (         PUSE.ASM):00123         USC210  CLR     HEARTF          ;turn off the heart
D7E6 8ECDBA           (         PUSE.ASM):00124                 LDX     #MAPPER         ;set map display mode
D7E9 9FB2             (         PUSE.ASM):00125                 STX     DSPMOD          ;   .
D7EB 3F               (         PUSE.ASM):00126                 SWI                     ;update the screen
                      (         PUSE.ASM):00127         
                      (         PUSE.ASM):00128         
                      (         PUSE.ASM):00129         
D7EC 0E               (         PUSE.ASM):00130                 FCB     PUPDAT          ;   .
D7ED 39               (         PUSE.ASM):00131         USC199  RTS                     ;done
                      (         PUSE.ASM):00132         ;
                      (         PUSE.ASM):00133         ;;;;;        END
                      (    DAGGORATH.ASM):00126                 INCLUDE PZTAPE.ASM       ;Cassette Tape Routines
                      (       PZTAPE.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       PZTAPE.ASM):00002         ;  C A S S E T T E   T A P E   R O U T I N E S
                      (       PZTAPE.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       PZTAPE.ASM):00004         ;
                      (       PZTAPE.ASM):00005         ;  PZLOAD: Game Restore Function
                      (       PZTAPE.ASM):00006         ;
D7EE 8D03             (       PZTAPE.ASM):00007         PZLOAD  BSR     FILNAM          ;get the file name
D7F0 0AB8             (       PZTAPE.ASM):00008                 DEC     ZFLAG           ;flag for load
D7F2 39               (       PZTAPE.ASM):00009                 RTS                     ;bye
                      (       PZTAPE.ASM):00010         ;
D7F3 8E0313           (       PZTAPE.ASM):00011         FILNAM  LDX     #TOKEN          ;initialize TOKEN buffer
D7F6 338820           (       PZTAPE.ASM):00012                 LEAU    32,X            ;negative ones
D7F9 3F               (       PZTAPE.ASM):00013                 SWI                     ;   .
D7FA 12               (       PZTAPE.ASM):00014                 FCB     NEGRAM          ;   .
D7FB 7ECB9E           (       PZTAPE.ASM):00015                 JMP     GETTOK          ;grab the next token/exit
                      (       PZTAPE.ASM):00016         ;
                      (       PZTAPE.ASM):00017         ;  PZSAVE: Game Restore Function
                      (       PZTAPE.ASM):00018         ;
D7FE 8DF3             (       PZTAPE.ASM):00019         PZSAVE  BSR     FILNAM          ;get the file name
D800 BF007E           (       PZTAPE.ASM):00020                 STX     >$007E          ;set buffer addr
D803 CC000F           (       PZTAPE.ASM):00021                 LDD     #$000F          ;BLKTYP,,BLKLEN  (0=namefile,,15=length)
D806 FD007C           (       PZTAPE.ASM):00022                 STD     >$007C          ;   .
                      (       PZTAPE.ASM):00023         ;
                      (       PZTAPE.ASM):00024         ;  Set up NAMEFILE Block:
                      (       PZTAPE.ASM):00025         ;       Bytes   Description
                      (       PZTAPE.ASM):00026         ;       0-7     Program Name
                      (       PZTAPE.ASM):00027         ;       8       File Type (0=BASIC, 1=DATA, 2=Machine Language)
                      (       PZTAPE.ASM):00028         ;       9       ASCII Flag (0=Binary, -1=ASCII)
                      (       PZTAPE.ASM):00029         ;       10      Gap Flag (1=continuous, -1=gaps)
                      (       PZTAPE.ASM):00030         ;       11-12   Start Addr of Machine Language Program
                      (       PZTAPE.ASM):00031         ;       13-14   Load Addr of Machine Language Program
                      (       PZTAPE.ASM):00032         ;
                      (       PZTAPE.ASM):00033         ;       LDA     #2              ;file type = machine language
                      (       PZTAPE.ASM):00034         ;       STA     8,X             ;   .
                      (       PZTAPE.ASM):00035         ;       CLR     9,X             ;ASCII flag = Binary
                      (       PZTAPE.ASM):00036         ;
D809 0CB8             (       PZTAPE.ASM):00037                 INC     ZFLAG           ;flag for save
D80B 39               (       PZTAPE.ASM):00038                 RTS                     ;bye
                      (       PZTAPE.ASM):00039         ;
                      (       PZTAPE.ASM):00040         ;;;;;        END
                      (    DAGGORATH.ASM):00127                 INCLUDE COMDAT.ASM       ;Initialization Data
                      (       COMDAT.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMDAT.ASM):00002         ;  I N I T I A L I Z A T I O N   D A T A
                      (       COMDAT.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMDAT.ASM):00004         ;
                      (       COMDAT.ASM):00005                 NAM     COMDAT
                      (       COMDAT.ASM):00006         ;     LIBRY  CD
                      (       COMDAT.ASM):00007         ;        XDEF    TCBDAT,RAMDAT,DEMDAT,GAMDAT
                      (       COMDAT.ASM):00008         ;        XDEF    DSP0,DSP1,STSVDB,PRIVDB
                      (       COMDAT.ASM):00009         ;        XDEF    CMTTAB,CMTEND
                      (       COMDAT.ASM):00010         ;
                      (       COMDAT.ASM):00011         ;        XREF    T.SWO2,T.SWO3,T.TOR4,T.SHI4
                      (       COMDAT.ASM):00012         ;        XREF    PLAYER,LUKNEW,HSLOW,BURNER,CREGEN
                      (       COMDAT.ASM):00013         ;        XREF    CLOCK,SWISER,GAME,AUTTAB
                      (       COMDAT.ASM):00014         ;        XREF    SW2SER
                      (       COMDAT.ASM):00015         ;
                      (       COMDAT.ASM):00016         ;        PSCT
                      (       COMDAT.ASM):00017         ;
                      (       COMDAT.ASM):00018         ;
                      (       COMDAT.ASM):00019         ;  DEMDAT: Demonstration Mode Initial Player Objects
                      (       COMDAT.ASM):00020         ;
     D80C             (       COMDAT.ASM):00021         DEMDAT  EQU     *               ;where data starts
D80C 0D               (       COMDAT.ASM):00022                 FCB     T.SWO2          ;iron sword
D80D 0F               (       COMDAT.ASM):00023                 FCB     T.TOR4          ;pine torch
D80E 10               (       COMDAT.ASM):00024                 FCB     T.SHI4          ;leather shield
D80F FF               (       COMDAT.ASM):00025                 FCB     -1              ;end of data
                      (       COMDAT.ASM):00026         ;
                      (       COMDAT.ASM):00027         ;  GAMDAT: Game Mode Initial Player Objects
                      (       COMDAT.ASM):00028         ;
     D810             (       COMDAT.ASM):00029         GAMDAT  EQU     *               ;where data starts
D810 11               (       COMDAT.ASM):00030                 FCB     T.SWO3          ;wooden sword
D811 0F               (       COMDAT.ASM):00031                 FCB     T.TOR4          ;pine torch
D812 FF               (       COMDAT.ASM):00032                 FCB     -1              ;end of data
                      (       COMDAT.ASM):00033         ;
                      (       COMDAT.ASM):00034         ;  System Task Control Blocks
                      (       COMDAT.ASM):00035         ;
     D813             (       COMDAT.ASM):00036         TCBDAT  EQU     *               ;where the data starts
D813 D1F3             (       COMDAT.ASM):00037                 FDB     PLAYER          ;Human Input Module
D815 D1CA             (       COMDAT.ASM):00038                 FDB     LUKNEW          ;Delayed Update Task
D817 D1DD             (       COMDAT.ASM):00039                 FDB     HSLOW           ;Heartrate Hysteresis Task
D819 D1A3             (       COMDAT.ASM):00040                 FDB     BURNER          ;Torch Burn Module
D81B D02F             (       COMDAT.ASM):00041                 FDB     CREGEN          ;Creature Regeneration
D81D 0000             (       COMDAT.ASM):00042                 FDB     0               ;end of initial system TCBs
                      (       COMDAT.ASM):00043         
                      (       COMDAT.ASM):00044         
                      (       COMDAT.ASM):00045         
                      (       COMDAT.ASM):00046         ;
                      (       COMDAT.ASM):00047         ;  Initialization Data Format:
                      (       COMDAT.ASM):00048         ;
                      (       COMDAT.ASM):00049         ;          +----------------+
                      (       COMDAT.ASM):00050         ;  Byte 0  !   Byte Count   !
                      (       COMDAT.ASM):00051         ;          +----------------+----------------+
                      (       COMDAT.ASM):00052         ;  Byte 1  !        Starting Address         !
                      (       COMDAT.ASM):00053         ;          +----------------+----------------+
                      (       COMDAT.ASM):00054         ;
D81F                  (       COMDAT.ASM):00055         INI     MACR
                      (       COMDAT.ASM):00056                 FCB     \2              ;byte count
                      (       COMDAT.ASM):00057                 FDB     \1              ;addr
                      (       COMDAT.ASM):00058                 ENDM
                      (       COMDAT.ASM):00059         
                      (       COMDAT.ASM):00060         
                      (       COMDAT.ASM):00061         
     D81F             (       COMDAT.ASM):00062         RAMDAT  EQU     *
                      (       COMDAT.ASM):00063         ;
                      (       COMDAT.ASM):00064         ;  Interrupt Vectors
                      (       COMDAT.ASM):00065         ;
                      (       COMDAT.ASM):00066                 INI     V$SWI2,3*4      ;four interrupt vectors
D81F 0C               (              INI):00001                 FCB     3*4              ;byte count
D820 0103             (              INI):00002                 FDB     V$SWI2              ;addr
D822 7EC375           (       COMDAT.ASM):00067                 JMP     SW2SER          ;SWI2
D825 7EC356           (       COMDAT.ASM):00068                 JMP     SWISER          ;SWI
D828 7EC281           (       COMDAT.ASM):00069                 JMP     CLOCK           ;NMI
D82B 7EC281           (       COMDAT.ASM):00070                 JMP     CLOCK           ;IRQ
                      (       COMDAT.ASM):00071         ;
                      (       COMDAT.ASM):00072         ;  ONCE-only Initialization Parameters
                      (       COMDAT.ASM):00073         ;
                      (       COMDAT.ASM):00074                 INI     BIGONE+1,23     ;where to start
D82E 17               (              INI):00001                 FCB     23              ;byte count
D82F 0202             (              INI):00002                 FDB     BIGONE+1              ;addr
D831 01               (       COMDAT.ASM):00075                 FCB     1               ;BIGONE (RH)
D832 FFFF             (       COMDAT.ASM):00076                 FDB     $FFFF           ;NEGONE
D834 0080             (       COMDAT.ASM):00077                 FDB     128             ;VCNTRX
D836 004C             (       COMDAT.ASM):00078                 FDB     76              ;VCNTRY
D838 D8A7             (       COMDAT.ASM):00079                 FDB     DSP0            ;FLIP
D83A D8AD             (       COMDAT.ASM):00080                 FDB     DSP1            ;FLOP
D83C D9BF             (       COMDAT.ASM):00081                 FDB     AUTTAB          ;AUTPTR
D83E 0B15             (       COMDAT.ASM):00082                 FDB     OCBLND          ;ODBPTR
D840 02F1             (       COMDAT.ASM):00083                 FDB     LINBUF          ;LINPTR
D842 0C               (       COMDAT.ASM):00084                 FCB     12              ;PROW
D843 16               (       COMDAT.ASM):00085                 FCB     22              ;PCOL
D844 0023             (       COMDAT.ASM):00086                 FDB     30+5            ;POJBWT
D846 17A0             (       COMDAT.ASM):00087                 FCB     $17,160          ;PPOW
                      (       COMDAT.ASM):00088         ;
                      (       COMDAT.ASM):00089         ;  Text Control Blocks
                      (       COMDAT.ASM):00090         ;
                      (       COMDAT.ASM):00091                 INI     TXTEXA,(TX.LEN*3)+(CTYPES*5)
D848 54               (              INI):00001                 FCB     (TX.LEN*3)+(CTYPES*5)              ;byte count
D849 0380             (              INI):00002                 FDB     TXTEXA              ;addr
                      (       COMDAT.ASM):00092         ;
D84B 1000             (       COMDAT.ASM):00093                 FDB     D0$BAS          ;TXTEXA.TXBAS
D84D 0260             (       COMDAT.ASM):00094                 FDB     32*19           ;TXTEXA.TXCHR
D84F 0000             (       COMDAT.ASM):00095                 FDB     0               ;TXTEXA.TXCUR
D851 00FF             (       COMDAT.ASM):00096                 FCB     0,-1            ;TXTEXA.TXINV,,TXTEXA.TXSGL
                      (       COMDAT.ASM):00097         ;
D853 2300             (       COMDAT.ASM):00098                 FDB     D0$BAS+(256*19) ;TXTSTS.TXBAS
D855 0040             (       COMDAT.ASM):00099                 FDB     32*2            ;TXTSTS.TXCHR
D857 0000             (       COMDAT.ASM):00100                 FDB     0               ;TXTSTS.TXCUR
D859 FF00             (       COMDAT.ASM):00101                 FCB     -1,0            ;TXTSTS.TXINV,,TXTSTS.TXSGL
                      (       COMDAT.ASM):00102         ;
D85B 2400             (       COMDAT.ASM):00103                 FDB     D0$BAS+(256*20) ;TXTPRI.TXBAS
D85D 0080             (       COMDAT.ASM):00104                 FDB     32*4            ;TXTPRI.TXCHR
D85F 0000             (       COMDAT.ASM):00105                 FDB     0               ;TXTPRI.TXCUR
D861 0000             (       COMDAT.ASM):00106                 FCB     0,0             ;TXTPRI.TXINV,,TXTPRI.TXSGL
                      (       COMDAT.ASM):00107         ;
                      (       COMDAT.ASM):00108         ;  Creature/Level Matrix
                      (       COMDAT.ASM):00109         ;
D863 0909040200000000 (       COMDAT.ASM):00110         CMTTAB  FCB     9,9,4,2,0,0,0,0,0,0,0,0
     00000000
D86F 0204000606060000 (       COMDAT.ASM):00111                 FCB     2,4,0,6,6,6,0,0,0,0,0,0
     00000000
                      (       COMDAT.ASM):00112         
                      (       COMDAT.ASM):00113         
                      (       COMDAT.ASM):00114         
D87B 0000000400060804 (       COMDAT.ASM):00115                 FCB     0,0,0,4,0,6,8,4,0,0,1,0
     00000100
D887 0000000000000806 (       COMDAT.ASM):00116                 FCB     0,0,0,0,0,0,8,6,6,4,0,0
     06040000
D893 0202020202020204 (       COMDAT.ASM):00117                 FCB     2,2,2,2,2,2,2,4,4,8,0,1
     04080001
     D89F             (       COMDAT.ASM):00118         CMTEND  EQU     *
                      (       COMDAT.ASM):00119         
                      (       COMDAT.ASM):00120         
                      (       COMDAT.ASM):00121         
                      (       COMDAT.ASM):00122         ;
                      (       COMDAT.ASM):00123         ;  Empty Hand Parameters
                      (       COMDAT.ASM):00124         ;
                      (       COMDAT.ASM):00125                 INI     P.OCCLS+EMPHND,4 ;two bytes
D89F 04               (              INI):00001                 FCB     4              ;byte count
D8A0 0B11             (              INI):00002                 FDB     P.OCCLS+EMPHND              ;addr
D8A2 0400             (       COMDAT.ASM):00126                 FCB     4,0             ;sword noises
D8A4 0005             (       COMDAT.ASM):00127                 FCB     0,5             ;magic/physical offense
                      (       COMDAT.ASM):00128         ;
                      (       COMDAT.ASM):00129         ;  End of Direct Page RAM Initial Values
                      (       COMDAT.ASM):00130         ;
D8A6 00               (       COMDAT.ASM):00131                 FCB     0
                      (       COMDAT.ASM):00132         
                      (       COMDAT.ASM):00133         
                      (       COMDAT.ASM):00134         
                      (       COMDAT.ASM):00135         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMDAT.ASM):00136         ;  P U R E   D A T A   B L O C K S
                      (       COMDAT.ASM):00137         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       COMDAT.ASM):00138         ;
                      (       COMDAT.ASM):00139         ;  Vector Display Control Blocks
                      (       COMDAT.ASM):00140         ;
D8A7 1000             (       COMDAT.ASM):00141         DSP0    FDB     D0$BAS          ;display base addr
D8A9 2300             (       COMDAT.ASM):00142                 FDB     D0$END          ;display ending addr
D8AB 2046             (       COMDAT.ASM):00143                 FDB     D0.SAM          ;magic number for SAM
                      (       COMDAT.ASM):00144         ;
D8AD 2800             (       COMDAT.ASM):00145         DSP1    FDB     D1$BAS          ;display base addr
D8AF 3B00             (       COMDAT.ASM):00146                 FDB     D1$END          ;display ending addr
D8B1 20A6             (       COMDAT.ASM):00147                 FDB     D1.SAM          ;magic number for SAM
                      (       COMDAT.ASM):00148         ;
D8B3 2300             (       COMDAT.ASM):00149         STSVDB  FDB     D0$BAS+152*32   ;152nd scan line
D8B5 2400             (       COMDAT.ASM):00150                 FDB     D0$BAS+160*32   ;160th scan line
D8B7 0000             (       COMDAT.ASM):00151                 FDB     0               ;filler
                      (       COMDAT.ASM):00152         ;
D8B9 3B00             (       COMDAT.ASM):00153                 FDB     D1$BAS+152*32   ;   .
D8BB 3C00             (       COMDAT.ASM):00154                 FDB     D1$BAS+160*32   ;   .
D8BD 0000             (       COMDAT.ASM):00155                 FDB     0               ;   .
                      (       COMDAT.ASM):00156         ;
D8BF 2400             (       COMDAT.ASM):00157         PRIVDB  FDB     D0$BAS+160*32   ;160th scan line
D8C1 2800             (       COMDAT.ASM):00158                 FDB     D0$BAS+192*32   ;192nd scan line
D8C3 0000             (       COMDAT.ASM):00159                 FDB     0               ;filler
                      (       COMDAT.ASM):00160         ;
D8C5 3C00             (       COMDAT.ASM):00161                 FDB     D1$BAS+160*32   ;   .
D8C7 4000             (       COMDAT.ASM):00162                 FDB     D1$BAS+192*32   ;   .
D8C9 0000             (       COMDAT.ASM):00163                 FDB     0               ;   .
                      (       COMDAT.ASM):00164         ;
                      (       COMDAT.ASM):00165         ;;;;;        END
                      (    DAGGORATH.ASM):00128                 INCLUDE TOKEN.ASM        ;Token Tables
                      (        TOKEN.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (        TOKEN.ASM):00002         ;  T O K E N   T A B L E S
                      (        TOKEN.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (        TOKEN.ASM):00004         ;
                      (        TOKEN.ASM):00005                 NAM     TOKEN
                      (        TOKEN.ASM):00006         ;        XDEF    CMDTAB,DIRTAB,GENTAB,ADJTAB,AUTTAB,AUTEND
                      (        TOKEN.ASM):00007         ;        PSCT
                      (        TOKEN.ASM):00008         ;
                      (        TOKEN.ASM):00009         ;  Are we debugging?
                      (        TOKEN.ASM):00010         ;
                      (        TOKEN.ASM):00011                 IFNDEF  DEBFLG
D8CB                  (        TOKEN.ASM):00012         DEBFLG  EQU     0
                      (        TOKEN.ASM):00013                 ENDC
                      (        TOKEN.ASM):00014         
                      (        TOKEN.ASM):00015         ;
                      (        TOKEN.ASM):00016         ;  CMDTAB: Primary Command Tokens
                      (        TOKEN.ASM):00017         ;
D8CB 0F               (        TOKEN.ASM):00018         CMDTAB  FCB     CMDNUM          ;number of entries
     0000             (        TOKEN.ASM):00019         FOO     SET     0
                      (        TOKEN.ASM):00020         
D8CC                  (        TOKEN.ASM):00021         XDEF    MACR
D8CC                  (        TOKEN.ASM):00022         \1      EQU     FOO
D8CC                  (        TOKEN.ASM):00023         FOO     SET     FOO+1
D8CC                  (        TOKEN.ASM):00024         \2      EQU     *
                      (        TOKEN.ASM):00025                 ENDM
                      (        TOKEN.ASM):00026         
                      (        TOKEN.ASM):00027         ;
                      (        TOKEN.ASM):00028                 XDEF    T.ATTK,M$ATTK
     0000             (             XDEF):00001         T.ATTK      EQU     FOO
     0001             (             XDEF):00002         FOO     SET     FOO+1
     D8CC             (             XDEF):00003         M$ATTK      EQU     *
D8CC 30               (        TOKEN.ASM):00029                 FCB     %00110000       ;ATTACK
D8CD 03               (        TOKEN.ASM):00030                 FCB     %00000011       ;ATTACK
D8CE 4A               (        TOKEN.ASM):00031                 FCB     %01001010       ;ATTACK
D8CF 04               (        TOKEN.ASM):00032                 FCB     %00000100       ;ATTACK
D8D0 6B               (        TOKEN.ASM):00033                 FCB     %01101011       ;ATTACK
                      (        TOKEN.ASM):00034         ;
                      (        TOKEN.ASM):00035                 XDEF    T.CLIM,M$CLIM
     0001             (             XDEF):00001         T.CLIM      EQU     FOO
     0002             (             XDEF):00002         FOO     SET     FOO+1
     D8D1             (             XDEF):00003         M$CLIM      EQU     *
D8D1 28               (        TOKEN.ASM):00036                 FCB     %00101000       ;CLIMB
D8D2 06               (        TOKEN.ASM):00037                 FCB     %00000110       ;CLIMB
D8D3 C4               (        TOKEN.ASM):00038                 FCB     %11000100       ;CLIMB
D8D4 B4               (        TOKEN.ASM):00039                 FCB     %10110100       ;CLIMB
D8D5 40               (        TOKEN.ASM):00040                 FCB     %01000000       ;CLIMB
                      (        TOKEN.ASM):00041         ;
                      (        TOKEN.ASM):00042                 XDEF    T.DROP,M$DROP
     0002             (             XDEF):00001         T.DROP      EQU     FOO
     0003             (             XDEF):00002         FOO     SET     FOO+1
     D8D6             (             XDEF):00003         M$DROP      EQU     *
D8D6 20               (        TOKEN.ASM):00043                 FCB     %00100000       ;DROP
D8D7 09               (        TOKEN.ASM):00044                 FCB     %00001001       ;DROP
D8D8 27               (        TOKEN.ASM):00045                 FCB     %00100111       ;DROP
D8D9 C0               (        TOKEN.ASM):00046                 FCB     %11000000       ;DROP
                      (        TOKEN.ASM):00047         ;
                      (        TOKEN.ASM):00048                 XDEF    T.EXAM,M$EXAM
     0003             (             XDEF):00001         T.EXAM      EQU     FOO
     0004             (             XDEF):00002         FOO     SET     FOO+1
     D8DA             (             XDEF):00003         M$EXAM      EQU     *
D8DA 38               (        TOKEN.ASM):00049                 FCB     %00111000       ;EXAMINE
D8DB 0B               (        TOKEN.ASM):00050                 FCB     %00001011       ;EXAMINE
D8DC 80               (        TOKEN.ASM):00051                 FCB     %10000000       ;EXAMINE
D8DD B5               (        TOKEN.ASM):00052                 FCB     %10110101       ;EXAMINE
D8DE 2E               (        TOKEN.ASM):00053                 FCB     %00101110       ;EXAMINE
D8DF 28               (        TOKEN.ASM):00054                 FCB     %00101000       ;EXAMINE
                      (        TOKEN.ASM):00055         ;
                      (        TOKEN.ASM):00056                 XDEF    T.GET,M$GET
     0004             (             XDEF):00001         T.GET      EQU     FOO
     0005             (             XDEF):00002         FOO     SET     FOO+1
     D8E0             (             XDEF):00003         M$GET      EQU     *
D8E0 18               (        TOKEN.ASM):00057                 FCB     %00011000       ;GET
D8E1 0E               (        TOKEN.ASM):00058                 FCB     %00001110       ;GET
D8E2 5A               (        TOKEN.ASM):00059                 FCB     %01011010       ;GET
D8E3 00               (        TOKEN.ASM):00060                 FCB     %00000000       ;GET
                      (        TOKEN.ASM):00061         ;
                      (        TOKEN.ASM):00062         
                      (        TOKEN.ASM):00063         
                      (        TOKEN.ASM):00064         
                      (        TOKEN.ASM):00065         ;
                      (        TOKEN.ASM):00066                 XDEF    T.INCN,M$INCN
     0005             (             XDEF):00001         T.INCN      EQU     FOO
     0006             (             XDEF):00002         FOO     SET     FOO+1
     D8E4             (             XDEF):00003         M$INCN      EQU     *
D8E4 30               (        TOKEN.ASM):00067                 FCB     %00110000       ;INCANT
D8E5 12               (        TOKEN.ASM):00068                 FCB     %00010010       ;INCANT
D8E6 E1               (        TOKEN.ASM):00069                 FCB     %11100001       ;INCANT
D8E7 85               (        TOKEN.ASM):00070                 FCB     %10000101       ;INCANT
D8E8 D4               (        TOKEN.ASM):00071                 FCB     %11010100       ;INCANT
                      (        TOKEN.ASM):00072         ;
                      (        TOKEN.ASM):00073                 XDEF    T.LOOK,M$LOOK
     0006             (             XDEF):00001         T.LOOK      EQU     FOO
     0007             (             XDEF):00002         FOO     SET     FOO+1
     D8E9             (             XDEF):00003         M$LOOK      EQU     *
D8E9 20               (        TOKEN.ASM):00074                 FCB     %00100000       ;LOOK
D8EA 18               (        TOKEN.ASM):00075                 FCB     %00011000       ;LOOK
D8EB F7               (        TOKEN.ASM):00076                 FCB     %11110111       ;LOOK
D8EC AC               (        TOKEN.ASM):00077                 FCB     %10101100       ;LOOK
                      (        TOKEN.ASM):00078         ;
                      (        TOKEN.ASM):00079                 XDEF    T.MOVE,M$MOVE
     0007             (             XDEF):00001         T.MOVE      EQU     FOO
     0008             (             XDEF):00002         FOO     SET     FOO+1
     D8ED             (             XDEF):00003         M$MOVE      EQU     *
D8ED 20               (        TOKEN.ASM):00080                 FCB     %00100000       ;MOVE
D8EE 1A               (        TOKEN.ASM):00081                 FCB     %00011010       ;MOVE
D8EF FB               (        TOKEN.ASM):00082                 FCB     %11111011       ;MOVE
D8F0 14               (        TOKEN.ASM):00083                 FCB     %00010100       ;MOVE
                      (        TOKEN.ASM):00084         ;
                      (        TOKEN.ASM):00085                 XDEF    T.PULL,M$PULL
     0008             (             XDEF):00001         T.PULL      EQU     FOO
     0009             (             XDEF):00002         FOO     SET     FOO+1
     D8F1             (             XDEF):00003         M$PULL      EQU     *
D8F1 20               (        TOKEN.ASM):00086                 FCB     %00100000       ;PULL
D8F2 21               (        TOKEN.ASM):00087                 FCB     %00100001       ;PULL
D8F3 56               (        TOKEN.ASM):00088                 FCB     %01010110       ;PULL
D8F4 30               (        TOKEN.ASM):00089                 FCB     %00110000       ;PULL
                      (        TOKEN.ASM):00090         ;
                      (        TOKEN.ASM):00091                 XDEF    T.REVE,M$REVE
     0009             (             XDEF):00001         T.REVE      EQU     FOO
     000A             (             XDEF):00002         FOO     SET     FOO+1
     D8F5             (             XDEF):00003         M$REVE      EQU     *
D8F5 30               (        TOKEN.ASM):00092                 FCB     %00110000       ;REVEAL
D8F6 24               (        TOKEN.ASM):00093                 FCB     %00100100       ;REVEAL
D8F7 5B               (        TOKEN.ASM):00094                 FCB     %01011011       ;REVEAL
D8F8 14               (        TOKEN.ASM):00095                 FCB     %00010100       ;REVEAL
D8F9 2C               (        TOKEN.ASM):00096                 FCB     %00101100       ;REVEAL
                      (        TOKEN.ASM):00097         ;
                      (        TOKEN.ASM):00098                 XDEF    T.STOW,M$STOW
     000A             (             XDEF):00001         T.STOW      EQU     FOO
     000B             (             XDEF):00002         FOO     SET     FOO+1
     D8FA             (             XDEF):00003         M$STOW      EQU     *
D8FA 20               (        TOKEN.ASM):00099                 FCB     %00100000       ;STOW
D8FB 27               (        TOKEN.ASM):00100                 FCB     %00100111       ;STOW
D8FC 47               (        TOKEN.ASM):00101                 FCB     %01000111       ;STOW
D8FD DC               (        TOKEN.ASM):00102                 FCB     %11011100       ;STOW
                      (        TOKEN.ASM):00103         
                      (        TOKEN.ASM):00104         
                      (        TOKEN.ASM):00105         
                      (        TOKEN.ASM):00106                 XDEF    T.TURN,M$TURN
     000B             (             XDEF):00001         T.TURN      EQU     FOO
     000C             (             XDEF):00002         FOO     SET     FOO+1
     D8FE             (             XDEF):00003         M$TURN      EQU     *
D8FE 20               (        TOKEN.ASM):00107                 FCB     %00100000       ;TURN
D8FF 29               (        TOKEN.ASM):00108                 FCB     %00101001       ;TURN
D900 59               (        TOKEN.ASM):00109                 FCB     %01011001       ;TURN
D901 38               (        TOKEN.ASM):00110                 FCB     %00111000       ;TURN
                      (        TOKEN.ASM):00111         ;        
                      (        TOKEN.ASM):00112                 XDEF    T.USE,M$USE
     000C             (             XDEF):00001         T.USE      EQU     FOO
     000D             (             XDEF):00002         FOO     SET     FOO+1
     D902             (             XDEF):00003         M$USE      EQU     *
D902 18               (        TOKEN.ASM):00113                 FCB     %00011000       ;USE
D903 2B               (        TOKEN.ASM):00114                 FCB     %00101011       ;USE
D904 32               (        TOKEN.ASM):00115                 FCB     %00110010       ;USE
D905 80               (        TOKEN.ASM):00116                 FCB     %10000000       ;USE
                      (        TOKEN.ASM):00117         ;        
                      (        TOKEN.ASM):00118                 XDEF    T.ZLOA,M$ZLOA
     000D             (             XDEF):00001         T.ZLOA      EQU     FOO
     000E             (             XDEF):00002         FOO     SET     FOO+1
     D906             (             XDEF):00003         M$ZLOA      EQU     *
D906 28               (        TOKEN.ASM):00119                 FCB     %00101000       ;ZLOAD
D907 34               (        TOKEN.ASM):00120                 FCB     %00110100       ;ZLOAD
D908 C7               (        TOKEN.ASM):00121                 FCB     %11000111       ;ZLOAD
D909 84               (        TOKEN.ASM):00122                 FCB     %10000100       ;ZLOAD
D90A 80               (        TOKEN.ASM):00123                 FCB     %10000000       ;ZLOAD
                      (        TOKEN.ASM):00124         ;
                      (        TOKEN.ASM):00125                 XDEF    T.ZSAV,M$ZSAV
     000E             (             XDEF):00001         T.ZSAV      EQU     FOO
     000F             (             XDEF):00002         FOO     SET     FOO+1
     D90B             (             XDEF):00003         M$ZSAV      EQU     *
D90B 28               (        TOKEN.ASM):00126                 FCB     %00101000       ;ZSAVE
D90C 35               (        TOKEN.ASM):00127                 FCB     %00110101       ;ZSAVE
D90D 30               (        TOKEN.ASM):00128                 FCB     %00110000       ;ZSAVE
D90E D8               (        TOKEN.ASM):00129                 FCB     %11011000       ;ZSAVE
D90F A0               (        TOKEN.ASM):00130                 FCB     %10100000       ;ZSAVE
                      (        TOKEN.ASM):00131         
                      (        TOKEN.ASM):00132         
                      (        TOKEN.ASM):00133         
                      (        TOKEN.ASM):00134         ;
                      (        TOKEN.ASM):00135         ;  Debugging Commands
                      (        TOKEN.ASM):00136         ;
                      (        TOKEN.ASM):00137                 IF      DEBFLG
                      (        TOKEN.ASM):00138         ;
                      (        TOKEN.ASM):00139                 XDEF    T.QMAP,M$QMAP
                      (        TOKEN.ASM):00140                 FCB     %00100000       ;QMAP
                      (        TOKEN.ASM):00141                 FCB     %00100010       ;QMAP
                      (        TOKEN.ASM):00142                 FCB     %11010000       ;QMAP
                      (        TOKEN.ASM):00143                 FCB     %11000000       ;QMAP
                      (        TOKEN.ASM):00144         ;
                      (        TOKEN.ASM):00145                 XDEF    T.QUP,M$QUP
                      (        TOKEN.ASM):00146                 FCB     %00011000       ;QUP
                      (        TOKEN.ASM):00147                 FCB     %00100011       ;QUP
                      (        TOKEN.ASM):00148                 FCB     %01011000       ;QUP
                      (        TOKEN.ASM):00149                 FCB     %00000000       ;QUP
                      (        TOKEN.ASM):00150         ;
                      (        TOKEN.ASM):00151                 XDEF    T.QDN,M$QDN
                      (        TOKEN.ASM):00152                 FCB     %00011000       ;QDN
                      (        TOKEN.ASM):00153                 FCB     %00100010       ;QDN
                      (        TOKEN.ASM):00154                 FCB     %01000111       ;QDN
                      (        TOKEN.ASM):00155                 FCB     %00000000       ;QDN
                      (        TOKEN.ASM):00156         ;
                      (        TOKEN.ASM):00157                 XDEF    T.QRUP,M$QRUP
                      (        TOKEN.ASM):00158                 FCB     %00100000       ;QRUP
                      (        TOKEN.ASM):00159                 FCB     %00100011       ;QRUP
                      (        TOKEN.ASM):00160                 FCB     %00101010       ;QRUP
                      (        TOKEN.ASM):00161                 FCB     %11000000       ;QRUP
                      (        TOKEN.ASM):00162         ;
                      (        TOKEN.ASM):00163                 XDEF    T.QRDN,M$QRDN
                      (        TOKEN.ASM):00164                 FCB     %00100000       ;QRDN
                      (        TOKEN.ASM):00165                 FCB     %00100011       ;QRDN
                      (        TOKEN.ASM):00166                 FCB     %00100010       ;QRDN
                      (        TOKEN.ASM):00167                 FCB     %00111000       ;QRDN
                      (        TOKEN.ASM):00168         ;
                      (        TOKEN.ASM):00169                 XDEF    T.QMUP,M$QMUP
                      (        TOKEN.ASM):00170                 FCB     %00100000       ;QMUP
                      (        TOKEN.ASM):00171                 FCB     %00100010       ;QMUP
                      (        TOKEN.ASM):00172                 FCB     %11011010       ;QMUP
                      (        TOKEN.ASM):00173                 FCB     %11000000       ;QMUP
                      (        TOKEN.ASM):00174         ;
                      (        TOKEN.ASM):00175                 
                      (        TOKEN.ASM):00176                 
                      (        TOKEN.ASM):00177                 
                      (        TOKEN.ASM):00178                 XDEF    T.QMDN,M$QMDN
                      (        TOKEN.ASM):00179                 FCB     %00100000       ;QMDN
                      (        TOKEN.ASM):00180                 FCB     %00100010       ;QMDN
                      (        TOKEN.ASM):00181                 FCB     %11010010       ;QMDN
                      (        TOKEN.ASM):00182                 FCB     %00111000       ;QMDN
                      (        TOKEN.ASM):00183         ;
                      (        TOKEN.ASM):00184                 ENDIF                   ; DEBFLG  (end of debug command table.)
                      (        TOKEN.ASM):00185         ;
                      (        TOKEN.ASM):00186         ;
     000F             (        TOKEN.ASM):00187         CMDNUM  EQU     FOO             ;number of entries
                      (        TOKEN.ASM):00188         
                      (        TOKEN.ASM):00189         
                      (        TOKEN.ASM):00190         
                      (        TOKEN.ASM):00191         ;
                      (        TOKEN.ASM):00192         ;  DIRTAB: Direction Token Tables
                      (        TOKEN.ASM):00193         ;
D910 06               (        TOKEN.ASM):00194         DIRTAB  FCB     DIRNUM
     0000             (        TOKEN.ASM):00195         FOO     SET     0
                      (        TOKEN.ASM):00196         ;
                      (        TOKEN.ASM):00197                 XDEF    T.LT,M$LT
     0000             (             XDEF):00001         T.LT      EQU     FOO
     0001             (             XDEF):00002         FOO     SET     FOO+1
     D911             (             XDEF):00003         M$LT      EQU     *
D911 20               (        TOKEN.ASM):00198                 FCB     %00100000       ;LEFT
D912 18               (        TOKEN.ASM):00199                 FCB     %00011000       ;LEFT
D913 53               (        TOKEN.ASM):00200                 FCB     %01010011       ;LEFT
D914 50               (        TOKEN.ASM):00201                 FCB     %01010000       ;LEFT
                      (        TOKEN.ASM):00202         ;
                      (        TOKEN.ASM):00203                 XDEF    T.RT,M$RT
     0001             (             XDEF):00001         T.RT      EQU     FOO
     0002             (             XDEF):00002         FOO     SET     FOO+1
     D915             (             XDEF):00003         M$RT      EQU     *
D915 28               (        TOKEN.ASM):00204                 FCB     %00101000       ;RIGHT
D916 24               (        TOKEN.ASM):00205                 FCB     %00100100       ;RIGHT
D917 93               (        TOKEN.ASM):00206                 FCB     %10010011       ;RIGHT
D918 A2               (        TOKEN.ASM):00207                 FCB     %10100010       ;RIGHT
D919 80               (        TOKEN.ASM):00208                 FCB     %10000000       ;RIGHT
                      (        TOKEN.ASM):00209         ;
                      (        TOKEN.ASM):00210                 XDEF    T.BAK,M$BAK
     0002             (             XDEF):00001         T.BAK      EQU     FOO
     0003             (             XDEF):00002         FOO     SET     FOO+1
     D91A             (             XDEF):00003         M$BAK      EQU     *
D91A 20               (        TOKEN.ASM):00211                 FCB     %00100000       ;BACK
D91B 04               (        TOKEN.ASM):00212                 FCB     %00000100       ;BACK
D91C 11               (        TOKEN.ASM):00213                 FCB     %00010001       ;BACK
D91D AC               (        TOKEN.ASM):00214                 FCB     %10101100       ;BACK
                      (        TOKEN.ASM):00215         ;
                      (        TOKEN.ASM):00216         
                      (        TOKEN.ASM):00217         
                      (        TOKEN.ASM):00218         
                      (        TOKEN.ASM):00219                 XDEF    T.AROU,M$AROU
     0003             (             XDEF):00001         T.AROU      EQU     FOO
     0004             (             XDEF):00002         FOO     SET     FOO+1
     D91E             (             XDEF):00003         M$AROU      EQU     *
D91E 30               (        TOKEN.ASM):00220                 FCB     %00110000       ;AROUND
D91F 03               (        TOKEN.ASM):00221                 FCB     %00000011       ;AROUND
D920 27               (        TOKEN.ASM):00222                 FCB     %00100111       ;AROUND
D921 D5               (        TOKEN.ASM):00223                 FCB     %11010101       ;AROUND
D922 C4               (        TOKEN.ASM):00224                 FCB     %11000100       ;AROUND
                      (        TOKEN.ASM):00225         ;
                      (        TOKEN.ASM):00226                 XDEF    T.UP,M$UP
     0004             (             XDEF):00001         T.UP      EQU     FOO
     0005             (             XDEF):00002         FOO     SET     FOO+1
     D923             (             XDEF):00003         M$UP      EQU     *
D923 10               (        TOKEN.ASM):00227                 FCB     %00010000       ;UP
D924 2B               (        TOKEN.ASM):00228                 FCB     %00101011       ;UP
D925 00               (        TOKEN.ASM):00229                 FCB     %00000000       ;UP
                      (        TOKEN.ASM):00230         ;        
                      (        TOKEN.ASM):00231                 XDEF    T.DN,M$DN
     0005             (             XDEF):00001         T.DN      EQU     FOO
     0006             (             XDEF):00002         FOO     SET     FOO+1
     D926             (             XDEF):00003         M$DN      EQU     *
D926 20               (        TOKEN.ASM):00232                 FCB     %00100000       ;DOWN
D927 08               (        TOKEN.ASM):00233                 FCB     %00001000       ;DOWN
D928 FB               (        TOKEN.ASM):00234                 FCB     %11111011       ;DOWN
D929 B8               (        TOKEN.ASM):00235                 FCB     %10111000       ;DOWN
                      (        TOKEN.ASM):00236         ;
     0006             (        TOKEN.ASM):00237         DIRNUM  EQU     FOO
                      (        TOKEN.ASM):00238         
                      (        TOKEN.ASM):00239         
                      (        TOKEN.ASM):00240         
                      (        TOKEN.ASM):00241         ;
                      (        TOKEN.ASM):00242         ;  ADJTAB: Adjective Token Tables
                      (        TOKEN.ASM):00243         ;
D92A 19               (        TOKEN.ASM):00244         ADJTAB  FCB     ADJNUM
     0000             (        TOKEN.ASM):00245         FOO     SET     0
                      (        TOKEN.ASM):00246         ;
                      (        TOKEN.ASM):00247         ;  Level-4
                      (        TOKEN.ASM):00248         ;
                      (        TOKEN.ASM):00249                 XDEF    T.RN05,M$RN05
     0000             (             XDEF):00001         T.RN05      EQU     FOO
     0001             (             XDEF):00002         FOO     SET     FOO+1
     D92B             (             XDEF):00003         M$RN05      EQU     *
D92B 38               (        TOKEN.ASM):00250                 FCB     %00111000       ;SUPREME
D92C 67               (        TOKEN.ASM):00251                 FCB     %01100111       ;SUPREME
D92D 58               (        TOKEN.ASM):00252                 FCB     %01011000       ;SUPREME
D92E 48               (        TOKEN.ASM):00253                 FCB     %01001000       ;SUPREME
D92F AD               (        TOKEN.ASM):00254                 FCB     %10101101       ;SUPREME
D930 28               (        TOKEN.ASM):00255                 FCB     %00101000       ;SUPREME
                      (        TOKEN.ASM):00256         ;
                      (        TOKEN.ASM):00257         ;  Level-3 Objects
                      (        TOKEN.ASM):00258         ;
                      (        TOKEN.ASM):00259                 XDEF    T.RN01,M$RN01
     0001             (             XDEF):00001         T.RN01      EQU     FOO
     0002             (             XDEF):00002         FOO     SET     FOO+1
     D931             (             XDEF):00003         M$RN01      EQU     *
D931 28               (        TOKEN.ASM):00260                 FCB     %00101000       ;JOULE
D932 54               (        TOKEN.ASM):00261                 FCB     %01010100       ;JOULE
D933 FA               (        TOKEN.ASM):00262                 FCB     %11111010       ;JOULE
D934 B0               (        TOKEN.ASM):00263                 FCB     %10110000       ;JOULE
D935 A0               (        TOKEN.ASM):00264                 FCB     %10100000       ;JOULE
                      (        TOKEN.ASM):00265         ;
                      (        TOKEN.ASM):00266                 XDEF    T.SWO1,M$SWO1
     0002             (             XDEF):00001         T.SWO1      EQU     FOO
     0003             (             XDEF):00002         FOO     SET     FOO+1
     D936             (             XDEF):00003         M$SWO1      EQU     *
D936 31               (        TOKEN.ASM):00267                 FCB     %00110001       ;ELVISH
D937 0A               (        TOKEN.ASM):00268                 FCB     %00001010       ;ELVISH
D938 CB               (        TOKEN.ASM):00269                 FCB     %11001011       ;ELVISH
D939 26               (        TOKEN.ASM):00270                 FCB     %00100110       ;ELVISH
D93A 68               (        TOKEN.ASM):00271                 FCB     %01101000       ;ELVISH
                      (        TOKEN.ASM):00272         ;
                      (        TOKEN.ASM):00273                 XDEF    T.SHI1,M$SHI1
     0003             (             XDEF):00001         T.SHI1      EQU     FOO
     0004             (             XDEF):00002         FOO     SET     FOO+1
     D93B             (             XDEF):00003         M$SHI1      EQU     *
D93B 38               (        TOKEN.ASM):00274                 FCB     %00111000       ;MITHRIL
D93C DA               (        TOKEN.ASM):00275                 FCB     %11011010       ;MITHRIL
D93D 9A               (        TOKEN.ASM):00276                 FCB     %10011010       ;MITHRIL
D93E 22               (        TOKEN.ASM):00277                 FCB     %00100010       ;MITHRIL
D93F 49               (        TOKEN.ASM):00278                 FCB     %01001001       ;MITHRIL
D940 60               (        TOKEN.ASM):00279                 FCB     %01100000       ;MITHRIL
                      (        TOKEN.ASM):00280         ;
                      (        TOKEN.ASM):00281         
                      (        TOKEN.ASM):00282         
                      (        TOKEN.ASM):00283         
                      (        TOKEN.ASM):00284         ;
                      (        TOKEN.ASM):00285         ;  Level-2 Objects
                      (        TOKEN.ASM):00286         ;
                      (        TOKEN.ASM):00287                 XDEF    T.SCR1,M$SCR1
     0004             (             XDEF):00001         T.SCR1      EQU     FOO
     0005             (             XDEF):00002         FOO     SET     FOO+1
     D941             (             XDEF):00003         M$SCR1      EQU     *
D941 20               (        TOKEN.ASM):00288                 FCB     %00100000       ;SEER
D942 A6               (        TOKEN.ASM):00289                 FCB     %10100110       ;SEER
D943 52               (        TOKEN.ASM):00290                 FCB     %01010010       ;SEER
D944 C8               (        TOKEN.ASM):00291                 FCB     %11001000       ;SEER
                      (        TOKEN.ASM):00292         ;
                      (        TOKEN.ASM):00293                 XDEF    T.FLA1,M$FLA1
     0005             (             XDEF):00001         T.FLA1      EQU     FOO
     0006             (             XDEF):00002         FOO     SET     FOO+1
     D945             (             XDEF):00003         M$FLA1      EQU     *
D945 28               (        TOKEN.ASM):00294                 FCB     %00101000       ;THEWS
D946 28               (        TOKEN.ASM):00295                 FCB     %00101000       ;THEWS
D947 82               (        TOKEN.ASM):00296                 FCB     %10000010       ;THEWS
D948 DE               (        TOKEN.ASM):00297                 FCB     %11011110       ;THEWS
D949 60               (        TOKEN.ASM):00298                 FCB     %01100000       ;THEWS
                      (        TOKEN.ASM):00299         ;
                      (        TOKEN.ASM):00300         ;  Level-1 Objects
                      (        TOKEN.ASM):00301         ;
                      (        TOKEN.ASM):00302                 XDEF    T.RN03,M$RN03
     0006             (             XDEF):00001         T.RN03      EQU     FOO
     0007             (             XDEF):00002         FOO     SET     FOO+1
     D94A             (             XDEF):00003         M$RN03      EQU     *
D94A 20               (        TOKEN.ASM):00303                 FCB     %00100000       ;RIME
D94B 64               (        TOKEN.ASM):00304                 FCB     %01100100       ;RIME
D94C 96               (        TOKEN.ASM):00305                 FCB     %10010110       ;RIME
D94D 94               (        TOKEN.ASM):00306                 FCB     %10010100       ;RIME
                      (        TOKEN.ASM):00307         ;
                      (        TOKEN.ASM):00308                 XDEF    T.SCR2,M$SCR2
     0007             (             XDEF):00001         T.SCR2      EQU     FOO
     0008             (             XDEF):00002         FOO     SET     FOO+1
     D94E             (             XDEF):00003         M$SCR2      EQU     *
D94E 30               (        TOKEN.ASM):00309                 FCB     %00110000       ;VISION
D94F AC               (        TOKEN.ASM):00310                 FCB     %10101100       ;VISION
D950 99               (        TOKEN.ASM):00311                 FCB     %10011001       ;VISION
D951 A5               (        TOKEN.ASM):00312                 FCB     %10100101       ;VISION
D952 EE               (        TOKEN.ASM):00313                 FCB     %11101110       ;VISION
                      (        TOKEN.ASM):00314         ;
                      (        TOKEN.ASM):00315                 XDEF    T.FLA3,M$FLA3
     0008             (             XDEF):00001         T.FLA3      EQU     FOO
     0009             (             XDEF):00002         FOO     SET     FOO+1
     D953             (             XDEF):00003         M$FLA3      EQU     *
D953 20               (        TOKEN.ASM):00316                 FCB     %00100000       ;ABYE
D954 02               (        TOKEN.ASM):00317                 FCB     %00000010       ;ABYE
D955 2C               (        TOKEN.ASM):00318                 FCB     %00101100       ;ABYE
D956 94               (        TOKEN.ASM):00319                 FCB     %10010100       ;ABYE
                      (        TOKEN.ASM):00320         ;
                      (        TOKEN.ASM):00321         
                      (        TOKEN.ASM):00322         
                      (        TOKEN.ASM):00323         
                      (        TOKEN.ASM):00324                 XDEF    T.FLA2,M$FLA2
     0009             (             XDEF):00001         T.FLA2      EQU     FOO
     000A             (             XDEF):00002         FOO     SET     FOO+1
     D957             (             XDEF):00003         M$FLA2      EQU     *
D957 20               (        TOKEN.ASM):00325                 FCB     %00100000       ;HALE
D958 10               (        TOKEN.ASM):00326                 FCB     %00010000       ;HALE
D959 16               (        TOKEN.ASM):00327                 FCB     %00010110       ;HALE
D95A 14               (        TOKEN.ASM):00328                 FCB     %00010100       ;HALE
                      (        TOKEN.ASM):00329         ;
                      (        TOKEN.ASM):00330                 XDEF    T.TOR1,M$TOR1
     000A             (             XDEF):00001         T.TOR1      EQU     FOO
     000B             (             XDEF):00002         FOO     SET     FOO+1
     D95B             (             XDEF):00003         M$TOR1      EQU     *
D95B 29               (        TOKEN.ASM):00331                 FCB     %00101001       ;SOLAR
D95C 66               (        TOKEN.ASM):00332                 FCB     %01100110       ;SOLAR
D95D F6               (        TOKEN.ASM):00333                 FCB     %11110110       ;SOLAR
D95E 06               (        TOKEN.ASM):00334                 FCB     %00000110       ;SOLAR
D95F 40               (        TOKEN.ASM):00335                 FCB     %01000000       ;SOLAR
                      (        TOKEN.ASM):00336         ;
                      (        TOKEN.ASM):00337                 XDEF    T.SHI3,M$SHI3
     000B             (             XDEF):00001         T.SHI3      EQU     FOO
     000C             (             XDEF):00002         FOO     SET     FOO+1
     D960             (             XDEF):00003         M$SHI3      EQU     *
D960 30               (        TOKEN.ASM):00338                 FCB     %00110000       ;BRONZE
D961 C5               (        TOKEN.ASM):00339                 FCB     %11000101       ;BRONZE
D962 27               (        TOKEN.ASM):00340                 FCB     %00100111       ;BRONZE
D963 BB               (        TOKEN.ASM):00341                 FCB     %10111011       ;BRONZE
D964 45               (        TOKEN.ASM):00342                 FCB     %01000101       ;BRONZE
                      (        TOKEN.ASM):00343         ;
                      (        TOKEN.ASM):00344         ;  Level-0
                      (        TOKEN.ASM):00345         ;
                      (        TOKEN.ASM):00346                 XDEF    T.RN02,M$RN02
     000C             (             XDEF):00001         T.RN02      EQU     FOO
     000D             (             XDEF):00002         FOO     SET     FOO+1
     D965             (             XDEF):00003         M$RN02      EQU     *
D965 30               (        TOKEN.ASM):00347                 FCB     %00110000       ;VULCAN
D966 6D               (        TOKEN.ASM):00348                 FCB     %01101101       ;VULCAN
D967 56               (        TOKEN.ASM):00349                 FCB     %01010110       ;VULCAN
D968 0C               (        TOKEN.ASM):00350                 FCB     %00001100       ;VULCAN
D969 2E               (        TOKEN.ASM):00351                 FCB     %00101110       ;VULCAN
                      (        TOKEN.ASM):00352         ;
                      (        TOKEN.ASM):00353                 XDEF    T.SWO2,M$SWO2
     000D             (             XDEF):00001         T.SWO2      EQU     FOO
     000E             (             XDEF):00002         FOO     SET     FOO+1
     D96A             (             XDEF):00003         M$SWO2      EQU     *
D96A 21               (        TOKEN.ASM):00354                 FCB     %00100001       ;IRON
D96B 13               (        TOKEN.ASM):00355                 FCB     %00010011       ;IRON
D96C 27               (        TOKEN.ASM):00356                 FCB     %00100111       ;IRON
D96D B8               (        TOKEN.ASM):00357                 FCB     %10111000       ;IRON
                      (        TOKEN.ASM):00358         ;
                      (        TOKEN.ASM):00359         
                      (        TOKEN.ASM):00360         
                      (        TOKEN.ASM):00361         
                      (        TOKEN.ASM):00362                 XDEF    T.TOR2,M$TOR2
     000E             (             XDEF):00001         T.TOR2      EQU     FOO
     000F             (             XDEF):00002         FOO     SET     FOO+1
     D96E             (             XDEF):00003         M$TOR2      EQU     *
D96E 29               (        TOKEN.ASM):00363                 FCB     %00101001       ;LUNAR
D96F 59               (        TOKEN.ASM):00364                 FCB     %01011001       ;LUNAR
D970 57               (        TOKEN.ASM):00365                 FCB     %01010111       ;LUNAR
D971 06               (        TOKEN.ASM):00366                 FCB     %00000110       ;LUNAR
D972 40               (        TOKEN.ASM):00367                 FCB     %01000000       ;LUNAR
                      (        TOKEN.ASM):00368         ;
                      (        TOKEN.ASM):00369                 XDEF    T.TOR4,M$TOR4
     000F             (             XDEF):00001         T.TOR4      EQU     FOO
     0010             (             XDEF):00002         FOO     SET     FOO+1
     D973             (             XDEF):00003         M$TOR4      EQU     *
D973 21               (        TOKEN.ASM):00370                 FCB     %00100001       ;PINE
D974 60               (        TOKEN.ASM):00371                 FCB     %01100000       ;PINE
D975 97               (        TOKEN.ASM):00372                 FCB     %10010111       ;PINE
D976 14               (        TOKEN.ASM):00373                 FCB     %00010100       ;PINE
                      (        TOKEN.ASM):00374         ;
                      (        TOKEN.ASM):00375                 XDEF    T.SHI4,M$SHI4
     0010             (             XDEF):00001         T.SHI4      EQU     FOO
     0011             (             XDEF):00002         FOO     SET     FOO+1
     D977             (             XDEF):00003         M$SHI4      EQU     *
D977 38               (        TOKEN.ASM):00376                 FCB     %00111000       ;LEATHER
D978 D8               (        TOKEN.ASM):00377                 FCB     %11011000       ;LEATHER
D979 50               (        TOKEN.ASM):00378                 FCB     %01010000       ;LEATHER
D97A D1               (        TOKEN.ASM):00379                 FCB     %11010001       ;LEATHER
D97B 05               (        TOKEN.ASM):00380                 FCB     %00000101       ;LEATHER
D97C 90               (        TOKEN.ASM):00381                 FCB     %10010000       ;LEATHER
                      (        TOKEN.ASM):00382         ;
                      (        TOKEN.ASM):00383                 XDEF    T.SWO3,M$SWO3
     0011             (             XDEF):00001         T.SWO3      EQU     FOO
     0012             (             XDEF):00002         FOO     SET     FOO+1
     D97D             (             XDEF):00003         M$SWO3      EQU     *
D97D 31               (        TOKEN.ASM):00384                 FCB     %00110001       ;WOODEN
D97E 2E               (        TOKEN.ASM):00385                 FCB     %00101110       ;WOODEN
D97F F7               (        TOKEN.ASM):00386                 FCB     %11110111       ;WOODEN
D980 90               (        TOKEN.ASM):00387                 FCB     %10010000       ;WOODEN
D981 AE               (        TOKEN.ASM):00388                 FCB     %10101110       ;WOODEN
                      (        TOKEN.ASM):00389         ;
                      (        TOKEN.ASM):00390         
                      (        TOKEN.ASM):00391         
                      (        TOKEN.ASM):00392         
                      (        TOKEN.ASM):00393         ;
                      (        TOKEN.ASM):00394         ;  Special Objects
                      (        TOKEN.ASM):00395         ;
                      (        TOKEN.ASM):00396                 XDEF    T.RN15,M$RN15
     0012             (             XDEF):00001         T.RN15      EQU     FOO
     0013             (             XDEF):00002         FOO     SET     FOO+1
     D982             (             XDEF):00003         M$RN15      EQU     *
D982 28               (        TOKEN.ASM):00397                 FCB     %00101000       ;FINAL
D983 4C               (        TOKEN.ASM):00398                 FCB     %01001100       ;FINAL
D984 97               (        TOKEN.ASM):00399                 FCB     %10010111       ;FINAL
D985 05               (        TOKEN.ASM):00400                 FCB     %00000101       ;FINAL
D986 80               (        TOKEN.ASM):00401                 FCB     %10000000       ;FINAL
                      (        TOKEN.ASM):00402         ;
                      (        TOKEN.ASM):00403                 XDEF    T.RN11,M$RN11
     0013             (             XDEF):00001         T.RN11      EQU     FOO
     0014             (             XDEF):00002         FOO     SET     FOO+1
     D987             (             XDEF):00003         M$RN11      EQU     *
D987 30               (        TOKEN.ASM):00404                 FCB     %00110000       ;ENERGY
D988 4A               (        TOKEN.ASM):00405                 FCB     %01001010       ;ENERGY
D989 E2               (        TOKEN.ASM):00406                 FCB     %11100010       ;ENERGY
D98A C8               (        TOKEN.ASM):00407                 FCB     %11001000       ;ENERGY
D98B F9               (        TOKEN.ASM):00408                 FCB     %11111001       ;ENERGY
                      (        TOKEN.ASM):00409         ;
                      (        TOKEN.ASM):00410                 XDEF    T.RN13,M$RN13
     0014             (             XDEF):00001         T.RN13      EQU     FOO
     0015             (             XDEF):00002         FOO     SET     FOO+1
     D98C             (             XDEF):00003         M$RN13      EQU     *
D98C 18               (        TOKEN.ASM):00411                 FCB     %00011000       ;ICE
D98D 52               (        TOKEN.ASM):00412                 FCB     %01010010       ;ICE
D98E 32               (        TOKEN.ASM):00413                 FCB     %00110010       ;ICE
D98F 80               (        TOKEN.ASM):00414                 FCB     %10000000       ;ICE
                      (        TOKEN.ASM):00415         ;
                      (        TOKEN.ASM):00416                 XDEF    T.RN12,M$RN12
     0015             (             XDEF):00001         T.RN12      EQU     FOO
     0016             (             XDEF):00002         FOO     SET     FOO+1
     D990             (             XDEF):00003         M$RN12      EQU     *
D990 20               (        TOKEN.ASM):00417                 FCB     %00100000       ;FIRE
D991 4C               (        TOKEN.ASM):00418                 FCB     %01001100       ;FIRE
D992 99               (        TOKEN.ASM):00419                 FCB     %10011001       ;FIRE
D993 14               (        TOKEN.ASM):00420                 FCB     %00010100       ;FIRE
                      (        TOKEN.ASM):00421         ;
                      (        TOKEN.ASM):00422         
                      (        TOKEN.ASM):00423         
                      (        TOKEN.ASM):00424         
                      (        TOKEN.ASM):00425                 XDEF    T.RN20,M$RN20
     0016             (             XDEF):00001         T.RN20      EQU     FOO
     0017             (             XDEF):00002         FOO     SET     FOO+1
     D994             (             XDEF):00003         M$RN20      EQU     *
D994 20               (        TOKEN.ASM):00426                 FCB     %00100000       ;GOLD
D995 4E               (        TOKEN.ASM):00427                 FCB     %01001110       ;GOLD
D996 F6               (        TOKEN.ASM):00428                 FCB     %11110110       ;GOLD
D997 10               (        TOKEN.ASM):00429                 FCB     %00010000       ;GOLD
                      (        TOKEN.ASM):00430         ;
                      (        TOKEN.ASM):00431                 XDEF    T.FLA4,M$FLA4
     0017             (             XDEF):00001         T.FLA4      EQU     FOO
     0018             (             XDEF):00002         FOO     SET     FOO+1
     D998             (             XDEF):00003         M$FLA4      EQU     *
D998 28               (        TOKEN.ASM):00432                 FCB     %00101000       ;EMPTY
D999 0A               (        TOKEN.ASM):00433                 FCB     %00001010       ;EMPTY
D99A D8               (        TOKEN.ASM):00434                 FCB     %11011000       ;EMPTY
D99B 53               (        TOKEN.ASM):00435                 FCB     %01010011       ;EMPTY
D99C 20               (        TOKEN.ASM):00436                 FCB     %00100000       ;EMPTY
                      (        TOKEN.ASM):00437         ;
                      (        TOKEN.ASM):00438                 XDEF    T.TOR5,M$TOR5
     0018             (             XDEF):00001         T.TOR5      EQU     FOO
     0019             (             XDEF):00002         FOO     SET     FOO+1
     D99D             (             XDEF):00003         M$TOR5      EQU     *
D99D 21               (        TOKEN.ASM):00439                 FCB     %00100001       ;DEAD
D99E 48               (        TOKEN.ASM):00440                 FCB     %01001000       ;DEAD
D99F 50               (        TOKEN.ASM):00441                 FCB     %01010000       ;DEAD
D9A0 90               (        TOKEN.ASM):00442                 FCB     %10010000       ;DEAD
                      (        TOKEN.ASM):00443         ;
     0019             (        TOKEN.ASM):00444         ADJNUM  EQU     FOO
                      (        TOKEN.ASM):00445         
                      (        TOKEN.ASM):00446         
                      (        TOKEN.ASM):00447         
                      (        TOKEN.ASM):00448         ;
                      (        TOKEN.ASM):00449         ;  GENTAB: Generic Token Tables
                      (        TOKEN.ASM):00450         ;
D9A1 06               (        TOKEN.ASM):00451         GENTAB  FCB     GENNUM
     0000             (        TOKEN.ASM):00452         FOO     SET     0
                      (        TOKEN.ASM):00453         ;
                      (        TOKEN.ASM):00454                 XDEF    T.FLA0,M$FLA0
     0000             (             XDEF):00001         T.FLA0      EQU     FOO
     0001             (             XDEF):00002         FOO     SET     FOO+1
     D9A2             (             XDEF):00003         M$FLA0      EQU     *
D9A2 28               (        TOKEN.ASM):00455                 FCB     %00101000       ;FLASK
D9A3 0C               (        TOKEN.ASM):00456                 FCB     %00001100       ;FLASK
D9A4 C0               (        TOKEN.ASM):00457                 FCB     %11000000       ;FLASK
D9A5 CD               (        TOKEN.ASM):00458                 FCB     %11001101       ;FLASK
D9A6 60               (        TOKEN.ASM):00459                 FCB     %01100000       ;FLASK
                      (        TOKEN.ASM):00460         ;
                      (        TOKEN.ASM):00461                 XDEF    T.RIN0,M$RIN0
     0001             (             XDEF):00001         T.RIN0      EQU     FOO
     0002             (             XDEF):00002         FOO     SET     FOO+1
     D9A7             (             XDEF):00003         M$RIN0      EQU     *
D9A7 20               (        TOKEN.ASM):00462                 FCB     %00100000       ;RING
D9A8 64               (        TOKEN.ASM):00463                 FCB     %01100100       ;RING
D9A9 97               (        TOKEN.ASM):00464                 FCB     %10010111       ;RING
D9AA 1C               (        TOKEN.ASM):00465                 FCB     %00011100       ;RING
                      (        TOKEN.ASM):00466         ;
                      (        TOKEN.ASM):00467                 XDEF    T.SCR0,M$SCR0
     0002             (             XDEF):00001         T.SCR0      EQU     FOO
     0003             (             XDEF):00002         FOO     SET     FOO+1
     D9AB             (             XDEF):00003         M$SCR0      EQU     *
D9AB 30               (        TOKEN.ASM):00468                 FCB     %00110000       ;SCROLL
D9AC A6               (        TOKEN.ASM):00469                 FCB     %10100110       ;SCROLL
D9AD 39               (        TOKEN.ASM):00470                 FCB     %00111001       ;SCROLL
D9AE 3D               (        TOKEN.ASM):00471                 FCB     %00111101       ;SCROLL
D9AF 8C               (        TOKEN.ASM):00472                 FCB     %10001100       ;SCROLL
                      (        TOKEN.ASM):00473         ;
                      (        TOKEN.ASM):00474                 XDEF    T.SHI0,M$SHI0
     0003             (             XDEF):00001         T.SHI0      EQU     FOO
     0004             (             XDEF):00002         FOO     SET     FOO+1
     D9B0             (             XDEF):00003         M$SHI0      EQU     *
D9B0 30               (        TOKEN.ASM):00475                 FCB     %00110000       ;SHIELD
D9B1 E6               (        TOKEN.ASM):00476                 FCB     %11100110       ;SHIELD
D9B2 84               (        TOKEN.ASM):00477                 FCB     %10000100       ;SHIELD
D9B3 95               (        TOKEN.ASM):00478                 FCB     %10010101       ;SHIELD
D9B4 84               (        TOKEN.ASM):00479                 FCB     %10000100       ;SHIELD
                      (        TOKEN.ASM):00480         ;
                      (        TOKEN.ASM):00481                 XDEF    T.SWO0,M$SWO0
     0004             (             XDEF):00001         T.SWO0      EQU     FOO
     0005             (             XDEF):00002         FOO     SET     FOO+1
     D9B5             (             XDEF):00003         M$SWO0      EQU     *
D9B5 29               (        TOKEN.ASM):00482                 FCB     %00101001       ;SWORD
D9B6 27               (        TOKEN.ASM):00483                 FCB     %00100111       ;SWORD
D9B7 77               (        TOKEN.ASM):00484                 FCB     %01110111       ;SWORD
D9B8 C8               (        TOKEN.ASM):00485                 FCB     %11001000       ;SWORD
D9B9 80               (        TOKEN.ASM):00486                 FCB     %10000000       ;SWORD
                      (        TOKEN.ASM):00487         ;
                      (        TOKEN.ASM):00488         
                      (        TOKEN.ASM):00489         
                      (        TOKEN.ASM):00490         
                      (        TOKEN.ASM):00491                 XDEF    T.TOR0,M$TOR0
     0005             (             XDEF):00001         T.TOR0      EQU     FOO
     0006             (             XDEF):00002         FOO     SET     FOO+1
     D9BA             (             XDEF):00003         M$TOR0      EQU     *
D9BA 29               (        TOKEN.ASM):00492                 FCB     %00101001       ;TORCH
D9BB 68               (        TOKEN.ASM):00493                 FCB     %01101000       ;TORCH
D9BC F9               (        TOKEN.ASM):00494                 FCB     %11111001       ;TORCH
D9BD 0D               (        TOKEN.ASM):00495                 FCB     %00001101       ;TORCH
D9BE 00               (        TOKEN.ASM):00496                 FCB     %00000000       ;TORCH
                      (        TOKEN.ASM):00497         ;
     0006             (        TOKEN.ASM):00498         GENNUM  EQU     FOO
                      (        TOKEN.ASM):00499         
                      (        TOKEN.ASM):00500         
                      (        TOKEN.ASM):00501         
                      (        TOKEN.ASM):00502         ;
                      (        TOKEN.ASM):00503         ;  Auto-Play Commands
                      (        TOKEN.ASM):00504         ;
                      (        TOKEN.ASM):00505         ; Temporarily replaced with ATM1 ATM2 ATM3 in missing-macros.asm
                      (        TOKEN.ASM):00506         ; Will uncomment when \# is supported in lwtools 4.20
                      (        TOKEN.ASM):00507         ;ATM     MACR
                      (        TOKEN.ASM):00508         ;        FCB     \#
                      (        TOKEN.ASM):00509         ;        FDB     \1
                      (        TOKEN.ASM):00510         ;   IFGT \#-1
                      (        TOKEN.ASM):00511         ;        FDB     \2
                      (        TOKEN.ASM):00512         ;   ENDC
                      (        TOKEN.ASM):00513         ;   IFGT \#-2
                      (        TOKEN.ASM):00514         ;        FDB     \3
                      (        TOKEN.ASM):00515         ;   ENDC
                      (        TOKEN.ASM):00516         ;        ENDM
                      (        TOKEN.ASM):00517         ;
     D9BF             (        TOKEN.ASM):00518         AUTTAB  EQU     *
                      (        TOKEN.ASM):00519                 ATM1    M$EXAM
D9BF 01               (             ATM1):00001                 FCB     1
D9C0 D8DA             (             ATM1):00002                 FDB     M$EXAM
                      (        TOKEN.ASM):00520                 ATM3    M$PULL,M$RT,M$TOR0
D9C2 03               (             ATM3):00001                 FCB     3
D9C3 D8F1             (             ATM3):00002                 FDB     M$PULL
D9C5 D915             (             ATM3):00003                 FDB     M$RT
D9C7 D9BA             (             ATM3):00004                 FDB     M$TOR0
                      (        TOKEN.ASM):00521                 ATM2    M$USE,M$RT
D9C9 02               (             ATM2):00001                 FCB     2
D9CA D902             (             ATM2):00002                 FDB     M$USE
D9CC D915             (             ATM2):00003                 FDB     M$RT
                      (        TOKEN.ASM):00522                 ATM1    M$LOOK
D9CE 01               (             ATM1):00001                 FCB     1
D9CF D8E9             (             ATM1):00002                 FDB     M$LOOK
                      (        TOKEN.ASM):00523                 ATM1    M$MOVE
D9D1 01               (             ATM1):00001                 FCB     1
D9D2 D8ED             (             ATM1):00002                 FDB     M$MOVE
                      (        TOKEN.ASM):00524                 ATM3    M$PULL,M$LT,M$SHI0
D9D4 03               (             ATM3):00001                 FCB     3
D9D5 D8F1             (             ATM3):00002                 FDB     M$PULL
D9D7 D911             (             ATM3):00003                 FDB     M$LT
D9D9 D9B0             (             ATM3):00004                 FDB     M$SHI0
                      (        TOKEN.ASM):00525                 ATM3    M$PULL,M$RT,M$SWO0
D9DB 03               (             ATM3):00001                 FCB     3
D9DC D8F1             (             ATM3):00002                 FDB     M$PULL
D9DE D915             (             ATM3):00003                 FDB     M$RT
D9E0 D9B5             (             ATM3):00004                 FDB     M$SWO0
                      (        TOKEN.ASM):00526                 ATM1    M$MOVE
D9E2 01               (             ATM1):00001                 FCB     1
D9E3 D8ED             (             ATM1):00002                 FDB     M$MOVE
                      (        TOKEN.ASM):00527                 ATM1    M$MOVE
D9E5 01               (             ATM1):00001                 FCB     1
D9E6 D8ED             (             ATM1):00002                 FDB     M$MOVE
                      (        TOKEN.ASM):00528                 ATM2    M$ATTK,M$RT
D9E8 02               (             ATM2):00001                 FCB     2
D9E9 D8CC             (             ATM2):00002                 FDB     M$ATTK
D9EB D915             (             ATM2):00003                 FDB     M$RT
                      (        TOKEN.ASM):00529                 ATM2    M$TURN,M$RT
D9ED 02               (             ATM2):00001                 FCB     2
D9EE D8FE             (             ATM2):00002                 FDB     M$TURN
D9F0 D915             (             ATM2):00003                 FDB     M$RT
                      (        TOKEN.ASM):00530                 ATM1    M$MOVE
D9F2 01               (             ATM1):00001                 FCB     1
D9F3 D8ED             (             ATM1):00002                 FDB     M$MOVE
                      (        TOKEN.ASM):00531                 ATM1    M$MOVE
D9F5 01               (             ATM1):00001                 FCB     1
D9F6 D8ED             (             ATM1):00002                 FDB     M$MOVE
                      (        TOKEN.ASM):00532                 ATM1    M$MOVE
D9F8 01               (             ATM1):00001                 FCB     1
D9F9 D8ED             (             ATM1):00002                 FDB     M$MOVE
                      (        TOKEN.ASM):00533                 ATM2    M$TURN,M$RT
D9FB 02               (             ATM2):00001                 FCB     2
D9FC D8FE             (             ATM2):00002                 FDB     M$TURN
D9FE D915             (             ATM2):00003                 FDB     M$RT
                      (        TOKEN.ASM):00534                 ATM1    M$MOVE
DA00 01               (             ATM1):00001                 FCB     1
DA01 D8ED             (             ATM1):00002                 FDB     M$MOVE
                      (        TOKEN.ASM):00535                 ATM1    M$MOVE
DA03 01               (             ATM1):00001                 FCB     1
DA04 D8ED             (             ATM1):00002                 FDB     M$MOVE
     DA06             (        TOKEN.ASM):00536         AUTEND  EQU     *
DA06 FF               (        TOKEN.ASM):00537                 FCB     -1
                      (        TOKEN.ASM):00538         ;
                      (        TOKEN.ASM):00539         ;;;;;        END
                      (        TOKEN.ASM):00540                 
                      (    DAGGORATH.ASM):00129                 INCLUDE DTABAS.ASM       ;Database Definitions
                      (       DTABAS.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       DTABAS.ASM):00002         ;  D A T A B A S E   D E F I N I T I O N S
                      (       DTABAS.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       DTABAS.ASM):00004         ;
                      (       DTABAS.ASM):00005                 NAM     DTABAS
                      (       DTABAS.ASM):00006         ;     LIBRY  CD
                      (       DTABAS.ASM):00007         ;        XDEF    DISPAT
                      (       DTABAS.ASM):00008         ;        XDEF    CDBTAB,ODBTAB,FWDCRE,XXXTAB
                      (       DTABAS.ASM):00009         ;        XDEF    OMXTAB,OMXEND,FWDOBJ,OBJWGT
                      (       DTABAS.ASM):00010         *
                      (       DTABAS.ASM):00011         ;        XREF    T.RN11,T.RN12,T.RN13,T.RN15
                      (       DTABAS.ASM):00012         ;        PSCT
                      (       DTABAS.ASM):00013         *
                      (       DTABAS.ASM):00014          IFNDEF DEBFLG
DA07                  (       DTABAS.ASM):00015         DEBFLG  EQU     0
                      (       DTABAS.ASM):00016            ENDC
                      (       DTABAS.ASM):00017         
                      (       DTABAS.ASM):00018         
                      (       DTABAS.ASM):00019         
                      (       DTABAS.ASM):00020         *
                      (       DTABAS.ASM):00021         *  CMDXXX: Command Definition Macro
                      (       DTABAS.ASM):00022         *
                      (       DTABAS.ASM):00023         *  Arguments:
                      (       DTABAS.ASM):00024         *       0) Command String
                      (       DTABAS.ASM):00025         *       1) 4 letter abbreviation
                      (       DTABAS.ASM):00026         *       2) Zero
                      (       DTABAS.ASM):00027         *       3) Service Routine
                      (       DTABAS.ASM):00028         *
DA07                  (       DTABAS.ASM):00029         CMDXXX  MACR
                      (       DTABAS.ASM):00030                 \1      ATTACK,ATTK,0,PATTK
                      (       DTABAS.ASM):00031                 \1      CLIMB,CLIM,0,PCLIMB
                      (       DTABAS.ASM):00032                 \1      DROP,DROP,0,PDROP
                      (       DTABAS.ASM):00033                 \1      EXAMINE,EXAM,0,PEXAM
                      (       DTABAS.ASM):00034                 \1      GET,GET,0,PGET
                      (       DTABAS.ASM):00035                 \1      INCANT,INCN,0,PINCAN
                      (       DTABAS.ASM):00036                 \1      LOOK,LOOK,0,PLOOK
                      (       DTABAS.ASM):00037                 \1      MOVE,MOVE,0,PMOVE
                      (       DTABAS.ASM):00038                 \1      PULL,PULL,0,PPULL
                      (       DTABAS.ASM):00039                 \1      REVEAL,REVE,0,PREVEA
                      (       DTABAS.ASM):00040                 \1      STOW,STOW,0,PSTOW
                      (       DTABAS.ASM):00041                 \1      TURN,TURN,0,PTURN
                      (       DTABAS.ASM):00042                 \1      USE,USE,0,PUSE
                      (       DTABAS.ASM):00043                 \1      ZLOAD,ZLOA,0,PZLOAD
                      (       DTABAS.ASM):00044                 \1      ZSAVE,ZSAV,0,PZSAVE
                      (       DTABAS.ASM):00045                 ENDM
                      (       DTABAS.ASM):00046         *
                      (       DTABAS.ASM):00047         *  Debugging Commands Macro
                      (       DTABAS.ASM):00048         *
                      (       DTABAS.ASM):00049         *  Arguments:
                      (       DTABAS.ASM):00050         *       0) Command String
                      (       DTABAS.ASM):00051         *       1) 4 letter abbreviation
                      (       DTABAS.ASM):00052         *       2) Zero
                      (       DTABAS.ASM):00053         *       3) Service Routine
                      (       DTABAS.ASM):00054         *
DA07                  (       DTABAS.ASM):00055         DEBXXX  MACR
                      (       DTABAS.ASM):00056                 \1      QMAP,QMAP,0,DEBMAP
                      (       DTABAS.ASM):00057                 ENDM
                      (       DTABAS.ASM):00058         
                      (       DTABAS.ASM):00059         
                      (       DTABAS.ASM):00060         
                      (       DTABAS.ASM):00061         *
                      (       DTABAS.ASM):00062         *  Direction Token Macro
                      (       DTABAS.ASM):00063         *
                      (       DTABAS.ASM):00064         *  Arguments:
                      (       DTABAS.ASM):00065         *       0) Command String
                      (       DTABAS.ASM):00066         *       1) 4 letter abbreviation
                      (       DTABAS.ASM):00067         *       2) Zero
                      (       DTABAS.ASM):00068         *
DA07                  (       DTABAS.ASM):00069         DIRXXX  MACR
                      (       DTABAS.ASM):00070                 \1      LEFT,LT,0
                      (       DTABAS.ASM):00071                 \1      RIGHT,RT,0
                      (       DTABAS.ASM):00072                 \1      BACKWARD,BAK,0
                      (       DTABAS.ASM):00073                 \1      AROUND,AROU,0
                      (       DTABAS.ASM):00074                 \1      UP,UP,0
                      (       DTABAS.ASM):00075                 \1      DOWN,DN,0
                      (       DTABAS.ASM):00076                 ENDM
                      (       DTABAS.ASM):00077         
                      (       DTABAS.ASM):00078         
                      (       DTABAS.ASM):00079         
                      (       DTABAS.ASM):00080         *
                      (       DTABAS.ASM):00081         *  GENXXX: General Object Definition Macro
                      (       DTABAS.ASM):00082         *
                      (       DTABAS.ASM):00083         *  Arguments:
                      (       DTABAS.ASM):00084         *       0) Object Name
                      (       DTABAS.ASM):00085         *       1) 4-letter abbreviation
                      (       DTABAS.ASM):00086         *       2) Class
                      (       DTABAS.ASM):00087         *       3) Forward Looking Vector List
                      (       DTABAS.ASM):00088         *       4) Look Down Vector List
                      (       DTABAS.ASM):00089         *       5) Object Weight
                      (       DTABAS.ASM):00090         *
                      (       DTABAS.ASM):00091         
                      (       DTABAS.ASM):00092         
DA07                  (       DTABAS.ASM):00093         GENXXX  MACR
                      (       DTABAS.ASM):00094                 \1      FLASK,FLA0,K.FLAS,FFLASK,DFLASK,5
                      (       DTABAS.ASM):00095                 \1      RING,RIN0,K.RING,FRING,DRING,1
                      (       DTABAS.ASM):00096                 \1      SCROLL,SCR0,K.SCRO,FSCROL,DSCROL,10
                      (       DTABAS.ASM):00097                 \1      SHIELD,SHI0,K.SHIE,FSHIEL,DSHIEL,25
                      (       DTABAS.ASM):00098                 \1      SWORD,SWO0,K.SWOR,FSWORD,DSWORD,25
                      (       DTABAS.ASM):00099                 \1      TORCH,TOR0,K.TORC,FTORCH,DTORCH,10
                      (       DTABAS.ASM):00100                 ENDM
                      (       DTABAS.ASM):00101         
                      (       DTABAS.ASM):00102         
                      (       DTABAS.ASM):00103         
                      (       DTABAS.ASM):00104         *
                      (       DTABAS.ASM):00105         *  OBJXXX: Object Definition Macro
                      (       DTABAS.ASM):00106         *
                      (       DTABAS.ASM):00107         *  Arguments:
                      (       DTABAS.ASM):00108         *       0) Object Name
                      (       DTABAS.ASM):00109         *       1) 4-letter Abbreviation
                      (       DTABAS.ASM):00110         *       2) Generic Class
                      (       DTABAS.ASM):00111         *       3) Reveal Power Requirements
                      (       DTABAS.ASM):00112         *       4) Magic Offense
                      (       DTABAS.ASM):00113         *       5) Physical Offense
                      (       DTABAS.ASM):00114         *       6) Initial Level where object shows up
                      (       DTABAS.ASM):00115         *       7) Number of objects
                      (       DTABAS.ASM):00116         *
                      (       DTABAS.ASM):00117         *  Arguments (8-A) if present will generate an entry
                      (       DTABAS.ASM):00118         *  in XXXTAB (special object parameters).
                      (       DTABAS.ASM):00119         *
     0000             (       DTABAS.ASM):00120         LVL0    EQU     0
     0001             (       DTABAS.ASM):00121         LVL1    EQU     1
     0002             (       DTABAS.ASM):00122         LVL2    EQU     2
     0003             (       DTABAS.ASM):00123         LVL3    EQU     3
     0004             (       DTABAS.ASM):00124         LVL4    EQU     4
     0005             (       DTABAS.ASM):00125         LVL5    EQU     5
                      (       DTABAS.ASM):00126         ;*
                      (       DTABAS.ASM):00127         ; 2022 Edit:
                      (       DTABAS.ASM):00128         ;
                      (       DTABAS.ASM):00129         ; Modified this macro again to use \1 for 8-argument lists and \2 for 11-argument.
                      (       DTABAS.ASM):00130         ; Must be called with two macros, one which accepts 8-argument lists and one for 11.
                      (       DTABAS.ASM):00131         ; Also defined macro NOCALL in missing-macros.asm which does nothing, so 8 arg lines
                      (       DTABAS.ASM):00132         ; can be skipped for 11-arg-only macros.  Will change when \# is supported in lwtools 4.20
DA07                  (       DTABAS.ASM):00133         OBJXXX  MACR
                      (       DTABAS.ASM):00134         *
                      (       DTABAS.ASM):00135         *  Level-4 Objects
                      (       DTABAS.ASM):00136         *
                      (       DTABAS.ASM):00137                 \2      SUPREME,RN05,K.RING,255,0,5,LVL4,1,3,T.RN15,0
                      (       DTABAS.ASM):00138         *
                      (       DTABAS.ASM):00139         *  Level-3 Objects
                      (       DTABAS.ASM):00140         *
                      (       DTABAS.ASM):00141                 \2      JOULE,RN01,K.RING,170,0,5,LVL3,1,3,T.RN11,0
                      (       DTABAS.ASM):00142                 \1      ELVISH,SWO1,K.SWOR,150,64,64,LVL3,1
                      (       DTABAS.ASM):00143                 \2      MITHRIL,SHI1,K.SHIE,140,13,26,LVL3,2,64,64,0
                      (       DTABAS.ASM):00144         *
                      (       DTABAS.ASM):00145         *  Level-2 Objects
                      (       DTABAS.ASM):00146         *
                      (       DTABAS.ASM):00147                 \1      SEER,SCR1,K.SCRO,130,0,5,LVL2,3
                      (       DTABAS.ASM):00148                 \1      THEWS,FLA1,K.FLAS,70,0,5,LVL2,3
                      (       DTABAS.ASM):00149         *
                      (       DTABAS.ASM):00150         *  Level-1 Objects
                      (       DTABAS.ASM):00151         *
                      (       DTABAS.ASM):00152                 \2      HOTH,RN03,K.RING,52,0,5,LVL1,1,3,T.RN13,0
                      (       DTABAS.ASM):00153                 \1      VISION,SCR2,K.SCRO,50,0,5,LVL1,3
                      (       DTABAS.ASM):00154                 \1      ABYE,FLA3,K.FLAS,48,0,5,LVL1,6
                      (       DTABAS.ASM):00155                 \1      HALE,FLA2,K.FLAS,40,0,5,LVL1,4
                      (       DTABAS.ASM):00156                 \2      SOLAR,TOR1,K.TORC,70,0,5,LVL1,4,60,13,11
                      (       DTABAS.ASM):00157                 \2      BRONZE,SHI3,K.SHIE,25,0,26,LVL1,6,96,128,0
                      (       DTABAS.ASM):00158         *
                      (       DTABAS.ASM):00159         *  Level-0 Objects
                      (       DTABAS.ASM):00160         *
                      (       DTABAS.ASM):00161                 \2      VULCAN,RN02,K.RING,13,0,5,LVL0,1,3,T.RN12,0
                      (       DTABAS.ASM):00162                 \1      IRON,SW02,K.SWOR,13,0,40,LVL0,4
                      (       DTABAS.ASM):00163                 \2      LUNAR,TOR2,K.TORC,25,0,5,LVL0,8,30,10,4
                      (       DTABAS.ASM):00164                 \2      PINE,TOR4,K.TORC,5,0,5,LVL0,8,15,7,0
                      (       DTABAS.ASM):00165                 \2      LEATHER,SHI4,K.SHIE,5,0,10,LVL0,3,108,128,0
                      (       DTABAS.ASM):00166                 \1      WOODEN,SWO3,K.SWOR,5,0,16,LVL0,4
                      (       DTABAS.ASM):00167         *
                      (       DTABAS.ASM):00168                 ENDM
                      (       DTABAS.ASM):00169         
                      (       DTABAS.ASM):00170         
                      (       DTABAS.ASM):00171         
                      (       DTABAS.ASM):00172         *
                      (       DTABAS.ASM):00173         *  SPCXXX: Special Object Definition Macro
                      (       DTABAS.ASM):00174         *
                      (       DTABAS.ASM):00175         *  2022 update: to work around LWTools missing NARG, argument count is
                      (       DTABAS.ASM):00176         *               being added to the head of these value lists.
                      (       DTABAS.ASM):00177         *  Arguments:
                      (       DTABAS.ASM):00178         *       0) Object Name
                      (       DTABAS.ASM):00179         *       1) 4-letter Abbreviation
                      (       DTABAS.ASM):00180         *       2) Generic Class
                      (       DTABAS.ASM):00181         *       3) Reveal Power Requirements (zero)
                      (       DTABAS.ASM):00182         *       4) Magic Offense
                      (       DTABAS.ASM):00183         *       5) Physical Offense
                      (       DTABAS.ASM):00184         *
DA07                  (       DTABAS.ASM):00185         SPCXXX  MACR
                      (       DTABAS.ASM):00186                 \1      FINAL,RN15,K.RING,0,0,0
                      (       DTABAS.ASM):00187                 \1      ENERGY,RN11,K.RING,0,255,255
                      (       DTABAS.ASM):00188                 \1      ICE,RN13,K.RING,0,255,255
                      (       DTABAS.ASM):00189                 \1      FIRE,RN12,K.RING,0,255,255
                      (       DTABAS.ASM):00190                 \1      GOLD,RN20,K.RING,0,0,5
                      (       DTABAS.ASM):00191                 \1      EMPTY,FLA4,K.FLAS,0,0,5
                      (       DTABAS.ASM):00192                 \2      DEAD,TOR5,K.TORC,5,0,5,0,0,0,0,0
                      (       DTABAS.ASM):00193                 ENDM
                      (       DTABAS.ASM):00194         
                      (       DTABAS.ASM):00195         
                      (       DTABAS.ASM):00196         
                      (       DTABAS.ASM):00197         *
                      (       DTABAS.ASM):00198         *  Creature Definition Macro
                      (       DTABAS.ASM):00199         *
                      (       DTABAS.ASM):00200         *  Arguments:
                      (       DTABAS.ASM):00201         *       0) Vector List
                      (       DTABAS.ASM):00202         *       1) Movement Delay Time
                      (       DTABAS.ASM):00203         *       2) Attack Delay Time
                      (       DTABAS.ASM):00204         *       3) Magic Offense
                      (       DTABAS.ASM):00205         *       4) Magic Defense
                      (       DTABAS.ASM):00206         *       5) Physical Offense
                      (       DTABAS.ASM):00207         *       6) Physical Defense
                      (       DTABAS.ASM):00208         *       7) Hit Points
                      (       DTABAS.ASM):00209         *
DA07                  (       DTABAS.ASM):00210         CREXXX  MACR
                      (       DTABAS.ASM):00211                 \1      SPIDER,23,11,0,255,128,255,32
                      (       DTABAS.ASM):00212                 \1      VIPER,15,7,0,255,80,128,56
                      (       DTABAS.ASM):00213                 \1      SGINT1,29,23,0,255,52,192,200
                      (       DTABAS.ASM):00214                 \1      BLOB,31,31,0,255,96,167,304
                      (       DTABAS.ASM):00215                 \1      KNIGT1,13,7,0,128,96,60,504
                      (       DTABAS.ASM):00216                 \1      SGINT2,17,13,0,128,128,48,704
                      (       DTABAS.ASM):00217                 \1      SCORP,5,4,255,128,255,128,400
                      (       DTABAS.ASM):00218                 \1      KNIGT2,13,7,0,64,255,8,800
                      (       DTABAS.ASM):00219                 \1      WRAITH,3,3,192,16,192,8,800
                      (       DTABAS.ASM):00220                 \1      BALROG,4,3,255,5,255,3,1000
                      (       DTABAS.ASM):00221                 \1      WIZ0,13,7,255,6,255,0,1000
                      (       DTABAS.ASM):00222                 \1      WIZ1,13,7,255,6,255,0,8000
                      (       DTABAS.ASM):00223                 ENDM
                      (       DTABAS.ASM):00224         
                      (       DTABAS.ASM):00225         
                      (       DTABAS.ASM):00226         
                      (       DTABAS.ASM):00227         *
                      (       DTABAS.ASM):00228         *  DISPAT: Command Dispatch Macro
                      (       DTABAS.ASM):00229         *
DA07                  (       DTABAS.ASM):00230         CDM     MACR
                      (       DTABAS.ASM):00231         ;        XREF    \3
                      (       DTABAS.ASM):00232                 FDB     \4
                      (       DTABAS.ASM):00233                 ENDM
                      (       DTABAS.ASM):00234         *
     DA07             (       DTABAS.ASM):00235         DISPAT  EQU     *
                      (       DTABAS.ASM):00236                 CMDXXX  CDM
                      (           CMDXXX):00001                 CDM      ATTACK,ATTK,0,PATTK
DA07 D2EF             (              CDM):00001                 FDB     PATTK
                      (           CMDXXX):00002                 CDM      CLIMB,CLIM,0,PCLIMB
DA09 D485             (              CDM):00001                 FDB     PCLIMB
                      (           CMDXXX):00003                 CDM      DROP,DROP,0,PDROP
DA0B D587             (              CDM):00001                 FDB     PDROP
                      (           CMDXXX):00004                 CDM      EXAMINE,EXAM,0,PEXAM
DA0D D4B8             (              CDM):00001                 FDB     PEXAM
                      (           CMDXXX):00005                 CDM      GET,GET,0,PGET
DA0F D559             (              CDM):00001                 FDB     PGET
                      (           CMDXXX):00006                 CDM      INCANT,INCN,0,PINCAN
DA11 D5F3             (              CDM):00001                 FDB     PINCAN
                      (           CMDXXX):00007                 CDM      LOOK,LOOK,0,PLOOK
DA13 C759             (              CDM):00001                 FDB     PLOOK
                      (           CMDXXX):00008                 CDM      MOVE,MOVE,0,PMOVE
DA15 D707             (              CDM):00001                 FDB     PMOVE
                      (           CMDXXX):00009                 CDM      PULL,PULL,0,PPULL
DA17 D5C0             (              CDM):00001                 FDB     PPULL
                      (           CMDXXX):00010                 CDM      REVEAL,REVE,0,PREVEA
DA19 D65A             (              CDM):00001                 FDB     PREVEA
                      (           CMDXXX):00011                 CDM      STOW,STOW,0,PSTOW
DA1B D5B0             (              CDM):00001                 FDB     PSTOW
                      (           CMDXXX):00012                 CDM      TURN,TURN,0,PTURN
DA1D D676             (              CDM):00001                 FDB     PTURN
                      (           CMDXXX):00013                 CDM      USE,USE,0,PUSE
DA1F D778             (              CDM):00001                 FDB     PUSE
                      (           CMDXXX):00014                 CDM      ZLOAD,ZLOA,0,PZLOAD
DA21 D7EE             (              CDM):00001                 FDB     PZLOAD
                      (           CMDXXX):00015                 CDM      ZSAVE,ZSAV,0,PZSAVE
DA23 D7FE             (              CDM):00001                 FDB     PZSAVE
                      (       DTABAS.ASM):00237                 IF      DEBFLG
                      (       DTABAS.ASM):00238                 DEBXXX  CDM
                      (       DTABAS.ASM):00239                 ENDIF
                      (       DTABAS.ASM):00240         
                      (       DTABAS.ASM):00241         
                      (       DTABAS.ASM):00242         
                      (       DTABAS.ASM):00243         *
                      (       DTABAS.ASM):00244         *  FWDOBJ: Object Forward Looking Vector Lists
                      (       DTABAS.ASM):00245         *
DA25                  (       DTABAS.ASM):00246         FLVL    MACR
                      (       DTABAS.ASM):00247         ;        XREF    \3
                      (       DTABAS.ASM):00248                 FDB     \4
                      (       DTABAS.ASM):00249                 ENDM
                      (       DTABAS.ASM):00250         *
     DA25             (       DTABAS.ASM):00251         FWDOBJ  EQU     *
                      (       DTABAS.ASM):00252                 GENXXX  FLVL
                      (           GENXXX):00001                 FLVL      FLASK,FLA0,K.FLAS,FFLASK,DFLASK,5
DA25 DC50             (             FLVL):00001                 FDB     FFLASK
                      (           GENXXX):00002                 FLVL      RING,RIN0,K.RING,FRING,DRING,1
DA27 DC58             (             FLVL):00001                 FDB     FRING
                      (           GENXXX):00003                 FLVL      SCROLL,SCR0,K.SCRO,FSCROL,DSCROL,10
DA29 DC61             (             FLVL):00001                 FDB     FSCROL
                      (           GENXXX):00004                 FLVL      SHIELD,SHI0,K.SHIE,FSHIEL,DSHIEL,25
DA2B DC31             (             FLVL):00001                 FDB     FSHIEL
                      (           GENXXX):00005                 FLVL      SWORD,SWO0,K.SWOR,FSWORD,DSWORD,25
DA2D DC46             (             FLVL):00001                 FDB     FSWORD
                      (           GENXXX):00006                 FLVL      TORCH,TOR0,K.TORC,FTORCH,DTORCH,10
DA2F DC3E             (             FLVL):00001                 FDB     FTORCH
                      (       DTABAS.ASM):00253         
                      (       DTABAS.ASM):00254         
                      (       DTABAS.ASM):00255         
                      (       DTABAS.ASM):00256         *
                      (       DTABAS.ASM):00257         *  OBJWGT: Object Weight Table
                      (       DTABAS.ASM):00258         *
DA31                  (       DTABAS.ASM):00259         WGT     MACR
                      (       DTABAS.ASM):00260                 FCB     \6
                      (       DTABAS.ASM):00261                 ENDM
                      (       DTABAS.ASM):00262         *
     DA31             (       DTABAS.ASM):00263         OBJWGT  EQU     *
                      (       DTABAS.ASM):00264                 GENXXX  WGT
                      (           GENXXX):00001                 WGT      FLASK,FLA0,K.FLAS,FFLASK,DFLASK,5
DA31 05               (              WGT):00001                 FCB     5
                      (           GENXXX):00002                 WGT      RING,RIN0,K.RING,FRING,DRING,1
DA32 01               (              WGT):00001                 FCB     1
                      (           GENXXX):00003                 WGT      SCROLL,SCR0,K.SCRO,FSCROL,DSCROL,10
DA33 0A               (              WGT):00001                 FCB     10
                      (           GENXXX):00004                 WGT      SHIELD,SHI0,K.SHIE,FSHIEL,DSHIEL,25
DA34 19               (              WGT):00001                 FCB     25
                      (           GENXXX):00005                 WGT      SWORD,SWO0,K.SWOR,FSWORD,DSWORD,25
DA35 19               (              WGT):00001                 FCB     25
                      (           GENXXX):00006                 WGT      TORCH,TOR0,K.TORC,FTORCH,DTORCH,10
DA36 0A               (              WGT):00001                 FCB     10
                      (       DTABAS.ASM):00265         
                      (       DTABAS.ASM):00266         
                      (       DTABAS.ASM):00267         
                      (       DTABAS.ASM):00268         *
                      (       DTABAS.ASM):00269         *  ODBTAB: Object Definition Blocks
                      (       DTABAS.ASM):00270         *
DA37                  (       DTABAS.ASM):00271         ODB     MACR
                      (       DTABAS.ASM):00272                 FCB     \3,\4
                      (       DTABAS.ASM):00273                 FCB     \5,\6
                      (       DTABAS.ASM):00274                 ENDM
                      (       DTABAS.ASM):00275         *
     DA37             (       DTABAS.ASM):00276         ODBTAB  EQU     *
                      (       DTABAS.ASM):00277                 OBJXXX  ODB,ODB
                      (           OBJXXX):00001                 ODB      SUPREME,RN05,K.RING,255,0,5,LVL4,1,3,T.RN15,0
DA37 01FF             (              ODB):00001                 FCB     K.RING,255
DA39 0005             (              ODB):00002                 FCB     0,5
                      (           OBJXXX):00002                 ODB      JOULE,RN01,K.RING,170,0,5,LVL3,1,3,T.RN11,0
DA3B 01AA             (              ODB):00001                 FCB     K.RING,170
DA3D 0005             (              ODB):00002                 FCB     0,5
                      (           OBJXXX):00003                 ODB      ELVISH,SWO1,K.SWOR,150,64,64,LVL3,1
DA3F 0496             (              ODB):00001                 FCB     K.SWOR,150
DA41 4040             (              ODB):00002                 FCB     64,64
                      (           OBJXXX):00004                 ODB      MITHRIL,SHI1,K.SHIE,140,13,26,LVL3,2,64,64,0
DA43 038C             (              ODB):00001                 FCB     K.SHIE,140
DA45 0D1A             (              ODB):00002                 FCB     13,26
                      (           OBJXXX):00005                 ODB      SEER,SCR1,K.SCRO,130,0,5,LVL2,3
DA47 0282             (              ODB):00001                 FCB     K.SCRO,130
DA49 0005             (              ODB):00002                 FCB     0,5
                      (           OBJXXX):00006                 ODB      THEWS,FLA1,K.FLAS,70,0,5,LVL2,3
DA4B 0046             (              ODB):00001                 FCB     K.FLAS,70
DA4D 0005             (              ODB):00002                 FCB     0,5
                      (           OBJXXX):00007                 ODB      HOTH,RN03,K.RING,52,0,5,LVL1,1,3,T.RN13,0
DA4F 0134             (              ODB):00001                 FCB     K.RING,52
DA51 0005             (              ODB):00002                 FCB     0,5
                      (           OBJXXX):00008                 ODB      VISION,SCR2,K.SCRO,50,0,5,LVL1,3
DA53 0232             (              ODB):00001                 FCB     K.SCRO,50
DA55 0005             (              ODB):00002                 FCB     0,5
                      (           OBJXXX):00009                 ODB      ABYE,FLA3,K.FLAS,48,0,5,LVL1,6
DA57 0030             (              ODB):00001                 FCB     K.FLAS,48
DA59 0005             (              ODB):00002                 FCB     0,5
                      (           OBJXXX):00010                 ODB      HALE,FLA2,K.FLAS,40,0,5,LVL1,4
DA5B 0028             (              ODB):00001                 FCB     K.FLAS,40
DA5D 0005             (              ODB):00002                 FCB     0,5
                      (           OBJXXX):00011                 ODB      SOLAR,TOR1,K.TORC,70,0,5,LVL1,4,60,13,11
DA5F 0546             (              ODB):00001                 FCB     K.TORC,70
DA61 0005             (              ODB):00002                 FCB     0,5
                      (           OBJXXX):00012                 ODB      BRONZE,SHI3,K.SHIE,25,0,26,LVL1,6,96,128,0
DA63 0319             (              ODB):00001                 FCB     K.SHIE,25
DA65 001A             (              ODB):00002                 FCB     0,26
                      (           OBJXXX):00013                 ODB      VULCAN,RN02,K.RING,13,0,5,LVL0,1,3,T.RN12,0
DA67 010D             (              ODB):00001                 FCB     K.RING,13
DA69 0005             (              ODB):00002                 FCB     0,5
                      (           OBJXXX):00014                 ODB      IRON,SW02,K.SWOR,13,0,40,LVL0,4
DA6B 040D             (              ODB):00001                 FCB     K.SWOR,13
DA6D 0028             (              ODB):00002                 FCB     0,40
                      (           OBJXXX):00015                 ODB      LUNAR,TOR2,K.TORC,25,0,5,LVL0,8,30,10,4
DA6F 0519             (              ODB):00001                 FCB     K.TORC,25
DA71 0005             (              ODB):00002                 FCB     0,5
                      (           OBJXXX):00016                 ODB      PINE,TOR4,K.TORC,5,0,5,LVL0,8,15,7,0
DA73 0505             (              ODB):00001                 FCB     K.TORC,5
DA75 0005             (              ODB):00002                 FCB     0,5
                      (           OBJXXX):00017                 ODB      LEATHER,SHI4,K.SHIE,5,0,10,LVL0,3,108,128,0
DA77 0305             (              ODB):00001                 FCB     K.SHIE,5
DA79 000A             (              ODB):00002                 FCB     0,10
                      (           OBJXXX):00018                 ODB      WOODEN,SWO3,K.SWOR,5,0,16,LVL0,4
DA7B 0405             (              ODB):00001                 FCB     K.SWOR,5
DA7D 0010             (              ODB):00002                 FCB     0,16
                      (       DTABAS.ASM):00278                 SPCXXX  ODB,ODB
                      (           SPCXXX):00001                 ODB      FINAL,RN15,K.RING,0,0,0
DA7F 0100             (              ODB):00001                 FCB     K.RING,0
DA81 0000             (              ODB):00002                 FCB     0,0
                      (           SPCXXX):00002                 ODB      ENERGY,RN11,K.RING,0,255,255
DA83 0100             (              ODB):00001                 FCB     K.RING,0
DA85 FFFF             (              ODB):00002                 FCB     255,255
                      (           SPCXXX):00003                 ODB      ICE,RN13,K.RING,0,255,255
DA87 0100             (              ODB):00001                 FCB     K.RING,0
DA89 FFFF             (              ODB):00002                 FCB     255,255
                      (           SPCXXX):00004                 ODB      FIRE,RN12,K.RING,0,255,255
DA8B 0100             (              ODB):00001                 FCB     K.RING,0
DA8D FFFF             (              ODB):00002                 FCB     255,255
                      (           SPCXXX):00005                 ODB      GOLD,RN20,K.RING,0,0,5
DA8F 0100             (              ODB):00001                 FCB     K.RING,0
DA91 0005             (              ODB):00002                 FCB     0,5
                      (           SPCXXX):00006                 ODB      EMPTY,FLA4,K.FLAS,0,0,5
DA93 0000             (              ODB):00001                 FCB     K.FLAS,0
DA95 0005             (              ODB):00002                 FCB     0,5
                      (           SPCXXX):00007                 ODB      DEAD,TOR5,K.TORC,5,0,5,0,0,0,0,0
DA97 0505             (              ODB):00001                 FCB     K.TORC,5
DA99 0005             (              ODB):00002                 FCB     0,5
                      (       DTABAS.ASM):00279         
                      (       DTABAS.ASM):00280         
                      (       DTABAS.ASM):00281         
                      (       DTABAS.ASM):00282         *
                      (       DTABAS.ASM):00283         *  XXXTAB: Special Parameter Tables
                      (       DTABAS.ASM):00284         *
                      (       DTABAS.ASM):00285         *  For Torches:
                      (       DTABAS.ASM):00286         *       .OCXXX+0 ==> timer value
                      (       DTABAS.ASM):00287         *       .OCXXX+1 ==> regular lighting value
                      (       DTABAS.ASM):00288         *       .OCXXX+2 ==> magical lighting value
                      (       DTABAS.ASM):00289         *
                      (       DTABAS.ASM):00290         *  For Shields:
                      (       DTABAS.ASM):00291         *       .OCXXX+0 ==> Magical Defense Filter
                      (       DTABAS.ASM):00292         *       .OCXXX+1 ==> Physical Defense Filter
                      (       DTABAS.ASM):00293         *       .OCXXX+2 ==> unused
                      (       DTABAS.ASM):00294         *
DA9B                  (       DTABAS.ASM):00295         XXX     MACR
                      (       DTABAS.ASM):00296                 FCB     T.{2}
                      (       DTABAS.ASM):00297                 FCB     {9}
                      (       DTABAS.ASM):00298                 FCB     {10}
                      (       DTABAS.ASM):00299                 FCB     {11}
                      (       DTABAS.ASM):00300                 ENDM
                      (       DTABAS.ASM):00301         *
     DA9B             (       DTABAS.ASM):00302         XXXTAB  EQU     *
                      (       DTABAS.ASM):00303                 OBJXXX  NOCALL,XXX
                      (           OBJXXX):00001                 XXX      SUPREME,RN05,K.RING,255,0,5,LVL4,1,3,T.RN15,0
DA9B 00               (              XXX):00001                 FCB     T.RN05
DA9C 03               (              XXX):00002                 FCB     3
DA9D 12               (              XXX):00003                 FCB     T.RN15
DA9E 00               (              XXX):00004                 FCB     0
                      (           OBJXXX):00002                 XXX      JOULE,RN01,K.RING,170,0,5,LVL3,1,3,T.RN11,0
DA9F 01               (              XXX):00001                 FCB     T.RN01
DAA0 03               (              XXX):00002                 FCB     3
DAA1 13               (              XXX):00003                 FCB     T.RN11
DAA2 00               (              XXX):00004                 FCB     0
                      (           OBJXXX):00003                 NOCALL      ELVISH,SWO1,K.SWOR,150,64,64,LVL3,1
                      (           OBJXXX):00004                 XXX      MITHRIL,SHI1,K.SHIE,140,13,26,LVL3,2,64,64,0
DAA3 03               (              XXX):00001                 FCB     T.SHI1
DAA4 40               (              XXX):00002                 FCB     64
DAA5 40               (              XXX):00003                 FCB     64
DAA6 00               (              XXX):00004                 FCB     0
                      (           OBJXXX):00005                 NOCALL      SEER,SCR1,K.SCRO,130,0,5,LVL2,3
                      (           OBJXXX):00006                 NOCALL      THEWS,FLA1,K.FLAS,70,0,5,LVL2,3
                      (           OBJXXX):00007                 XXX      HOTH,RN03,K.RING,52,0,5,LVL1,1,3,T.RN13,0
DAA7 06               (              XXX):00001                 FCB     T.RN03
DAA8 03               (              XXX):00002                 FCB     3
DAA9 14               (              XXX):00003                 FCB     T.RN13
DAAA 00               (              XXX):00004                 FCB     0
                      (           OBJXXX):00008                 NOCALL      VISION,SCR2,K.SCRO,50,0,5,LVL1,3
                      (           OBJXXX):00009                 NOCALL      ABYE,FLA3,K.FLAS,48,0,5,LVL1,6
                      (           OBJXXX):00010                 NOCALL      HALE,FLA2,K.FLAS,40,0,5,LVL1,4
                      (           OBJXXX):00011                 XXX      SOLAR,TOR1,K.TORC,70,0,5,LVL1,4,60,13,11
DAAB 0A               (              XXX):00001                 FCB     T.TOR1
DAAC 3C               (              XXX):00002                 FCB     60
DAAD 0D               (              XXX):00003                 FCB     13
DAAE 0B               (              XXX):00004                 FCB     11
                      (           OBJXXX):00012                 XXX      BRONZE,SHI3,K.SHIE,25,0,26,LVL1,6,96,128,0
DAAF 0B               (              XXX):00001                 FCB     T.SHI3
DAB0 60               (              XXX):00002                 FCB     96
DAB1 80               (              XXX):00003                 FCB     128
DAB2 00               (              XXX):00004                 FCB     0
                      (           OBJXXX):00013                 XXX      VULCAN,RN02,K.RING,13,0,5,LVL0,1,3,T.RN12,0
DAB3 0C               (              XXX):00001                 FCB     T.RN02
DAB4 03               (              XXX):00002                 FCB     3
DAB5 15               (              XXX):00003                 FCB     T.RN12
DAB6 00               (              XXX):00004                 FCB     0
                      (           OBJXXX):00014                 NOCALL      IRON,SW02,K.SWOR,13,0,40,LVL0,4
                      (           OBJXXX):00015                 XXX      LUNAR,TOR2,K.TORC,25,0,5,LVL0,8,30,10,4
DAB7 0E               (              XXX):00001                 FCB     T.TOR2
DAB8 1E               (              XXX):00002                 FCB     30
DAB9 0A               (              XXX):00003                 FCB     10
DABA 04               (              XXX):00004                 FCB     4
                      (           OBJXXX):00016                 XXX      PINE,TOR4,K.TORC,5,0,5,LVL0,8,15,7,0
DABB 0F               (              XXX):00001                 FCB     T.TOR4
DABC 0F               (              XXX):00002                 FCB     15
DABD 07               (              XXX):00003                 FCB     7
DABE 00               (              XXX):00004                 FCB     0
                      (           OBJXXX):00017                 XXX      LEATHER,SHI4,K.SHIE,5,0,10,LVL0,3,108,128,0
DABF 10               (              XXX):00001                 FCB     T.SHI4
DAC0 6C               (              XXX):00002                 FCB     108
DAC1 80               (              XXX):00003                 FCB     128
DAC2 00               (              XXX):00004                 FCB     0
                      (           OBJXXX):00018                 NOCALL      WOODEN,SWO3,K.SWOR,5,0,16,LVL0,4
                      (       DTABAS.ASM):00304                 SPCXXX  NOCALL,XXX
                      (           SPCXXX):00001                 NOCALL      FINAL,RN15,K.RING,0,0,0
                      (           SPCXXX):00002                 NOCALL      ENERGY,RN11,K.RING,0,255,255
                      (           SPCXXX):00003                 NOCALL      ICE,RN13,K.RING,0,255,255
                      (           SPCXXX):00004                 NOCALL      FIRE,RN12,K.RING,0,255,255
                      (           SPCXXX):00005                 NOCALL      GOLD,RN20,K.RING,0,0,5
                      (           SPCXXX):00006                 NOCALL      EMPTY,FLA4,K.FLAS,0,0,5
                      (           SPCXXX):00007                 XXX      DEAD,TOR5,K.TORC,5,0,5,0,0,0,0,0
DAC3 18               (              XXX):00001                 FCB     T.TOR5
DAC4 00               (              XXX):00002                 FCB     0
DAC5 00               (              XXX):00003                 FCB     0
DAC6 00               (              XXX):00004                 FCB     0
                      (       DTABAS.ASM):00305         ;
DAC7 FF               (       DTABAS.ASM):00306                 FCB     -1              ;table terminator
                      (       DTABAS.ASM):00307         
                      (       DTABAS.ASM):00308         
                      (       DTABAS.ASM):00309         
                      (       DTABAS.ASM):00310         *
                      (       DTABAS.ASM):00311         *  OMXTAB: Object Distribution Table
                      (       DTABAS.ASM):00312         *
                      (       DTABAS.ASM):00313         *  Bit7-4: Object Level Number
                      (       DTABAS.ASM):00314         *  Bit3-0: Number of objects
                      (       DTABAS.ASM):00315         *
                      (       DTABAS.ASM):00316         ;OMX     MACR
                      (       DTABAS.ASM):00317         ;LH      SET     (\6!.$0F)!<4
                      (       DTABAS.ASM):00318         ;RH      SET     (\7!.$0F)
                      (       DTABAS.ASM):00319         ;        FCB     LH!+RH
                      (       DTABAS.ASM):00320         ;        ENDM
DAC8                  (       DTABAS.ASM):00321         OMX     MACR
                      (       DTABAS.ASM):00322                 FCB     ((\7&$0F)*16)+(\8&$0F)
                      (       DTABAS.ASM):00323                 ENDM
                      (       DTABAS.ASM):00324         *
     DAC8             (       DTABAS.ASM):00325         OMXTAB  EQU     *
                      (       DTABAS.ASM):00326                 OBJXXX  OMX,OMX
                      (           OBJXXX):00001                 OMX      SUPREME,RN05,K.RING,255,0,5,LVL4,1,3,T.RN15,0
DAC8 41               (              OMX):00001                 FCB     ((LVL4&$0F)*16)+(1&$0F)
                      (           OBJXXX):00002                 OMX      JOULE,RN01,K.RING,170,0,5,LVL3,1,3,T.RN11,0
DAC9 31               (              OMX):00001                 FCB     ((LVL3&$0F)*16)+(1&$0F)
                      (           OBJXXX):00003                 OMX      ELVISH,SWO1,K.SWOR,150,64,64,LVL3,1
DACA 31               (              OMX):00001                 FCB     ((LVL3&$0F)*16)+(1&$0F)
                      (           OBJXXX):00004                 OMX      MITHRIL,SHI1,K.SHIE,140,13,26,LVL3,2,64,64,0
DACB 32               (              OMX):00001                 FCB     ((LVL3&$0F)*16)+(2&$0F)
                      (           OBJXXX):00005                 OMX      SEER,SCR1,K.SCRO,130,0,5,LVL2,3
DACC 23               (              OMX):00001                 FCB     ((LVL2&$0F)*16)+(3&$0F)
                      (           OBJXXX):00006                 OMX      THEWS,FLA1,K.FLAS,70,0,5,LVL2,3
DACD 23               (              OMX):00001                 FCB     ((LVL2&$0F)*16)+(3&$0F)
                      (           OBJXXX):00007                 OMX      HOTH,RN03,K.RING,52,0,5,LVL1,1,3,T.RN13,0
DACE 11               (              OMX):00001                 FCB     ((LVL1&$0F)*16)+(1&$0F)
                      (           OBJXXX):00008                 OMX      VISION,SCR2,K.SCRO,50,0,5,LVL1,3
DACF 13               (              OMX):00001                 FCB     ((LVL1&$0F)*16)+(3&$0F)
                      (           OBJXXX):00009                 OMX      ABYE,FLA3,K.FLAS,48,0,5,LVL1,6
DAD0 16               (              OMX):00001                 FCB     ((LVL1&$0F)*16)+(6&$0F)
                      (           OBJXXX):00010                 OMX      HALE,FLA2,K.FLAS,40,0,5,LVL1,4
DAD1 14               (              OMX):00001                 FCB     ((LVL1&$0F)*16)+(4&$0F)
                      (           OBJXXX):00011                 OMX      SOLAR,TOR1,K.TORC,70,0,5,LVL1,4,60,13,11
DAD2 14               (              OMX):00001                 FCB     ((LVL1&$0F)*16)+(4&$0F)
                      (           OBJXXX):00012                 OMX      BRONZE,SHI3,K.SHIE,25,0,26,LVL1,6,96,128,0
DAD3 16               (              OMX):00001                 FCB     ((LVL1&$0F)*16)+(6&$0F)
                      (           OBJXXX):00013                 OMX      VULCAN,RN02,K.RING,13,0,5,LVL0,1,3,T.RN12,0
DAD4 01               (              OMX):00001                 FCB     ((LVL0&$0F)*16)+(1&$0F)
                      (           OBJXXX):00014                 OMX      IRON,SW02,K.SWOR,13,0,40,LVL0,4
DAD5 04               (              OMX):00001                 FCB     ((LVL0&$0F)*16)+(4&$0F)
                      (           OBJXXX):00015                 OMX      LUNAR,TOR2,K.TORC,25,0,5,LVL0,8,30,10,4
DAD6 08               (              OMX):00001                 FCB     ((LVL0&$0F)*16)+(8&$0F)
                      (           OBJXXX):00016                 OMX      PINE,TOR4,K.TORC,5,0,5,LVL0,8,15,7,0
DAD7 08               (              OMX):00001                 FCB     ((LVL0&$0F)*16)+(8&$0F)
                      (           OBJXXX):00017                 OMX      LEATHER,SHI4,K.SHIE,5,0,10,LVL0,3,108,128,0
DAD8 03               (              OMX):00001                 FCB     ((LVL0&$0F)*16)+(3&$0F)
                      (           OBJXXX):00018                 OMX      WOODEN,SWO3,K.SWOR,5,0,16,LVL0,4
DAD9 04               (              OMX):00001                 FCB     ((LVL0&$0F)*16)+(4&$0F)
     DADA             (       DTABAS.ASM):00327         OMXEND  EQU     *
                      (       DTABAS.ASM):00328         
                      (       DTABAS.ASM):00329         
                      (       DTABAS.ASM):00330         
                      (       DTABAS.ASM):00331         *
                      (       DTABAS.ASM):00332         *  FWDCRE: Forward Looking Creature Vector Lists
                      (       DTABAS.ASM):00333         *
DADA                  (       DTABAS.ASM):00334         CVL     MACR
                      (       DTABAS.ASM):00335         ;        XREF    \0
                      (       DTABAS.ASM):00336                 FDB     \1
                      (       DTABAS.ASM):00337                 ENDM
                      (       DTABAS.ASM):00338         *
     DADA             (       DTABAS.ASM):00339         FWDCRE  EQU     *
                      (       DTABAS.ASM):00340                 CREXXX  CVL
                      (           CREXXX):00001                 CVL      SPIDER,23,11,0,255,128,255,32
DADA DE5D             (              CVL):00001                 FDB     SPIDER
                      (           CREXXX):00002                 CVL      VIPER,15,7,0,255,80,128,56
DADC E001             (              CVL):00001                 FDB     VIPER
                      (           CREXXX):00003                 CVL      SGINT1,29,23,0,255,52,192,200
DADE DD78             (              CVL):00001                 FDB     SGINT1
                      (           CREXXX):00004                 CVL      BLOB,31,31,0,255,96,167,304
DAE0 DE90             (              CVL):00001                 FDB     BLOB
                      (           CREXXX):00005                 CVL      KNIGT1,13,7,0,128,96,60,504
DAE2 DEB9             (              CVL):00001                 FDB     KNIGT1
                      (           CREXXX):00006                 CVL      SGINT2,17,13,0,128,128,48,704
DAE4 DD88             (              CVL):00001                 FDB     SGINT2
                      (           CREXXX):00007                 CVL      SCORP,5,4,255,128,255,128,400
DAE6 DE76             (              CVL):00001                 FDB     SCORP
                      (           CREXXX):00008                 CVL      KNIGT2,13,7,0,64,255,8,800
DAE8 DED4             (              CVL):00001                 FDB     KNIGT2
                      (           CREXXX):00009                 CVL      WRAITH,3,3,192,16,192,8,800
DAEA DE3E             (              CVL):00001                 FDB     WRAITH
                      (           CREXXX):00010                 CVL      BALROG,4,3,255,5,255,3,1000
DAEC DDDA             (              CVL):00001                 FDB     BALROG
                      (           CREXXX):00011                 CVL      WIZ0,13,7,255,6,255,0,1000
DAEE DF9C             (              CVL):00001                 FDB     WIZ0
                      (           CREXXX):00012                 CVL      WIZ1,13,7,255,6,255,0,8000
DAF0 DF47             (              CVL):00001                 FDB     WIZ1
                      (       DTABAS.ASM):00341         
                      (       DTABAS.ASM):00342         
                      (       DTABAS.ASM):00343         
                      (       DTABAS.ASM):00344         *
                      (       DTABAS.ASM):00345         *  CDBTAB: Creature Definition Blocks
                      (       DTABAS.ASM):00346         *
DAF2                  (       DTABAS.ASM):00347         CDB     MACR
                      (       DTABAS.ASM):00348                 FDB     \8              ;power
                      (       DTABAS.ASM):00349                 FCB     \4,\5           ;magical offense/defense
                      (       DTABAS.ASM):00350                 FCB     \6,\7           ;physical offense/defense
                      (       DTABAS.ASM):00351                 FCB     \2,\3           ;movement/attack delay times
                      (       DTABAS.ASM):00352                 ENDM
                      (       DTABAS.ASM):00353         *
     DAF2             (       DTABAS.ASM):00354         CDBTAB  EQU     *
                      (       DTABAS.ASM):00355                 CREXXX CDB
                      (           CREXXX):00001                 CDB      SPIDER,23,11,0,255,128,255,32
DAF2 0020             (              CDB):00001                 FDB     32              ;power
DAF4 00FF             (              CDB):00002                 FCB     0,255           ;magical offense/defense
DAF6 80FF             (              CDB):00003                 FCB     128,255           ;physical offense/defense
DAF8 170B             (              CDB):00004                 FCB     23,11           ;movement/attack delay times
                      (           CREXXX):00002                 CDB      VIPER,15,7,0,255,80,128,56
DAFA 0038             (              CDB):00001                 FDB     56              ;power
DAFC 00FF             (              CDB):00002                 FCB     0,255           ;magical offense/defense
DAFE 5080             (              CDB):00003                 FCB     80,128           ;physical offense/defense
DB00 0F07             (              CDB):00004                 FCB     15,7           ;movement/attack delay times
                      (           CREXXX):00003                 CDB      SGINT1,29,23,0,255,52,192,200
DB02 00C8             (              CDB):00001                 FDB     200              ;power
DB04 00FF             (              CDB):00002                 FCB     0,255           ;magical offense/defense
DB06 34C0             (              CDB):00003                 FCB     52,192           ;physical offense/defense
DB08 1D17             (              CDB):00004                 FCB     29,23           ;movement/attack delay times
                      (           CREXXX):00004                 CDB      BLOB,31,31,0,255,96,167,304
DB0A 0130             (              CDB):00001                 FDB     304              ;power
DB0C 00FF             (              CDB):00002                 FCB     0,255           ;magical offense/defense
DB0E 60A7             (              CDB):00003                 FCB     96,167           ;physical offense/defense
DB10 1F1F             (              CDB):00004                 FCB     31,31           ;movement/attack delay times
                      (           CREXXX):00005                 CDB      KNIGT1,13,7,0,128,96,60,504
DB12 01F8             (              CDB):00001                 FDB     504              ;power
DB14 0080             (              CDB):00002                 FCB     0,128           ;magical offense/defense
DB16 603C             (              CDB):00003                 FCB     96,60           ;physical offense/defense
DB18 0D07             (              CDB):00004                 FCB     13,7           ;movement/attack delay times
                      (           CREXXX):00006                 CDB      SGINT2,17,13,0,128,128,48,704
DB1A 02C0             (              CDB):00001                 FDB     704              ;power
DB1C 0080             (              CDB):00002                 FCB     0,128           ;magical offense/defense
DB1E 8030             (              CDB):00003                 FCB     128,48           ;physical offense/defense
DB20 110D             (              CDB):00004                 FCB     17,13           ;movement/attack delay times
                      (           CREXXX):00007                 CDB      SCORP,5,4,255,128,255,128,400
DB22 0190             (              CDB):00001                 FDB     400              ;power
DB24 FF80             (              CDB):00002                 FCB     255,128           ;magical offense/defense
DB26 FF80             (              CDB):00003                 FCB     255,128           ;physical offense/defense
DB28 0504             (              CDB):00004                 FCB     5,4           ;movement/attack delay times
                      (           CREXXX):00008                 CDB      KNIGT2,13,7,0,64,255,8,800
DB2A 0320             (              CDB):00001                 FDB     800              ;power
DB2C 0040             (              CDB):00002                 FCB     0,64           ;magical offense/defense
DB2E FF08             (              CDB):00003                 FCB     255,8           ;physical offense/defense
DB30 0D07             (              CDB):00004                 FCB     13,7           ;movement/attack delay times
                      (           CREXXX):00009                 CDB      WRAITH,3,3,192,16,192,8,800
DB32 0320             (              CDB):00001                 FDB     800              ;power
DB34 C010             (              CDB):00002                 FCB     192,16           ;magical offense/defense
DB36 C008             (              CDB):00003                 FCB     192,8           ;physical offense/defense
DB38 0303             (              CDB):00004                 FCB     3,3           ;movement/attack delay times
                      (           CREXXX):00010                 CDB      BALROG,4,3,255,5,255,3,1000
DB3A 03E8             (              CDB):00001                 FDB     1000              ;power
DB3C FF05             (              CDB):00002                 FCB     255,5           ;magical offense/defense
DB3E FF03             (              CDB):00003                 FCB     255,3           ;physical offense/defense
DB40 0403             (              CDB):00004                 FCB     4,3           ;movement/attack delay times
                      (           CREXXX):00011                 CDB      WIZ0,13,7,255,6,255,0,1000
DB42 03E8             (              CDB):00001                 FDB     1000              ;power
DB44 FF06             (              CDB):00002                 FCB     255,6           ;magical offense/defense
DB46 FF00             (              CDB):00003                 FCB     255,0           ;physical offense/defense
DB48 0D07             (              CDB):00004                 FCB     13,7           ;movement/attack delay times
                      (           CREXXX):00012                 CDB      WIZ1,13,7,255,6,255,0,8000
DB4A 1F40             (              CDB):00001                 FDB     8000              ;power
DB4C FF06             (              CDB):00002                 FCB     255,6           ;magical offense/defense
DB4E FF00             (              CDB):00003                 FCB     255,0           ;physical offense/defense
DB50 0D07             (              CDB):00004                 FCB     13,7           ;movement/attack delay times
                      (       DTABAS.ASM):00356         ;;;;;        END
                      (    DAGGORATH.ASM):00130                 INCLUDE SWCHAR.ASM       ;Software Character Table
                      (       SWCHAR.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       SWCHAR.ASM):00002         ;  S O F T W A R E   C H A R A C T E R   T A B L E
                      (       SWCHAR.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       SWCHAR.ASM):00004         ;
                      (       SWCHAR.ASM):00005         ;  Entries in the software character tables are 5 bits
                      (       SWCHAR.ASM):00006         ;  wide and 7 bytes long:
                      (       SWCHAR.ASM):00007         ;
                      (       SWCHAR.ASM):00008         ;  Byte 0  ...XXXXX
                      (       SWCHAR.ASM):00009         ;  Byte 1  ...XXXXX
                      (       SWCHAR.ASM):00010         ;  Byte 2  ...XXXXX
                      (       SWCHAR.ASM):00011         ;  Byte 3  ...XXXXX
                      (       SWCHAR.ASM):00012         ;  Byte 4  ...XXXXX
                      (       SWCHAR.ASM):00013         ;  Byte 5  ...XXXXX
                      (       SWCHAR.ASM):00014         ;  Byte 6  ...XXXXX
                      (       SWCHAR.ASM):00015         ;
                      (       SWCHAR.ASM):00016         
                      (       SWCHAR.ASM):00017         
                      (       SWCHAR.ASM):00018         
     DB52             (       SWCHAR.ASM):00019         SWCTAB  EQU     *               ;where the tables begin
                      (       SWCHAR.ASM):00020         ;
DB52 30               (       SWCHAR.ASM):00021                 FCB     %00110000       ;* Space         = $00
DB53 00               (       SWCHAR.ASM):00022                 FCB     %00000000       ;* Space         = $00
DB54 00               (       SWCHAR.ASM):00023                 FCB     %00000000       ;* Space         = $00
DB55 00               (       SWCHAR.ASM):00024                 FCB     %00000000       ;* Space         = $00
DB56 00               (       SWCHAR.ASM):00025                 FCB     %00000000       ;* Space         = $00
                      (       SWCHAR.ASM):00026         ;
DB57 31               (       SWCHAR.ASM):00027                 FCB     %00110001       ;* Letter A      = $01
DB58 15               (       SWCHAR.ASM):00028                 FCB     %00010101       ;* Letter A      = $01
DB59 18               (       SWCHAR.ASM):00029                 FCB     %00011000       ;* Letter A      = $01
DB5A FE               (       SWCHAR.ASM):00030                 FCB     %11111110       ;* Letter A      = $01
DB5B 31               (       SWCHAR.ASM):00031                 FCB     %00110001       ;* Letter A      = $01
                      (       SWCHAR.ASM):00032         ;                 
DB5C 37               (       SWCHAR.ASM):00033                 FCB     %00110111       ;* Letter B      = $02
DB5D A3               (       SWCHAR.ASM):00034                 FCB     %10100011       ;* Letter B      = $02
DB5E 1F               (       SWCHAR.ASM):00035                 FCB     %00011111       ;* Letter B      = $02
DB5F 46               (       SWCHAR.ASM):00036                 FCB     %01000110       ;* Letter B      = $02
DB60 3E               (       SWCHAR.ASM):00037                 FCB     %00111110       ;* Letter B      = $02
                      (       SWCHAR.ASM):00038         ;                 
DB61 33               (       SWCHAR.ASM):00039                 FCB     %00110011       ;* Letter C      = $03
DB62 A3               (       SWCHAR.ASM):00040                 FCB     %10100011       ;* Letter C      = $03
DB63 08               (       SWCHAR.ASM):00041                 FCB     %00001000       ;* Letter C      = $03
DB64 42               (       SWCHAR.ASM):00042                 FCB     %01000010       ;* Letter C      = $03
DB65 2E               (       SWCHAR.ASM):00043                 FCB     %00101110       ;* Letter C      = $03
                      (       SWCHAR.ASM):00044         ;                 
DB66 37               (       SWCHAR.ASM):00045                 FCB     %00110111       ;* Letter D      = $04
DB67 A3               (       SWCHAR.ASM):00046                 FCB     %10100011       ;* Letter D      = $04
DB68 18               (       SWCHAR.ASM):00047                 FCB     %00011000       ;* Letter D      = $04
DB69 C6               (       SWCHAR.ASM):00048                 FCB     %11000110       ;* Letter D      = $04
DB6A 3E               (       SWCHAR.ASM):00049                 FCB     %00111110       ;* Letter D      = $04
                      (       SWCHAR.ASM):00050         ;                 
DB6B 37               (       SWCHAR.ASM):00051                 FCB     %00110111       ;* Letter E      = $05
DB6C E1               (       SWCHAR.ASM):00052                 FCB     %11100001       ;* Letter E      = $05
DB6D 0F               (       SWCHAR.ASM):00053                 FCB     %00001111       ;* Letter E      = $05
DB6E 42               (       SWCHAR.ASM):00054                 FCB     %01000010       ;* Letter E      = $05
DB6F 1F               (       SWCHAR.ASM):00055                 FCB     %00011111       ;* Letter E      = $05
                      (       SWCHAR.ASM):00056         ;                 
DB70 37               (       SWCHAR.ASM):00057                 FCB     %00110111       ;* Letter F      = $06
DB71 E1               (       SWCHAR.ASM):00058                 FCB     %11100001       ;* Letter F      = $06
DB72 0F               (       SWCHAR.ASM):00059                 FCB     %00001111       ;* Letter F      = $06
DB73 42               (       SWCHAR.ASM):00060                 FCB     %01000010       ;* Letter F      = $06
DB74 10               (       SWCHAR.ASM):00061                 FCB     %00010000       ;* Letter F      = $06
                      (       SWCHAR.ASM):00062         ;                 
DB75 33               (       SWCHAR.ASM):00063                 FCB     %00110011       ;* Letter G      = $07
DB76 E3               (       SWCHAR.ASM):00064                 FCB     %11100011       ;* Letter G      = $07
DB77 08               (       SWCHAR.ASM):00065                 FCB     %00001000       ;* Letter G      = $07
DB78 4E               (       SWCHAR.ASM):00066                 FCB     %01001110       ;* Letter G      = $07
DB79 2F               (       SWCHAR.ASM):00067                 FCB     %00101111       ;* Letter G      = $07
                      (       SWCHAR.ASM):00068         ;                 
DB7A 34               (       SWCHAR.ASM):00069                 FCB     %00110100       ;* Letter H      = $08
DB7B 63               (       SWCHAR.ASM):00070                 FCB     %01100011       ;* Letter H      = $08
DB7C 1F               (       SWCHAR.ASM):00071                 FCB     %00011111       ;* Letter H      = $08
DB7D C6               (       SWCHAR.ASM):00072                 FCB     %11000110       ;* Letter H      = $08
DB7E 31               (       SWCHAR.ASM):00073                 FCB     %00110001       ;* Letter H      = $08
                      (       SWCHAR.ASM):00074         ;                 
                      (       SWCHAR.ASM):00075         
                      (       SWCHAR.ASM):00076         
                      (       SWCHAR.ASM):00077         
DB7F 33               (       SWCHAR.ASM):00078                 FCB     %00110011       ;* Letter I      = $09
DB80 88               (       SWCHAR.ASM):00079                 FCB     %10001000       ;* Letter I      = $09
DB81 42               (       SWCHAR.ASM):00080                 FCB     %01000010       ;* Letter I      = $09
DB82 10               (       SWCHAR.ASM):00081                 FCB     %00010000       ;* Letter I      = $09
DB83 8E               (       SWCHAR.ASM):00082                 FCB     %10001110       ;* Letter I      = $09
                      (       SWCHAR.ASM):00083         ;                 
DB84 30               (       SWCHAR.ASM):00084                 FCB     %00110000       ;* Letter J      = $0A
DB85 42               (       SWCHAR.ASM):00085                 FCB     %01000010       ;* Letter J      = $0A
DB86 10               (       SWCHAR.ASM):00086                 FCB     %00010000       ;* Letter J      = $0A
DB87 86               (       SWCHAR.ASM):00087                 FCB     %10000110       ;* Letter J      = $0A
DB88 2E               (       SWCHAR.ASM):00088                 FCB     %00101110       ;* Letter J      = $0A
                      (       SWCHAR.ASM):00089         ;                 
DB89 34               (       SWCHAR.ASM):00090                 FCB     %00110100       ;* Letter K      = $0B
DB8A 65               (       SWCHAR.ASM):00091                 FCB     %01100101       ;* Letter K      = $0B
DB8B 4C               (       SWCHAR.ASM):00092                 FCB     %01001100       ;* Letter K      = $0B
DB8C 52               (       SWCHAR.ASM):00093                 FCB     %01010010       ;* Letter K      = $0B
DB8D 51               (       SWCHAR.ASM):00094                 FCB     %01010001       ;* Letter K      = $0B
                      (       SWCHAR.ASM):00095         ;                 
DB8E 34               (       SWCHAR.ASM):00096                 FCB     %00110100       ;* Letter L      = $0C
DB8F 21               (       SWCHAR.ASM):00097                 FCB     %00100001       ;* Letter L      = $0C
DB90 08               (       SWCHAR.ASM):00098                 FCB     %00001000       ;* Letter L      = $0C
DB91 42               (       SWCHAR.ASM):00099                 FCB     %01000010       ;* Letter L      = $0C
DB92 1F               (       SWCHAR.ASM):00100                 FCB     %00011111       ;* Letter L      = $0C
                      (       SWCHAR.ASM):00101         ;                 
DB93 34               (       SWCHAR.ASM):00102                 FCB     %00110100       ;* Letter M      = $0D
DB94 77               (       SWCHAR.ASM):00103                 FCB     %01110111       ;* Letter M      = $0D
DB95 5A               (       SWCHAR.ASM):00104                 FCB     %01011010       ;* Letter M      = $0D
DB96 D6               (       SWCHAR.ASM):00105                 FCB     %11010110       ;* Letter M      = $0D
DB97 31               (       SWCHAR.ASM):00106                 FCB     %00110001       ;* Letter M      = $0D
                      (       SWCHAR.ASM):00107         ;                 
DB98 34               (       SWCHAR.ASM):00108                 FCB     %00110100       ;* Letter N      = $0E
DB99 63               (       SWCHAR.ASM):00109                 FCB     %01100011       ;* Letter N      = $0E
DB9A 9A               (       SWCHAR.ASM):00110                 FCB     %10011010       ;* Letter N      = $0E
DB9B CE               (       SWCHAR.ASM):00111                 FCB     %11001110       ;* Letter N      = $0E
DB9C 31               (       SWCHAR.ASM):00112                 FCB     %00110001       ;* Letter N      = $0E
                      (       SWCHAR.ASM):00113         ;                 
DB9D 33               (       SWCHAR.ASM):00114                 FCB     %00110011       ;* Letter O      = $0F
DB9E A3               (       SWCHAR.ASM):00115                 FCB     %10100011       ;* Letter O      = $0F
DB9F 18               (       SWCHAR.ASM):00116                 FCB     %00011000       ;* Letter O      = $0F
DBA0 C6               (       SWCHAR.ASM):00117                 FCB     %11000110       ;* Letter O      = $0F
DBA1 2E               (       SWCHAR.ASM):00118                 FCB     %00101110       ;* Letter O      = $0F
                      (       SWCHAR.ASM):00119         ;                 
DBA2 37               (       SWCHAR.ASM):00120                 FCB     %00110111       ;* Letter P      = $10
DBA3 A3               (       SWCHAR.ASM):00121                 FCB     %10100011       ;* Letter P      = $10
DBA4 1F               (       SWCHAR.ASM):00122                 FCB     %00011111       ;* Letter P      = $10
DBA5 42               (       SWCHAR.ASM):00123                 FCB     %01000010       ;* Letter P      = $10
DBA6 10               (       SWCHAR.ASM):00124                 FCB     %00010000       ;* Letter P      = $10
                      (       SWCHAR.ASM):00125         ;                 
DBA7 33               (       SWCHAR.ASM):00126                 FCB     %00110011       ;* Letter Q      = $11
DBA8 A3               (       SWCHAR.ASM):00127                 FCB     %10100011       ;* Letter Q      = $11
DBA9 18               (       SWCHAR.ASM):00128                 FCB     %00011000       ;* Letter Q      = $11
DBAA D6               (       SWCHAR.ASM):00129                 FCB     %11010110       ;* Letter Q      = $11
DBAB 4D               (       SWCHAR.ASM):00130                 FCB     %01001101       ;* Letter Q      = $11
                      (       SWCHAR.ASM):00131         ;                 
DBAC 37               (       SWCHAR.ASM):00132                 FCB     %00110111       ;* Letter R      = $12
DBAD A3               (       SWCHAR.ASM):00133                 FCB     %10100011       ;* Letter R      = $12
                      (       SWCHAR.ASM):00134         
                      (       SWCHAR.ASM):00135         
                      (       SWCHAR.ASM):00136         
DBAE 1F               (       SWCHAR.ASM):00137                 FCB     %00011111       ;* Letter R      = $12
DBAF 52               (       SWCHAR.ASM):00138                 FCB     %01010010       ;* Letter R      = $12
DBB0 51               (       SWCHAR.ASM):00139                 FCB     %01010001       ;* Letter R      = $12
                      (       SWCHAR.ASM):00140         ;                 
DBB1 33               (       SWCHAR.ASM):00141                 FCB     %00110011       ;* Letter S      = $13
DBB2 A3               (       SWCHAR.ASM):00142                 FCB     %10100011       ;* Letter S      = $13
DBB3 07               (       SWCHAR.ASM):00143                 FCB     %00000111       ;* Letter S      = $13
DBB4 06               (       SWCHAR.ASM):00144                 FCB     %00000110       ;* Letter S      = $13
DBB5 2E               (       SWCHAR.ASM):00145                 FCB     %00101110       ;* Letter S      = $13
                      (       SWCHAR.ASM):00146         ;                 
DBB6 37               (       SWCHAR.ASM):00147                 FCB     %00110111       ;* Letter T      = $14
DBB7 EA               (       SWCHAR.ASM):00148                 FCB     %11101010       ;* Letter T      = $14
DBB8 42               (       SWCHAR.ASM):00149                 FCB     %01000010       ;* Letter T      = $14
DBB9 10               (       SWCHAR.ASM):00150                 FCB     %00010000       ;* Letter T      = $14
DBBA 84               (       SWCHAR.ASM):00151                 FCB     %10000100       ;* Letter T      = $14
                      (       SWCHAR.ASM):00152         ;                 
DBBB 34               (       SWCHAR.ASM):00153                 FCB     %00110100       ;* Letter U      = $15
DBBC 63               (       SWCHAR.ASM):00154                 FCB     %01100011       ;* Letter U      = $15
DBBD 18               (       SWCHAR.ASM):00155                 FCB     %00011000       ;* Letter U      = $15
DBBE C6               (       SWCHAR.ASM):00156                 FCB     %11000110       ;* Letter U      = $15
DBBF 2E               (       SWCHAR.ASM):00157                 FCB     %00101110       ;* Letter U      = $15
                      (       SWCHAR.ASM):00158         ;                 
DBC0 34               (       SWCHAR.ASM):00159                 FCB     %00110100       ;* Letter V      = $16
DBC1 63               (       SWCHAR.ASM):00160                 FCB     %01100011       ;* Letter V      = $16
DBC2 15               (       SWCHAR.ASM):00161                 FCB     %00010101       ;* Letter V      = $16
DBC3 28               (       SWCHAR.ASM):00162                 FCB     %00101000       ;* Letter V      = $16
DBC4 84               (       SWCHAR.ASM):00163                 FCB     %10000100       ;* Letter V      = $16
                      (       SWCHAR.ASM):00164         ;                 
DBC5 34               (       SWCHAR.ASM):00165                 FCB     %00110100       ;* Letter W      = $17
DBC6 63               (       SWCHAR.ASM):00166                 FCB     %01100011       ;* Letter W      = $17
DBC7 1A               (       SWCHAR.ASM):00167                 FCB     %00011010       ;* Letter W      = $17
DBC8 D7               (       SWCHAR.ASM):00168                 FCB     %11010111       ;* Letter W      = $17
DBC9 71               (       SWCHAR.ASM):00169                 FCB     %01110001       ;* Letter W      = $17
                      (       SWCHAR.ASM):00170         ;                 
DBCA 34               (       SWCHAR.ASM):00171                 FCB     %00110100       ;* Letter X      = $18
DBCB 62               (       SWCHAR.ASM):00172                 FCB     %01100010       ;* Letter X      = $18
DBCC A2               (       SWCHAR.ASM):00173                 FCB     %10100010       ;* Letter X      = $18
DBCD 2A               (       SWCHAR.ASM):00174                 FCB     %00101010       ;* Letter X      = $18
DBCE 31               (       SWCHAR.ASM):00175                 FCB     %00110001       ;* Letter X      = $18
                      (       SWCHAR.ASM):00176         ;                 
DBCF 34               (       SWCHAR.ASM):00177                 FCB     %00110100       ;* Letter Y      = $19
DBD0 62               (       SWCHAR.ASM):00178                 FCB     %01100010       ;* Letter Y      = $19
DBD1 A2               (       SWCHAR.ASM):00179                 FCB     %10100010       ;* Letter Y      = $19
DBD2 10               (       SWCHAR.ASM):00180                 FCB     %00010000       ;* Letter Y      = $19
DBD3 84               (       SWCHAR.ASM):00181                 FCB     %10000100       ;* Letter Y      = $19
                      (       SWCHAR.ASM):00182         ;                 
DBD4 37               (       SWCHAR.ASM):00183                 FCB     %00110111       ;* Letter Z      = $1A
DBD5 C2               (       SWCHAR.ASM):00184                 FCB     %11000010       ;* Letter Z      = $1A
DBD6 22               (       SWCHAR.ASM):00185                 FCB     %00100010       ;* Letter Z      = $1A
DBD7 22               (       SWCHAR.ASM):00186                 FCB     %00100010       ;* Letter Z      = $1A
DBD8 1F               (       SWCHAR.ASM):00187                 FCB     %00011111       ;* Letter Z      = $1A
                      (       SWCHAR.ASM):00188         ;                 
DBD9 31               (       SWCHAR.ASM):00189                 FCB     %00110001       ;* Exclamation point       Code = $1B
DBDA 08               (       SWCHAR.ASM):00190                 FCB     %00001000       ;* Exclamation point       Code = $1B
DBDB 42               (       SWCHAR.ASM):00191                 FCB     %01000010       ;* Exclamation point       Code = $1B
DBDC 10               (       SWCHAR.ASM):00192                 FCB     %00010000       ;* Exclamation point       Code = $1B
                      (       SWCHAR.ASM):00193         
                      (       SWCHAR.ASM):00194         
                      (       SWCHAR.ASM):00195         
DBDD 04               (       SWCHAR.ASM):00196                 FCB     %00000100       ;* Exclamation point       Code = $1B
                      (       SWCHAR.ASM):00197         ;                 
DBDE 30               (       SWCHAR.ASM):00198                 FCB     %00110000       ;* Underline     = $1C
DBDF 00               (       SWCHAR.ASM):00199                 FCB     %00000000       ;* Underline     = $1C
DBE0 00               (       SWCHAR.ASM):00200                 FCB     %00000000       ;* Underline     = $1C
DBE1 00               (       SWCHAR.ASM):00201                 FCB     %00000000       ;* Underline     = $1C
DBE2 1F               (       SWCHAR.ASM):00202                 FCB     %00011111       ;* Underline     = $1C
                      (       SWCHAR.ASM):00203         ;                 
DBE3 33               (       SWCHAR.ASM):00204                 FCB     %00110011       ;* Question Mark = $1D
DBE4 A2               (       SWCHAR.ASM):00205                 FCB     %10100010       ;* Question Mark = $1D
DBE5 13               (       SWCHAR.ASM):00206                 FCB     %00010011       ;* Question Mark = $1D
DBE6 10               (       SWCHAR.ASM):00207                 FCB     %00010000       ;* Question Mark = $1D
DBE7 04               (       SWCHAR.ASM):00208                 FCB     %00000100       ;* Question Mark = $1D
                      (       SWCHAR.ASM):00209         ;                 
DBE8 30               (       SWCHAR.ASM):00210                 FCB     %00110000       ;* Period        = $1E
DBE9 00               (       SWCHAR.ASM):00211                 FCB     %00000000       ;* Period        = $1E
DBEA 00               (       SWCHAR.ASM):00212                 FCB     %00000000       ;* Period        = $1E
DBEB 00               (       SWCHAR.ASM):00213                 FCB     %00000000       ;* Period        = $1E
DBEC 04               (       SWCHAR.ASM):00214                 FCB     %00000100       ;* Period        = $1E
                      (       SWCHAR.ASM):00215         ;
                      (       SWCHAR.ASM):00216         
                      (       SWCHAR.ASM):00217         
                      (       SWCHAR.ASM):00218         
                      (       SWCHAR.ASM):00219         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       SWCHAR.ASM):00220         ;  S P E C I A L   C H A R A C T E R   T A B L E
                      (       SWCHAR.ASM):00221         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (       SWCHAR.ASM):00222         ;
                      (       SWCHAR.ASM):00223         ;  The following table entries contain bit patterns
                      (       SWCHAR.ASM):00224         ;  used in making up special figures.
                      (       SWCHAR.ASM):00225         ;
     DBED             (       SWCHAR.ASM):00226         SPCTAB  EQU     *
                      (       SWCHAR.ASM):00227         ;
                      (       SWCHAR.ASM):00228         ;  Small Heart Left    Code = $20
                      (       SWCHAR.ASM):00229         ;
DBED 00               (       SWCHAR.ASM):00230                 FCB     %00000000
DBEE 00               (       SWCHAR.ASM):00231                 FCB     %00000000
DBEF 01               (       SWCHAR.ASM):00232                 FCB     %00000001
DBF0 01               (       SWCHAR.ASM):00233                 FCB     %00000001
DBF1 00               (       SWCHAR.ASM):00234                 FCB     %00000000
DBF2 00               (       SWCHAR.ASM):00235                 FCB     %00000000
DBF3 00               (       SWCHAR.ASM):00236                 FCB     %00000000
                      (       SWCHAR.ASM):00237         ;
                      (       SWCHAR.ASM):00238         ;  Small Heart Right    Code = $21
                      (       SWCHAR.ASM):00239         ;
DBF4 00               (       SWCHAR.ASM):00240                 FCB     %00000000
DBF5 A0               (       SWCHAR.ASM):00241                 FCB     %10100000
DBF6 F0               (       SWCHAR.ASM):00242                 FCB     %11110000
DBF7 F0               (       SWCHAR.ASM):00243                 FCB     %11110000
DBF8 E0               (       SWCHAR.ASM):00244                 FCB     %11100000
DBF9 40               (       SWCHAR.ASM):00245                 FCB     %01000000
DBFA 00               (       SWCHAR.ASM):00246                 FCB     %00000000
                      (       SWCHAR.ASM):00247         ;
                      (       SWCHAR.ASM):00248         ;  Large Heart Left    Code = $22
                      (       SWCHAR.ASM):00249         ;
DBFB 00               (       SWCHAR.ASM):00250                 FCB     %00000000
DBFC 01               (       SWCHAR.ASM):00251                 FCB     %00000001
DBFD 03               (       SWCHAR.ASM):00252                 FCB     %00000011
DBFE 03               (       SWCHAR.ASM):00253                 FCB     %00000011
DBFF 01               (       SWCHAR.ASM):00254                 FCB     %00000001
DC00 00               (       SWCHAR.ASM):00255                 FCB     %00000000
DC01 00               (       SWCHAR.ASM):00256                 FCB     %00000000
                      (       SWCHAR.ASM):00257         ;
                      (       SWCHAR.ASM):00258         ;  Large Heart Right    Code = $23
                      (       SWCHAR.ASM):00259         ;
DC02 00               (       SWCHAR.ASM):00260                 FCB     %00000000
DC03 B0               (       SWCHAR.ASM):00261                 FCB     %10110000
DC04 F8               (       SWCHAR.ASM):00262                 FCB     %11111000
DC05 F8               (       SWCHAR.ASM):00263                 FCB     %11111000
DC06 F0               (       SWCHAR.ASM):00264                 FCB     %11110000
DC07 E0               (       SWCHAR.ASM):00265                 FCB     %11100000
DC08 40               (       SWCHAR.ASM):00266                 FCB     %01000000
                      (       SWCHAR.ASM):00267         ;
                      (       SWCHAR.ASM):00268         ;;;;;        END
                      (       SWCHAR.ASM):00269         ;
                      (       SWCHAR.ASM):00270         ;
                      (       SWCHAR.ASM):00271         ;
DC09 0080             (       SWCHAR.ASM):00272         THUDD   FDB     $0080           ;
DC0B 0001             (       SWCHAR.ASM):00273                 FDB     $0001           ;
                      (       SWCHAR.ASM):00274         ;
                      (       SWCHAR.ASM):00275         
                      (       SWCHAR.ASM):00276         
                      (       SWCHAR.ASM):00277         
DC0D 0050             (       SWCHAR.ASM):00278                 FDB     $0050           ;
DC0F 0004             (       SWCHAR.ASM):00279                 FDB     $0004           ;
                      (       SWCHAR.ASM):00280         ;
DC11 0050             (       SWCHAR.ASM):00281         BANGD   FDB     $0050           ;
DC13 0005             (       SWCHAR.ASM):00282                 FDB     $0005           ;
                      (       SWCHAR.ASM):00283         ;
     DC15             (       SWCHAR.ASM):00284         FLATAB  EQU     *               ;beginning of table
                      (       SWCHAR.ASM):00285         ;
DC15 03               (       SWCHAR.ASM):00286                 FCB     3               ;left
DC16 DC86             (       SWCHAR.ASM):00287                 FDB     LPASAG          ;passage
DC18 DCA2             (       SWCHAR.ASM):00288                 FDB     LDOOR           ;door
DC1A DCD2             (       SWCHAR.ASM):00289                 FDB     LSDOOR          ;secret door
DC1C DC6A             (       SWCHAR.ASM):00290                 FDB     LWALL           ;wall
                      (       SWCHAR.ASM):00291         ;
DC1E 00               (       SWCHAR.ASM):00292                 FCB     0               ;forward
DC1F DCA1             (       SWCHAR.ASM):00293                 FDB     FPASAG          ;passage
DC21 DCC2             (       SWCHAR.ASM):00294                 FDB     FDOOR           ;door
DC23 DCE0             (       SWCHAR.ASM):00295                 FDB     FSDOOR          ;secret door
DC25 DC7C             (       SWCHAR.ASM):00296                 FDB     FWALL           ;wall
                      (       SWCHAR.ASM):00297         ;
DC27 01               (       SWCHAR.ASM):00298                 FCB     1               ;right
DC28 DC94             (       SWCHAR.ASM):00299                 FDB     RPASAG          ;passage
DC2A DCB2             (       SWCHAR.ASM):00300                 FDB     RDOOR           ;door
DC2C DCD9             (       SWCHAR.ASM):00301                 FDB     RSDOOR          ;secret door
DC2E DC73             (       SWCHAR.ASM):00302                 FDB     RWALL           ;wall
                      (       SWCHAR.ASM):00303         ;
DC30 FF               (       SWCHAR.ASM):00304                 FCB     -1              ;end of table
                      (       SWCHAR.ASM):00305         ;
                      (       SWCHAR.ASM):00306         ;
                      (       SWCHAR.ASM):00307         ;
                      (    DAGGORATH.ASM):00131                 INCLUDE VOBJ.ASM         ;Object Vector Lists
                      (         VOBJ.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         VOBJ.ASM):00002         ;  O B J E C T   V E C T O R   L I S T S
                      (         VOBJ.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         VOBJ.ASM):00004         ;
                      (         VOBJ.ASM):00005                 NAM     VOBJ
                      (         VOBJ.ASM):00006         ;     LIBRY  CD
                      (         VOBJ.ASM):00007         ;
                      (         VOBJ.ASM):00008         ;        XDEF    FSHIEL,FFLASK,FRING
                      (         VOBJ.ASM):00009         ;        XDEF    FSCROL,FSWORD,FTORCH
                      (         VOBJ.ASM):00010         ;        OPT     NOMEX,NOGEN
                      (         VOBJ.ASM):00011         ;        DSCT
                      (         VOBJ.ASM):00012         ;
                      (         VOBJ.ASM):00013         ; Looking Forward - Shield
                      (         VOBJ.ASM):00014         ;
DC31 86AC             (         VOBJ.ASM):00015         FSHIEL  FCB     134,172         ;bottom left of shield
DC33 80C0             (         VOBJ.ASM):00016                 FCB     128,192
DC35 7ABA             (         VOBJ.ASM):00017                 FCB     122,186
                      (         VOBJ.ASM):00018                 
                      (         VOBJ.ASM):00019                 SVORG   128,168
     0080             (            SVORG):00001         SVX     SET     128
     00A8             (            SVORG):00002         SVY     SET     168
DC37 80A8FC           (            SVORG):00003                 FCB     128,168,V$REL
                      (         VOBJ.ASM):00020                 SVECT   134,164
DC3A 3E               (            SVECT):00001                 FCB     ((((134-SVX)/2)&$000F)*16)+(((164-SVY)/2)&$000F)
     0086             (            SVECT):00002         SVX     SET     134
     00A4             (            SVECT):00003         SVY     SET     164
                      (         VOBJ.ASM):00021                 SVECT   134,172
DC3B 04               (            SVECT):00001                 FCB     ((((134-SVX)/2)&$000F)*16)+(((172-SVY)/2)&$000F)
     0086             (            SVECT):00002         SVX     SET     134
     00AC             (            SVECT):00003         SVY     SET     172
                      (         VOBJ.ASM):00022                 SVEND
                      (            SVEND):00001                 SVNEW
DC3C 00               (            SVNEW):00001                 FCB     V$ABS
DC3D FE               (            SVEND):00002                 FCB     V$END
                      (         VOBJ.ASM):00023         
                      (         VOBJ.ASM):00024         ; * * * * * * * * *
                      (         VOBJ.ASM):00025         ;
                      (         VOBJ.ASM):00026         ; Looking Forward - Torch
                      (         VOBJ.ASM):00027         ;
DC3E                  (         VOBJ.ASM):00028         FTORCH  SVORG   118,60          ;tip of torch
     0076             (            SVORG):00001         SVX     SET     118
     003C             (            SVORG):00002         SVY     SET     60
DC3E 763CFC           (            SVORG):00003                 FCB     118,60,V$REL
                      (         VOBJ.ASM):00029                 SVECT   116,74
DC41 F7               (            SVECT):00001                 FCB     ((((116-SVX)/2)&$000F)*16)+(((74-SVY)/2)&$000F)
     0074             (            SVECT):00002         SVX     SET     116
     004A             (            SVECT):00003         SVY     SET     74
                      (         VOBJ.ASM):00030                 SVECT   114,72
DC42 FF               (            SVECT):00001                 FCB     ((((114-SVX)/2)&$000F)*16)+(((72-SVY)/2)&$000F)
     0072             (            SVECT):00002         SVX     SET     114
     0048             (            SVECT):00003         SVY     SET     72
                      (         VOBJ.ASM):00031                 SVECT   118,60
DC43 2A               (            SVECT):00001                 FCB     ((((118-SVX)/2)&$000F)*16)+(((60-SVY)/2)&$000F)
     0076             (            SVECT):00002         SVX     SET     118
     003C             (            SVECT):00003         SVY     SET     60
                      (         VOBJ.ASM):00032                 SVEND
                      (            SVEND):00001                 SVNEW
DC44 00               (            SVNEW):00001                 FCB     V$ABS
DC45 FE               (            SVEND):00002                 FCB     V$END
                      (         VOBJ.ASM):00033                 
                      (         VOBJ.ASM):00034         ;
                      (         VOBJ.ASM):00035         ; * * * * * * * * *
                      (         VOBJ.ASM):00036         ;
                      (         VOBJ.ASM):00037         ; Looking Forward - Sword
                      (         VOBJ.ASM):00038         ;
DC46 7250             (         VOBJ.ASM):00039         FSWORD  FCB     114,80          ;base of handle
DC48 7C64             (         VOBJ.ASM):00040                 FCB     124,100         ;tip of blade
DC4A FF               (         VOBJ.ASM):00041                 FCB     V$NEW
                      (         VOBJ.ASM):00042         ;
DC4B 7652             (         VOBJ.ASM):00043                 FCB     118,82          ;hand guard
DC4D 7256             (         VOBJ.ASM):00044                 FCB     114,86
DC4F FE               (         VOBJ.ASM):00045                 FCB     V$END           ;end of vector list
                      (         VOBJ.ASM):00046         ;
                      (         VOBJ.ASM):00047         ; * * * * * * * * *
                      (         VOBJ.ASM):00048         
                      (         VOBJ.ASM):00049         
                      (         VOBJ.ASM):00050         
                      (         VOBJ.ASM):00051         ; * * * * * * * * *
                      (         VOBJ.ASM):00052         ;
                      (         VOBJ.ASM):00053         ; Looking Forward - Flask
                      (         VOBJ.ASM):00054         ;
DC50                  (         VOBJ.ASM):00055         FFLASK  SVORG   110,162         ;top of flask
     006E             (            SVORG):00001         SVX     SET     110
     00A2             (            SVORG):00002         SVY     SET     162
DC50 6EA2FC           (            SVORG):00003                 FCB     110,162,V$REL
                      (         VOBJ.ASM):00056                 SVECT   120,164
DC53 51               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((164-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     00A4             (            SVECT):00003         SVY     SET     164
                      (         VOBJ.ASM):00057                 SVECT   120,160
DC54 0E               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((160-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     00A0             (            SVECT):00003         SVY     SET     160
                      (         VOBJ.ASM):00058                 SVECT   110,162
DC55 B1               (            SVECT):00001                 FCB     ((((110-SVX)/2)&$000F)*16)+(((162-SVY)/2)&$000F)
     006E             (            SVECT):00002         SVX     SET     110
     00A2             (            SVECT):00003         SVY     SET     162
                      (         VOBJ.ASM):00059                 SVEND                   ;end of vector list
                      (            SVEND):00001                 SVNEW
DC56 00               (            SVNEW):00001                 FCB     V$ABS
DC57 FE               (            SVEND):00002                 FCB     V$END
                      (         VOBJ.ASM):00060         
                      (         VOBJ.ASM):00061         ;
                      (         VOBJ.ASM):00062         ;
                      (         VOBJ.ASM):00063         ; * * * * * * * * *
                      (         VOBJ.ASM):00064         ;
                      (         VOBJ.ASM):00065         ; Looking Forward - Ring
                      (         VOBJ.ASM):00066         ;
DC58                  (         VOBJ.ASM):00067         FRING   SVORG   122,60          ;top of ring
     007A             (            SVORG):00001         SVX     SET     122
     003C             (            SVORG):00002         SVY     SET     60
DC58 7A3CFC           (            SVORG):00003                 FCB     122,60,V$REL
                      (         VOBJ.ASM):00068                 SVECT   124,62
DC5B 11               (            SVECT):00001                 FCB     ((((124-SVX)/2)&$000F)*16)+(((62-SVY)/2)&$000F)
     007C             (            SVECT):00002         SVX     SET     124
     003E             (            SVECT):00003         SVY     SET     62
                      (         VOBJ.ASM):00069                 SVECT   126,60
DC5C 1F               (            SVECT):00001                 FCB     ((((126-SVX)/2)&$000F)*16)+(((60-SVY)/2)&$000F)
     007E             (            SVECT):00002         SVX     SET     126
     003C             (            SVECT):00003         SVY     SET     60
                      (         VOBJ.ASM):00070                 SVECT   124,58
DC5D FF               (            SVECT):00001                 FCB     ((((124-SVX)/2)&$000F)*16)+(((58-SVY)/2)&$000F)
     007C             (            SVECT):00002         SVX     SET     124
     003A             (            SVECT):00003         SVY     SET     58
                      (         VOBJ.ASM):00071                 SVECT   122,60
DC5E F1               (            SVECT):00001                 FCB     ((((122-SVX)/2)&$000F)*16)+(((60-SVY)/2)&$000F)
     007A             (            SVECT):00002         SVX     SET     122
     003C             (            SVECT):00003         SVY     SET     60
                      (         VOBJ.ASM):00072                 SVEND
                      (            SVEND):00001                 SVNEW
DC5F 00               (            SVNEW):00001                 FCB     V$ABS
DC60 FE               (            SVEND):00002                 FCB     V$END
                      (         VOBJ.ASM):00073         
                      (         VOBJ.ASM):00074         
                      (         VOBJ.ASM):00075         
                      (         VOBJ.ASM):00076         ; * * * * * * * * *
                      (         VOBJ.ASM):00077         ;
                      (         VOBJ.ASM):00078         ; Looking Forward - Scroll
                      (         VOBJ.ASM):00079         ;
DC61                  (         VOBJ.ASM):00080         FSCROL  SVORG   118,194         ;top of scroll
     0076             (            SVORG):00001         SVX     SET     118
     00C2             (            SVORG):00002         SVY     SET     194
DC61 76C2FC           (            SVORG):00003                 FCB     118,194,V$REL
                      (         VOBJ.ASM):00081                 SVECT   120,192
DC64 1F               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((192-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     00C0             (            SVECT):00003         SVY     SET     192
                      (         VOBJ.ASM):00082                 SVECT   126,200
DC65 34               (            SVECT):00001                 FCB     ((((126-SVX)/2)&$000F)*16)+(((200-SVY)/2)&$000F)
     007E             (            SVECT):00002         SVX     SET     126
     00C8             (            SVECT):00003         SVY     SET     200
                      (         VOBJ.ASM):00083                 SVECT   124,202
DC66 F1               (            SVECT):00001                 FCB     ((((124-SVX)/2)&$000F)*16)+(((202-SVY)/2)&$000F)
     007C             (            SVECT):00002         SVX     SET     124
     00CA             (            SVECT):00003         SVY     SET     202
                      (         VOBJ.ASM):00084                 SVECT   118,194
DC67 DC               (            SVECT):00001                 FCB     ((((118-SVX)/2)&$000F)*16)+(((194-SVY)/2)&$000F)
     0076             (            SVECT):00002         SVX     SET     118
     00C2             (            SVECT):00003         SVY     SET     194
                      (         VOBJ.ASM):00085                 SVEND
                      (            SVEND):00001                 SVNEW
DC68 00               (            SVNEW):00001                 FCB     V$ABS
DC69 FE               (            SVEND):00002                 FCB     V$END
                      (         VOBJ.ASM):00086         ;
                      (         VOBJ.ASM):00087         ;
                      (         VOBJ.ASM):00088         ; * * * * * * * * *
                      (         VOBJ.ASM):00089         ;;;;;        END
                      (    DAGGORATH.ASM):00132                 INCLUDE VARC.ASM         ;Architectural Vector Lists
                      (         VARC.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         VARC.ASM):00002         ;  A R C H I T E C T U R A L   V E C T O R   L I S T S
                      (         VARC.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         VARC.ASM):00004         ;
                      (         VARC.ASM):00005                 NAM     VARC  - Architectural Vector Lists
                      (         VARC.ASM):00006         ;     LIBRY  CD
                      (         VARC.ASM):00007         ;
                      (         VARC.ASM):00008         ;        XDEF    LPASAG,RPASAG,FPASAG
                      (         VARC.ASM):00009         ;        XDEF    LDOOR,RDOOR,FDOOR
                      (         VARC.ASM):00010         ;        XDEF    LSDOOR,RSDOOR,FSDOOR
                      (         VARC.ASM):00011         ;        XDEF    LWALL,RWALL,FWALL
                      (         VARC.ASM):00012         ;        XDEF    LPEEK,RPEEK
                      (         VARC.ASM):00013         ;        DSCT
                      (         VARC.ASM):00014         ;
                      (         VARC.ASM):00015         ; Vector lists are stored as point pairs, with the Y
                      (         VARC.ASM):00016         ; coordinate appearing first: y,x,y,x,y,x,.....
                      (         VARC.ASM):00017         ;
                      (         VARC.ASM):00018         ; Special command codes can appear in place of the Y-coordinate
                      (         VARC.ASM):00019         ; (see COMDEF definitions).
                      (         VARC.ASM):00020         ;
                      (         VARC.ASM):00021         ; When describing creature parts, left and right are from the
                      (         VARC.ASM):00022         ; creature's point of view.
                      (         VARC.ASM):00023         ;
                      (         VARC.ASM):00024         ; When describing inanimate objects, left and right are from
                      (         VARC.ASM):00025         ; the player's point of view. (screen left and right)
                      (         VARC.ASM):00026         ;
                      (         VARC.ASM):00027         ; When in offset-mode, each data byte is divided into 2 4-bit
                      (         VARC.ASM):00028         ; nybbles, each of which are 4-bit two's complement offsets
                      (         VARC.ASM):00029         ; which are each multiplied by 2 and added to the preceeding
                      (         VARC.ASM):00030         ; point's coordinates to obtain the next y,x coordinate. The
                      (         VARC.ASM):00031         ; hi-order nybble is the y offset and the lo-order nybble is
                      (         VARC.ASM):00032         ; the x offset.
                      (         VARC.ASM):00033         ;
                      (         VARC.ASM):00034         
                      (         VARC.ASM):00035         
                      (         VARC.ASM):00036         
                      (         VARC.ASM):00037         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         VARC.ASM):00038         ;  A R C H I T E C T U R A L   F E A T U R E S
                      (         VARC.ASM):00039         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         VARC.ASM):00040         ;
                      (         VARC.ASM):00041         ; Left Wall
                      (         VARC.ASM):00042         ;
DC6A 101B             (         VARC.ASM):00043         LWALL   FCB     16,27           ;top horizontal line
DC6C 2640             (         VARC.ASM):00044                 FCB     38,64
DC6E 7240             (         VARC.ASM):00045                 FCB     114,64          ;far vertical line
DC70 881B             (         VARC.ASM):00046                 FCB     136,27          ;bottom horizontal line
DC72 FE               (         VARC.ASM):00047                 FCB     V$END           ;end of this list
                      (         VARC.ASM):00048         ;
                      (         VARC.ASM):00049         ; * * * * * * * * *
                      (         VARC.ASM):00050         ;
                      (         VARC.ASM):00051         ; Right Wall
                      (         VARC.ASM):00052         ;
DC73 10E5             (         VARC.ASM):00053         RWALL   FCB     16,229          ;top horizontal line
DC75 26C0             (         VARC.ASM):00054                 FCB     38,192
DC77 72C0             (         VARC.ASM):00055                 FCB     114,192         ;far vertical line
DC79 88E5             (         VARC.ASM):00056                 FCB     136,229         ;bottom horizontal line
DC7B FE               (         VARC.ASM):00057                 FCB     V$END           ;end of this list
                      (         VARC.ASM):00058         ;
                      (         VARC.ASM):00059         ; * * * * * * * * *
                      (         VARC.ASM):00060         ;
                      (         VARC.ASM):00061         ; Forward Wall
                      (         VARC.ASM):00062         ;
DC7C 2640             (         VARC.ASM):00063         FWALL   FCB     38,64           ;top horizontal line
DC7E 26C0             (         VARC.ASM):00064                 FCB     38,192
DC80 FF               (         VARC.ASM):00065                 FCB     V$NEW           ;start new sequence of vectors
                      (         VARC.ASM):00066         ;
DC81 7240             (         VARC.ASM):00067                 FCB     114,64          ;bottom horizontal line
DC83 72C0             (         VARC.ASM):00068                 FCB     114,192
DC85 FE               (         VARC.ASM):00069                 FCB     V$END           ;end of this list
                      (         VARC.ASM):00070         ;
                      (         VARC.ASM):00071         ; * * * * * * * * *
                      (         VARC.ASM):00072         ;
                      (         VARC.ASM):00073         ; Left Passage
                      (         VARC.ASM):00074         ;
DC86 261D             (         VARC.ASM):00075         LPASAG  FCB     38,29           ;top horizontal line
DC88 2640             (         VARC.ASM):00076                 FCB     38,64
DC8A 7240             (         VARC.ASM):00077                 FCB     114,64          ;vertical line
DC8C 721B             (         VARC.ASM):00078                 FCB     114,27          ;bottom horizontal line
DC8E FF               (         VARC.ASM):00079                 FCB     V$NEW           ;start new vector sequence
                      (         VARC.ASM):00080         ;
DC8F 101B             (         VARC.ASM):00081                 FCB     16,27           ;continuation of top wall line
DC91 2640             (         VARC.ASM):00082                 FCB     38,64
DC93 FE               (         VARC.ASM):00083                 FCB     V$END           ;end of this list
                      (         VARC.ASM):00084         ;
                      (         VARC.ASM):00085         ; * * * * * * * * *
                      (         VARC.ASM):00086         ;
                      (         VARC.ASM):00087         ; Right Passage
                      (         VARC.ASM):00088         ;
DC94 26E5             (         VARC.ASM):00089         RPASAG  FCB     38,229          ;top horizontal line
DC96 26C0             (         VARC.ASM):00090                 FCB     38,192
DC98 72C0             (         VARC.ASM):00091                 FCB     114,192         ;vertical line
DC9A 72E5             (         VARC.ASM):00092                 FCB     114,229         ;bottom horizontal line
                      (         VARC.ASM):00093         
                      (         VARC.ASM):00094         
                      (         VARC.ASM):00095         
DC9C FF               (         VARC.ASM):00096                 FCB     V$NEW           ;start new vector sequence
                      (         VARC.ASM):00097         ;
DC9D 10E5             (         VARC.ASM):00098                 FCB     16,229          ;continuation of top wall line
DC9F 26C0             (         VARC.ASM):00099                 FCB     38,192          ;
DCA1 FE               (         VARC.ASM):00100         FPASAG  FCB     V$END           ;end of this list
                      (         VARC.ASM):00101         ;
                      (         VARC.ASM):00102         ; * * * * * * * * *
                      (         VARC.ASM):00103         ;
                      (         VARC.ASM):00104         ; Left Door
                      (         VARC.ASM):00105         ;
DCA2 8028             (         VARC.ASM):00106         LDOOR   FCB     128,40          ;nearer vertical line
DCA4 4128             (         VARC.ASM):00107                 FCB     65,40
DCA6 4438             (         VARC.ASM):00108                 FCB     68,56           ;top line
DCA8 7738             (         VARC.ASM):00109                 FCB     119,56          ;farther vertical line
DCAA FF               (         VARC.ASM):00110                 FCB     V$NEW           ;start new vector sequence
                      (         VARC.ASM):00111         ;
DCAB 5C30             (         VARC.ASM):00112                 FCB     92,48           ;doorknob
DCAD 5D34             (         VARC.ASM):00113                 FCB     93,52
                      (         VARC.ASM):00114         ;
DCAF FD               (         VARC.ASM):00115                 FCB     V$JMP           ;chain to another list
DCB0 DC6A             (         VARC.ASM):00116                 FDB     LWALL           ;superimpose left wall
                      (         VARC.ASM):00117         ;
                      (         VARC.ASM):00118         ; * * * * * * * * *
                      (         VARC.ASM):00119         ;
                      (         VARC.ASM):00120         ; Right Door
                      (         VARC.ASM):00121         ;
DCB2 80D8             (         VARC.ASM):00122         RDOOR   FCB     128,216         ;nearer vertical line
DCB4 41D8             (         VARC.ASM):00123                 FCB     65,216
DCB6 44C8             (         VARC.ASM):00124                 FCB     68,200          ;top line
DCB8 77C8             (         VARC.ASM):00125                 FCB     119,200         ;farther vertical line
DCBA FF               (         VARC.ASM):00126                 FCB     V$NEW           ;start new vector sequence
                      (         VARC.ASM):00127         ;
DCBB 5CD0             (         VARC.ASM):00128                 FCB     92,208          ;doorknob
DCBD 5DCC             (         VARC.ASM):00129                 FCB     93,204
                      (         VARC.ASM):00130         ;
DCBF FD               (         VARC.ASM):00131                 FCB     V$JMP           ;chain to another list
DCC0 DC73             (         VARC.ASM):00132                 FDB     RWALL           ;superimpose right wall
                      (         VARC.ASM):00133         ;
                      (         VARC.ASM):00134         ; * * * * * * * * *
                      (         VARC.ASM):00135         ;
                      (         VARC.ASM):00136         ; Forward Door
                      (         VARC.ASM):00137         ;
DCC2 726C             (         VARC.ASM):00138         FDOOR   FCB     114,108         ;left side vertical line
DCC4 436C             (         VARC.ASM):00139                 FCB     67,108
DCC6 4394             (         VARC.ASM):00140                 FCB     67,148          ;top line
DCC8 7294             (         VARC.ASM):00141                 FCB     114,148         ;right side vertical line
DCCA FF               (         VARC.ASM):00142                 FCB     V$NEW           ;start new vector sequence
                      (         VARC.ASM):00143         ;
DCCB 5E7E             (         VARC.ASM):00144                 FCB     94,126          ;doorknob
DCCD 5E82             (         VARC.ASM):00145                 FCB     94,130
                      (         VARC.ASM):00146         ;
DCCF FD               (         VARC.ASM):00147                 FCB     V$JMP           ;chain to another list
DCD0 DC7C             (         VARC.ASM):00148                 FDB     FWALL           ;superimpose forward wall
                      (         VARC.ASM):00149         ;
                      (         VARC.ASM):00150         ; * * * * * * * * *
                      (         VARC.ASM):00151         ;
                      (         VARC.ASM):00152         
                      (         VARC.ASM):00153         
                      (         VARC.ASM):00154         
                      (         VARC.ASM):00155         ; Left Secret-Door
                      (         VARC.ASM):00156         ;
DCD2 8028             (         VARC.ASM):00157         LSDOOR  FCB     128,40          ;nearer line
DCD4 4232             (         VARC.ASM):00158                 FCB     66,50           ;apex of triangle
DCD6 753A             (         VARC.ASM):00159                 FCB     117,58          ;farther line
DCD8 FE               (         VARC.ASM):00160                 FCB     V$END           ;end of this list
                      (         VARC.ASM):00161         ;
                      (         VARC.ASM):00162         ; * * * * * * * * *
                      (         VARC.ASM):00163         ;
                      (         VARC.ASM):00164         ; Right Secret-Door
                      (         VARC.ASM):00165         ;
DCD9 80D8             (         VARC.ASM):00166         RSDOOR  FCB     128,216         ;nearer line
DCDB 42CE             (         VARC.ASM):00167                 FCB     66,206          ;apex of triangle
DCDD 75C6             (         VARC.ASM):00168                 FCB     117,198         ;farther line
DCDF FE               (         VARC.ASM):00169                 FCB     V$END           ;end of this list
                      (         VARC.ASM):00170         ;
                      (         VARC.ASM):00171         ; * * * * * * * * *
                      (         VARC.ASM):00172         ;
                      (         VARC.ASM):00173         ; Forward Secret-Door
                      (         VARC.ASM):00174         ;
DCE0 716C             (         VARC.ASM):00175         FSDOOR  FCB     113,108         ;left line
DCE2 4380             (         VARC.ASM):00176                 FCB     67,128          ;apex of triangle
DCE4 7294             (         VARC.ASM):00177                 FCB     114,148         ;right line
DCE6 FE               (         VARC.ASM):00178                 FCB     V$END           ;end of this list
                      (         VARC.ASM):00179         ;
                      (         VARC.ASM):00180         
                      (         VARC.ASM):00181         
                      (         VARC.ASM):00182         
                      (         VARC.ASM):00183         ; * * * * * * * * *
                      (         VARC.ASM):00184         ;
                      (         VARC.ASM):00185         ; Left Peek-a-boo shape vector list
                      (         VARC.ASM):00186         ;
DCE7                  (         VARC.ASM):00187         LPEEK   SVORG   100,28
     0064             (            SVORG):00001         SVX     SET     100
     001C             (            SVORG):00002         SVY     SET     28
DCE7 641CFC           (            SVORG):00003                 FCB     100,28,V$REL
                      (         VARC.ASM):00188                 SVECT   108,36
DCEA 44               (            SVECT):00001                 FCB     ((((108-SVX)/2)&$000F)*16)+(((36-SVY)/2)&$000F)
     006C             (            SVECT):00002         SVX     SET     108
     0024             (            SVECT):00003         SVY     SET     36
                      (         VARC.ASM):00189                 SVECT   112,32
DCEB 2E               (            SVECT):00001                 FCB     ((((112-SVX)/2)&$000F)*16)+(((32-SVY)/2)&$000F)
     0070             (            SVECT):00002         SVX     SET     112
     0020             (            SVECT):00003         SVY     SET     32
                      (         VARC.ASM):00190                 SVECT   120,36
DCEC 42               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((36-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     0024             (            SVECT):00003         SVY     SET     36
                      (         VARC.ASM):00191                 SVECT   128,28
DCED 4C               (            SVECT):00001                 FCB     ((((128-SVX)/2)&$000F)*16)+(((28-SVY)/2)&$000F)
     0080             (            SVECT):00002         SVX     SET     128
     001C             (            SVECT):00003         SVY     SET     28
                      (         VARC.ASM):00192                 SVEND
                      (            SVEND):00001                 SVNEW
DCEE 00               (            SVNEW):00001                 FCB     V$ABS
DCEF FE               (            SVEND):00002                 FCB     V$END
                      (         VARC.ASM):00193         ;
                      (         VARC.ASM):00194         ; * * * * * * * * *
                      (         VARC.ASM):00195         ;
                      (         VARC.ASM):00196         ; Right Peek-a-boo shape vector list
                      (         VARC.ASM):00197         ;
DCF0                  (         VARC.ASM):00198         RPEEK   SVORG   100,228
     0064             (            SVORG):00001         SVX     SET     100
     00E4             (            SVORG):00002         SVY     SET     228
DCF0 64E4FC           (            SVORG):00003                 FCB     100,228,V$REL
                      (         VARC.ASM):00199                 SVECT   108,220
DCF3 4C               (            SVECT):00001                 FCB     ((((108-SVX)/2)&$000F)*16)+(((220-SVY)/2)&$000F)
     006C             (            SVECT):00002         SVX     SET     108
     00DC             (            SVECT):00003         SVY     SET     220
                      (         VARC.ASM):00200                 SVECT   112,224
DCF4 22               (            SVECT):00001                 FCB     ((((112-SVX)/2)&$000F)*16)+(((224-SVY)/2)&$000F)
     0070             (            SVECT):00002         SVX     SET     112
     00E0             (            SVECT):00003         SVY     SET     224
                      (         VARC.ASM):00201                 SVECT   120,220
DCF5 4E               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((220-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     00DC             (            SVECT):00003         SVY     SET     220
                      (         VARC.ASM):00202                 SVECT   128,228
DCF6 44               (            SVECT):00001                 FCB     ((((128-SVX)/2)&$000F)*16)+(((228-SVY)/2)&$000F)
     0080             (            SVECT):00002         SVX     SET     128
     00E4             (            SVECT):00003         SVY     SET     228
                      (         VARC.ASM):00203                 SVEND
                      (            SVEND):00001                 SVNEW
DCF7 00               (            SVNEW):00001                 FCB     V$ABS
DCF8 FE               (            SVEND):00002                 FCB     V$END
                      (         VARC.ASM):00204         ;
                      (         VARC.ASM):00205         ;
                      (         VARC.ASM):00206         ; * * * * * * * * *
                      (         VARC.ASM):00207         ;;;;;        END
                      (    DAGGORATH.ASM):00133                 INCLUDE VERT.ASM         ;Vertical Feature Vector Lists
                      (         VERT.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         VERT.ASM):00002         ;  V E R T I C A L   F E A T U R E   V E C T O R   L I S T S
                      (         VERT.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (         VERT.ASM):00004                 NAM     VERT
                      (         VERT.ASM):00005         ;     LIBRY  CD
                      (         VERT.ASM):00006         ;        XDEF    FWDVER,CELINE
                      (         VERT.ASM):00007         ;        OPT     NOMEX,NOGEN
                      (         VERT.ASM):00008         ;        DSCT
                      (         VERT.ASM):00009         ;
                      (         VERT.ASM):00010         ;  Forward Looking Features Table
                      (         VERT.ASM):00011         ;
DCF9 DD45             (         VERT.ASM):00012         FWDVER  FDB     HOLEUP          ;(0) VF.HUP
DCFB DD01             (         VERT.ASM):00013                 FDB     FLUP            ;(1) VF.LUP
DCFD DD61             (         VERT.ASM):00014                 FDB     HOLEDN          ;(2) VF.HDN
DCFF DD07             (         VERT.ASM):00015                 FDB     FLDN            ;(3) VF.LDN
                      (         VERT.ASM):00016         ;
                      (         VERT.ASM):00017         ;  Forward Looking Ladder Up Sequence
                      (         VERT.ASM):00018         ;
DD01 FB               (         VERT.ASM):00019         FLUP    FCB     V$JSR           ;subroutine
DD02 DD0D             (         VERT.ASM):00020                 FDB     LADDER          ;   ladder
DD04 FD               (         VERT.ASM):00021                 FCB     V$JMP           ;jump to
DD05 DD45             (         VERT.ASM):00022                 FDB     HOLEUP          ;   hole-up
                      (         VERT.ASM):00023         ;
                      (         VERT.ASM):00024         ;  Forward Looking Ladder Down Sequece
                      (         VERT.ASM):00025         ;
DD07 FB               (         VERT.ASM):00026         FLDN    FCB     V$JSR           ;subroutine
DD08 DD0D             (         VERT.ASM):00027                 FDB     LADDER          ;   ladder
DD0A FD               (         VERT.ASM):00028                 FCB     V$JMP           ;jump to
DD0B DD61             (         VERT.ASM):00029                 FDB     HOLEDN          ;   hole-down
                      (         VERT.ASM):00030         
                      (         VERT.ASM):00031         
                      (         VERT.ASM):00032         
                      (         VERT.ASM):00033         ;
                      (         VERT.ASM):00034         ;  Forward Looking Ladder Vector List Subroutine
                      (         VERT.ASM):00035         ;
DD0D 1874             (         VERT.ASM):00036         LADDER  FCB     24,116          ;upper left corner
DD0F 8074             (         VERT.ASM):00037                 FCB     128,116         ;lower left corner
DD11 FF               (         VERT.ASM):00038                 FCB     V$NEW
                      (         VERT.ASM):00039         ;
DD12 188C             (         VERT.ASM):00040                 FCB     24,140          ;upper right corner
DD14 808C             (         VERT.ASM):00041                 FCB     128,140         ;lower right corner
DD16 FF               (         VERT.ASM):00042                 FCB     V$NEW
                      (         VERT.ASM):00043         ;
DD17 1C74             (         VERT.ASM):00044                 FCB     28,116          ;1st rung
DD19 1C8C             (         VERT.ASM):00045                 FCB     28,140
DD1B FF               (         VERT.ASM):00046                 FCB     V$NEW
                      (         VERT.ASM):00047         ;
DD1C 2874             (         VERT.ASM):00048                 FCB     40,116          ;2nd rung
DD1E 288C             (         VERT.ASM):00049                 FCB     40,140
DD20 FF               (         VERT.ASM):00050                 FCB     V$NEW
                      (         VERT.ASM):00051         ;
DD21 3474             (         VERT.ASM):00052                 FCB     52,116          ;3rd rung
DD23 348C             (         VERT.ASM):00053                 FCB     52,140
DD25 FF               (         VERT.ASM):00054                 FCB     V$NEW
                      (         VERT.ASM):00055         ;
DD26 4074             (         VERT.ASM):00056                 FCB     64,116          ;4th rung
DD28 408C             (         VERT.ASM):00057                 FCB     64,140
DD2A FF               (         VERT.ASM):00058                 FCB     V$NEW
                      (         VERT.ASM):00059         ;
DD2B 4C74             (         VERT.ASM):00060                 FCB     76,116          ;5th rung
DD2D 4C8C             (         VERT.ASM):00061                 FCB     76,140
DD2F FF               (         VERT.ASM):00062                 FCB     V$NEW
                      (         VERT.ASM):00063         ;
DD30 5874             (         VERT.ASM):00064                 FCB     88,116          ;6th rung
DD32 588C             (         VERT.ASM):00065                 FCB     88,140
DD34 FF               (         VERT.ASM):00066                 FCB     V$NEW
                      (         VERT.ASM):00067         ;
DD35 6474             (         VERT.ASM):00068                 FCB     100,116          ;7th rung
DD37 648C             (         VERT.ASM):00069                 FCB     100,140
DD39 FF               (         VERT.ASM):00070                 FCB     V$NEW
                      (         VERT.ASM):00071         ;
DD3A 7074             (         VERT.ASM):00072                 FCB     112,116          ;8th rung
DD3C 708C             (         VERT.ASM):00073                 FCB     112,140
DD3E FF               (         VERT.ASM):00074                 FCB     V$NEW
                      (         VERT.ASM):00075         ;
DD3F 7B74             (         VERT.ASM):00076                 FCB     123,116          ;9th rung
DD41 7B8C             (         VERT.ASM):00077                 FCB     123,140
DD43 FF               (         VERT.ASM):00078                 FCB     V$NEW
                      (         VERT.ASM):00079         ;
DD44 FA               (         VERT.ASM):00080                 FCB     V$RTS           ;return
                      (         VERT.ASM):00081         
                      (         VERT.ASM):00082         
                      (         VERT.ASM):00083         
                      (         VERT.ASM):00084         ;
                      (         VERT.ASM):00085         ;  Forward Looking Ceiling Hole Vector List
                      (         VERT.ASM):00086         ;
DD45 2264             (         VERT.ASM):00087         HOLEUP  FCB     34,100          ;back left corner
DD47 185C             (         VERT.ASM):00088                 FCB     24,92           ;front left corner
DD49 18A4             (         VERT.ASM):00089                 FCB     24,164          ;nearer horizontal edge
DD4B 229C             (         VERT.ASM):00090                 FCB     34,156          ;right edge
DD4D 2264             (         VERT.ASM):00091                 FCB     34,100          ;farther horizontal edge
                      (         VERT.ASM):00092         ;
DD4F 1864             (         VERT.ASM):00093                 FCB     24,100          ;line up on left
DD51 FF               (         VERT.ASM):00094                 FCB     V$NEW           ;start new sequence of vectors
                      (         VERT.ASM):00095         ;
DD52 229C             (         VERT.ASM):00096                 FCB     34,156          ;farther right corner
DD54 189C             (         VERT.ASM):00097                 FCB     24,156          ;line up on right
DD56 FF               (         VERT.ASM):00098                 FCB     V$NEW           ;start new sequence of vectors
                      (         VERT.ASM):00099         ;
DD57 1C2F             (         VERT.ASM):00100                 FCB     28,47           ;left end of left ceiling line
DD59 1C60             (         VERT.ASM):00101                 FCB     28,96           ;right end of left ceiling line
DD5B FF               (         VERT.ASM):00102                 FCB     V$NEW           ;start new sequence of vectors
                      (         VERT.ASM):00103         ;
DD5C 1CA1             (         VERT.ASM):00104                 FCB     28,161          ;left end of right ceiling line
DD5E 1CD2             (         VERT.ASM):00105                 FCB     28,210          ;right end of right ceiling line
DD60 FE               (         VERT.ASM):00106                 FCB     V$END           ;done
                      (         VERT.ASM):00107         
                      (         VERT.ASM):00108         
                      (         VERT.ASM):00109         
                      (         VERT.ASM):00110         ;
                      (         VERT.ASM):00111         ;  Forward Looking Floor Hole Vector List
                      (         VERT.ASM):00112         ;
DD61 7664             (         VERT.ASM):00113         HOLEDN  FCB     118,100         ;back left corner
DD63 805C             (         VERT.ASM):00114                 FCB     128,92          ;front left corner
DD65 80A4             (         VERT.ASM):00115                 FCB     128,164         ;nearer horizontal edge
DD67 769C             (         VERT.ASM):00116                 FCB     118,156         ;right edge
DD69 7664             (         VERT.ASM):00117                 FCB     118,100         ;farther edge
                      (         VERT.ASM):00118         ;
DD6B 8064             (         VERT.ASM):00119                 FCB     128,100         ;line down on left
DD6D FF               (         VERT.ASM):00120                 FCB     V$NEW           ;start new sequence of vectors
                      (         VERT.ASM):00121         ;
DD6E 769C             (         VERT.ASM):00122                 FCB     118,156         ;farther right corner
DD70 809C             (         VERT.ASM):00123                 FCB     128,156         ;line down on right
DD72 FF               (         VERT.ASM):00124                 FCB     V$NEW           ;fall into CELINE
                      (         VERT.ASM):00125         ;
                      (         VERT.ASM):00126         ; Forward "Passage" (line across ceiling)
                      (         VERT.ASM):00127         ;
DD73 1C2F             (         VERT.ASM):00128         CELINE  FCB     28,47           ;line across ceiling
DD75 1CD2             (         VERT.ASM):00129                 FCB     28,210          ;
DD77 FE               (         VERT.ASM):00130         VNULL   FCB     V$END           ;end of vector list
                      (         VERT.ASM):00131         ;
                      (         VERT.ASM):00132         ;;;;;        END
                      (    DAGGORATH.ASM):00134                 INCLUDE D3.ASM           ;Creature Vector List (I)
                      (           D3.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           D3.ASM):00002         ;  C R E A T U R E   V E C T O R   L I S T S   ( I )
                      (           D3.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           D3.ASM):00004         ;
                      (           D3.ASM):00005                 NAM     D3      - Creature Vector Lists (I)
                      (           D3.ASM):00006         ;     LIBRY  CD
                      (           D3.ASM):00007         ;
                      (           D3.ASM):00008         ;        XDEF    SGINT1,SGINT2,BALROG,BLOB
                      (           D3.ASM):00009         ;        XDEF    WRAITH,SPIDER,SCORP
                      (           D3.ASM):00010         ;        OPT     NOMEX,NOGEN
                      (           D3.ASM):00011         ;        DSCT
                      (           D3.ASM):00012         ;
                      (           D3.ASM):00013         ; Stone Giant 1 - Club
                      (           D3.ASM):00014         ;
DD78                  (           D3.ASM):00015         SGINT1  SVORG   104,98          ;top of club handle at hand
     0068             (            SVORG):00001         SVX     SET     104
     0062             (            SVORG):00002         SVY     SET     98
DD78 6862FC           (            SVORG):00003                 FCB     104,98,V$REL
                      (           D3.ASM):00016                 SVECT   98,112
DD7B D7               (            SVECT):00001                 FCB     ((((98-SVX)/2)&$000F)*16)+(((112-SVY)/2)&$000F)
     0062             (            SVECT):00002         SVX     SET     98
     0070             (            SVECT):00003         SVY     SET     112
                      (           D3.ASM):00017                 SVECT   92,120
DD7C D4               (            SVECT):00001                 FCB     ((((92-SVX)/2)&$000F)*16)+(((120-SVY)/2)&$000F)
     005C             (            SVECT):00002         SVX     SET     92
     0078             (            SVECT):00003         SVY     SET     120
                      (           D3.ASM):00018                 SVECT   94,128
DD7D 14               (            SVECT):00001                 FCB     ((((94-SVX)/2)&$000F)*16)+(((128-SVY)/2)&$000F)
     005E             (            SVECT):00002         SVX     SET     94
     0080             (            SVECT):00003         SVY     SET     128
                      (           D3.ASM):00019                 SVECT   96,132
DD7E 12               (            SVECT):00001                 FCB     ((((96-SVX)/2)&$000F)*16)+(((132-SVY)/2)&$000F)
     0060             (            SVECT):00002         SVX     SET     96
     0084             (            SVECT):00003         SVY     SET     132
                      (           D3.ASM):00020                 SVECT   102,132         ;meet leg
DD7F 30               (            SVECT):00001                 FCB     ((((102-SVX)/2)&$000F)*16)+(((132-SVY)/2)&$000F)
     0066             (            SVECT):00002         SVX     SET     102
     0084             (            SVECT):00003         SVY     SET     132
                      (           D3.ASM):00021                 SVECT   104,126
DD80 1D               (            SVECT):00001                 FCB     ((((104-SVX)/2)&$000F)*16)+(((126-SVY)/2)&$000F)
     0068             (            SVECT):00002         SVX     SET     104
     007E             (            SVECT):00003         SVY     SET     126
                      (           D3.ASM):00022                 SVECT   104,120
DD81 0D               (            SVECT):00001                 FCB     ((((104-SVX)/2)&$000F)*16)+(((120-SVY)/2)&$000F)
     0068             (            SVECT):00002         SVX     SET     104
     0078             (            SVECT):00003         SVY     SET     120
                      (           D3.ASM):00023                 SVECT   102,114
DD82 FD               (            SVECT):00001                 FCB     ((((102-SVX)/2)&$000F)*16)+(((114-SVY)/2)&$000F)
     0066             (            SVECT):00002         SVX     SET     102
     0072             (            SVECT):00003         SVY     SET     114
                      (           D3.ASM):00024                 SVECT   106,100         ;bottom of club handle at hand
DD83 29               (            SVECT):00001                 FCB     ((((106-SVX)/2)&$000F)*16)+(((100-SVY)/2)&$000F)
     006A             (            SVECT):00002         SVX     SET     106
     0064             (            SVECT):00003         SVY     SET     100
                      (           D3.ASM):00025                 SVNEW
DD84 00               (            SVNEW):00001                 FCB     V$ABS
DD85 FD               (           D3.ASM):00026                 FCB     V$JMP           ;chain to sgiant
DD86 DD99             (           D3.ASM):00027                 FDB     SGIANT          ;remainder of Stone Giant
                      (           D3.ASM):00028         ;
                      (           D3.ASM):00029         ; Stone Giant 2 - Axe
                      (           D3.ASM):00030         ;
DD88 6862             (           D3.ASM):00031         SGINT2  FCB     104,98          ;top upper axe handle at hand
DD8A 5E7C             (           D3.ASM):00032                 FCB     94,124
DD8C 607E             (           D3.ASM):00033                 FCB     96,126
DD8E 6A64             (           D3.ASM):00034                 FCB     106,100         ;lower upper axe handle
DD90 FF               (           D3.ASM):00035                 FCB     V$NEW
                      (           D3.ASM):00036         ;
DD91 6684             (           D3.ASM):00037                 FCB     102,132         ;top of axe blade
DD93 5C72             (           D3.ASM):00038                 FCB     92,114          ;back tip
DD95 6676             (           D3.ASM):00039                 FCB     102,118         ;lower bend
DD97 6E72             (           D3.ASM):00040                 FCB     110,114         ;bottom of blade
                      (           D3.ASM):00041         ;
                      (           D3.ASM):00042         ;                               ;SGINT2 falls thru to SGIANT
                      (           D3.ASM):00043         ;
DD99                  (           D3.ASM):00044         SGIANT  SVORG   102,132         ;left leg (at club or axe)
     0066             (            SVORG):00001         SVX     SET     102
     0084             (            SVORG):00002         SVY     SET     132
DD99 6684FC           (            SVORG):00003                 FCB     102,132,V$REL
                      (           D3.ASM):00045                 SVECT   102,136
DD9C 02               (            SVECT):00001                 FCB     ((((102-SVX)/2)&$000F)*16)+(((136-SVY)/2)&$000F)
     0066             (            SVECT):00002         SVX     SET     102
     0088             (            SVECT):00003         SVY     SET     136
                      (           D3.ASM):00046                 SVECT   112,148
DD9D 56               (            SVECT):00001                 FCB     ((((112-SVX)/2)&$000F)*16)+(((148-SVY)/2)&$000F)
     0070             (            SVECT):00002         SVX     SET     112
     0094             (            SVECT):00003         SVY     SET     148
                      (           D3.ASM):00047                 SVECT   122,160         ;left heel
DD9E 56               (            SVECT):00001                 FCB     ((((122-SVX)/2)&$000F)*16)+(((160-SVY)/2)&$000F)
     007A             (            SVECT):00002         SVX     SET     122
     00A0             (            SVECT):00003         SVY     SET     160
                      (           D3.ASM):00048                 SVECT   124,174
DD9F 17               (            SVECT):00001                 FCB     ((((124-SVX)/2)&$000F)*16)+(((174-SVY)/2)&$000F)
     007C             (            SVECT):00002         SVX     SET     124
     00AE             (            SVECT):00003         SVY     SET     174
                      (           D3.ASM):00049                 SVECT   120,170
DDA0 EE               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((170-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     00AA             (            SVECT):00003         SVY     SET     170
                      (           D3.ASM):00050                 SVECT   120,174
DDA1 02               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((174-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     00AE             (            SVECT):00003         SVY     SET     174
                      (           D3.ASM):00051         
                      (           D3.ASM):00052         
                      (           D3.ASM):00053         
                      (           D3.ASM):00054                 SVECT   116,162         ;left upper ankle
DDA2 EA               (            SVECT):00001                 FCB     ((((116-SVX)/2)&$000F)*16)+(((162-SVY)/2)&$000F)
     0074             (            SVECT):00002         SVX     SET     116
     00A2             (            SVECT):00003         SVY     SET     162
                      (           D3.ASM):00055                 SVECT   106,152
DDA3 BB               (            SVECT):00001                 FCB     ((((106-SVX)/2)&$000F)*16)+(((152-SVY)/2)&$000F)
     006A             (            SVECT):00002         SVX     SET     106
     0098             (            SVECT):00003         SVY     SET     152
                      (           D3.ASM):00056                 SVECT   96,142          ;left knee
DDA4 BB               (            SVECT):00001                 FCB     ((((96-SVX)/2)&$000F)*16)+(((142-SVY)/2)&$000F)
     0060             (            SVECT):00002         SVX     SET     96
     008E             (            SVECT):00003         SVY     SET     142
                      (           D3.ASM):00057                 SVECT   92,130
DDA5 EA               (            SVECT):00001                 FCB     ((((92-SVX)/2)&$000F)*16)+(((130-SVY)/2)&$000F)
     005C             (            SVECT):00002         SVX     SET     92
     0082             (            SVECT):00003         SVY     SET     130
                      (           D3.ASM):00058                 SVECT   88,118          ;left thigh at arm
DDA6 EA               (            SVECT):00001                 FCB     ((((88-SVX)/2)&$000F)*16)+(((118-SVY)/2)&$000F)
     0058             (            SVECT):00002         SVX     SET     88
     0076             (            SVECT):00003         SVY     SET     118
                      (           D3.ASM):00059                 SVNEW
DDA7 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D3.ASM):00060         ;
                      (           D3.ASM):00061         ; face
                      (           D3.ASM):00062         ;
                      (           D3.ASM):00063                 SVORG   78,92
     004E             (            SVORG):00001         SVX     SET     78
     005C             (            SVORG):00002         SVY     SET     92
DDA8 4E5CFC           (            SVORG):00003                 FCB     78,92,V$REL
                      (           D3.ASM):00064                 SVECT   70,96
DDAB C2               (            SVECT):00001                 FCB     ((((70-SVX)/2)&$000F)*16)+(((96-SVY)/2)&$000F)
     0046             (            SVECT):00002         SVX     SET     70
     0060             (            SVECT):00003         SVY     SET     96
                      (           D3.ASM):00065                 SVECT   80,98
DDAC 51               (            SVECT):00001                 FCB     ((((80-SVX)/2)&$000F)*16)+(((98-SVY)/2)&$000F)
     0050             (            SVECT):00002         SVX     SET     80
     0062             (            SVECT):00003         SVY     SET     98
                      (           D3.ASM):00066                 SVECT   86,94
DDAD 3E               (            SVECT):00001                 FCB     ((((86-SVX)/2)&$000F)*16)+(((94-SVY)/2)&$000F)
     0056             (            SVECT):00002         SVX     SET     86
     005E             (            SVECT):00003         SVY     SET     94
                      (           D3.ASM):00067                 SVECT   78,92
DDAE CF               (            SVECT):00001                 FCB     ((((78-SVX)/2)&$000F)*16)+(((92-SVY)/2)&$000F)
     004E             (            SVECT):00002         SVX     SET     78
     005C             (            SVECT):00003         SVY     SET     92
                      (           D3.ASM):00068                 SVECT   76,84
DDAF FC               (            SVECT):00001                 FCB     ((((76-SVX)/2)&$000F)*16)+(((84-SVY)/2)&$000F)
     004C             (            SVECT):00002         SVX     SET     76
     0054             (            SVECT):00003         SVY     SET     84
                      (           D3.ASM):00069                 SVECT   84,88
DDB0 42               (            SVECT):00001                 FCB     ((((84-SVX)/2)&$000F)*16)+(((88-SVY)/2)&$000F)
     0054             (            SVECT):00002         SVX     SET     84
     0058             (            SVECT):00003         SVY     SET     88
                      (           D3.ASM):00070                 SVECT   86,94
DDB1 13               (            SVECT):00001                 FCB     ((((86-SVX)/2)&$000F)*16)+(((94-SVY)/2)&$000F)
     0056             (            SVECT):00002         SVX     SET     86
     005E             (            SVECT):00003         SVY     SET     94
                      (           D3.ASM):00071                 SVNEW
DDB2 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D3.ASM):00072         ;
                      (           D3.ASM):00073         ; bottom of club/axe handle and right leg
                      (           D3.ASM):00074         ;
                      (           D3.ASM):00075                 SVORG   106,90
     006A             (            SVORG):00001         SVX     SET     106
     005A             (            SVORG):00002         SVY     SET     90
DDB3 6A5AFC           (            SVORG):00003                 FCB     106,90,V$REL
                      (           D3.ASM):00076                 SVECT   108,86
DDB6 1E               (            SVECT):00001                 FCB     ((((108-SVX)/2)&$000F)*16)+(((86-SVY)/2)&$000F)
     006C             (            SVECT):00002         SVX     SET     108
     0056             (            SVECT):00003         SVY     SET     86
                      (           D3.ASM):00077                 SVECT   110,88
DDB7 11               (            SVECT):00001                 FCB     ((((110-SVX)/2)&$000F)*16)+(((88-SVY)/2)&$000F)
     006E             (            SVECT):00002         SVX     SET     110
     0058             (            SVECT):00003         SVY     SET     88
                      (           D3.ASM):00078                 SVECT   108,94
DDB8 F3               (            SVECT):00001                 FCB     ((((108-SVX)/2)&$000F)*16)+(((94-SVY)/2)&$000F)
     006C             (            SVECT):00002         SVX     SET     108
     005E             (            SVECT):00003         SVY     SET     94
                      (           D3.ASM):00079         ;
                      (           D3.ASM):00080                 SVECT   120,98
DDB9 62               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((98-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     0062             (            SVECT):00003         SVY     SET     98
                      (           D3.ASM):00081                 SVECT   126,84
DDBA 39               (            SVECT):00001                 FCB     ((((126-SVX)/2)&$000F)*16)+(((84-SVY)/2)&$000F)
     007E             (            SVECT):00002         SVX     SET     126
     0054             (            SVECT):00003         SVY     SET     84
                      (           D3.ASM):00082                 SVECT   122,88
DDBB E2               (            SVECT):00001                 FCB     ((((122-SVX)/2)&$000F)*16)+(((88-SVY)/2)&$000F)
     007A             (            SVECT):00002         SVX     SET     122
     0058             (            SVECT):00003         SVY     SET     88
                      (           D3.ASM):00083                 SVECT   122,80
DDBC 0C               (            SVECT):00001                 FCB     ((((122-SVX)/2)&$000F)*16)+(((80-SVY)/2)&$000F)
     007A             (            SVECT):00002         SVX     SET     122
     0050             (            SVECT):00003         SVY     SET     80
                      (           D3.ASM):00084                 SVECT   118,88
DDBD E4               (            SVECT):00001                 FCB     ((((118-SVX)/2)&$000F)*16)+(((88-SVY)/2)&$000F)
     0076             (            SVECT):00002         SVX     SET     118
     0058             (            SVECT):00003         SVY     SET     88
                      (           D3.ASM):00085                 SVECT   102,76
DDBE 8A               (            SVECT):00001                 FCB     ((((102-SVX)/2)&$000F)*16)+(((76-SVY)/2)&$000F)
     0066             (            SVECT):00002         SVX     SET     102
     004C             (            SVECT):00003         SVY     SET     76
                      (           D3.ASM):00086                 SVECT   98,80
DDBF E2               (            SVECT):00001                 FCB     ((((98-SVX)/2)&$000F)*16)+(((80-SVY)/2)&$000F)
     0062             (            SVECT):00002         SVX     SET     98
     0050             (            SVECT):00003         SVY     SET     80
                      (           D3.ASM):00087                 SVNEW
DDC0 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D3.ASM):00088         ;
                      (           D3.ASM):00089         ; arm and head
                      (           D3.ASM):00090         ;
                      (           D3.ASM):00091                 SVORG   86,84
     0056             (            SVORG):00001         SVX     SET     86
     0054             (            SVORG):00002         SVY     SET     84
DDC1 5654FC           (            SVORG):00003                 FCB     86,84,V$REL
                      (           D3.ASM):00092                 SVECT   96,92
DDC4 54               (            SVECT):00001                 FCB     ((((96-SVX)/2)&$000F)*16)+(((92-SVY)/2)&$000F)
     0060             (            SVECT):00002         SVX     SET     96
     005C             (            SVECT):00003         SVY     SET     92
                      (           D3.ASM):00093                 SVECT   108,102
DDC5 65               (            SVECT):00001                 FCB     ((((108-SVX)/2)&$000F)*16)+(((102-SVY)/2)&$000F)
     006C             (            SVECT):00002         SVX     SET     108
     0066             (            SVECT):00003         SVY     SET     102
                      (           D3.ASM):00094                 SVECT   112,98
DDC6 2E               (            SVECT):00001                 FCB     ((((112-SVX)/2)&$000F)*16)+(((98-SVY)/2)&$000F)
     0070             (            SVECT):00002         SVX     SET     112
     0062             (            SVECT):00003         SVY     SET     98
                      (           D3.ASM):00095         
                      (           D3.ASM):00096         
                      (           D3.ASM):00097         
                      (           D3.ASM):00098                 SVECT   104,86
DDC7 CA               (            SVECT):00001                 FCB     ((((104-SVX)/2)&$000F)*16)+(((86-SVY)/2)&$000F)
     0068             (            SVECT):00002         SVX     SET     104
     0056             (            SVECT):00003         SVY     SET     86
                      (           D3.ASM):00099                 SVECT   94,74
DDC8 BA               (            SVECT):00001                 FCB     ((((94-SVX)/2)&$000F)*16)+(((74-SVY)/2)&$000F)
     005E             (            SVECT):00002         SVX     SET     94
     004A             (            SVECT):00003         SVY     SET     74
                      (           D3.ASM):00100                 SVECT   82,76
DDC9 A1               (            SVECT):00001                 FCB     ((((82-SVX)/2)&$000F)*16)+(((76-SVY)/2)&$000F)
     0052             (            SVECT):00002         SVX     SET     82
     004C             (            SVECT):00003         SVY     SET     76
                      (           D3.ASM):00101                 SVECT   76,84
DDCA D4               (            SVECT):00001                 FCB     ((((76-SVX)/2)&$000F)*16)+(((84-SVY)/2)&$000F)
     004C             (            SVECT):00002         SVX     SET     76
     0054             (            SVECT):00003         SVY     SET     84
                      (           D3.ASM):00102                 SVECT   72,80
DDCB EE               (            SVECT):00001                 FCB     ((((72-SVX)/2)&$000F)*16)+(((80-SVY)/2)&$000F)
     0048             (            SVECT):00002         SVX     SET     72
     0050             (            SVECT):00003         SVY     SET     80
                      (           D3.ASM):00103                 SVECT   74,84
DDCC 12               (            SVECT):00001                 FCB     ((((74-SVX)/2)&$000F)*16)+(((84-SVY)/2)&$000F)
     004A             (            SVECT):00002         SVX     SET     74
     0054             (            SVECT):00003         SVY     SET     84
                      (           D3.ASM):00104                 SVECT   68,88
DDCD D2               (            SVECT):00001                 FCB     ((((68-SVX)/2)&$000F)*16)+(((88-SVY)/2)&$000F)
     0044             (            SVECT):00002         SVX     SET     68
     0058             (            SVECT):00003         SVY     SET     88
                      (           D3.ASM):00105                 SVECT   70,94
DDCE 13               (            SVECT):00001                 FCB     ((((70-SVX)/2)&$000F)*16)+(((94-SVY)/2)&$000F)
     0046             (            SVECT):00002         SVX     SET     70
     005E             (            SVECT):00003         SVY     SET     94
                      (           D3.ASM):00106                 SVECT   66,96
DDCF E1               (            SVECT):00001                 FCB     ((((66-SVX)/2)&$000F)*16)+(((96-SVY)/2)&$000F)
     0042             (            SVECT):00002         SVX     SET     66
     0060             (            SVECT):00003         SVY     SET     96
                      (           D3.ASM):00107                 SVECT   70,96
DDD0 20               (            SVECT):00001                 FCB     ((((70-SVX)/2)&$000F)*16)+(((96-SVY)/2)&$000F)
     0046             (            SVECT):00002         SVX     SET     70
     0060             (            SVECT):00003         SVY     SET     96
                      (           D3.ASM):00108                 SVECT   68,108
DDD1 F6               (            SVECT):00001                 FCB     ((((68-SVX)/2)&$000F)*16)+(((108-SVY)/2)&$000F)
     0044             (            SVECT):00002         SVX     SET     68
     006C             (            SVECT):00003         SVY     SET     108
                      (           D3.ASM):00109                 SVECT   72,116
DDD2 24               (            SVECT):00001                 FCB     ((((72-SVX)/2)&$000F)*16)+(((116-SVY)/2)&$000F)
     0048             (            SVECT):00002         SVX     SET     72
     0074             (            SVECT):00003         SVY     SET     116
                      (           D3.ASM):00110                 SVECT   86,120
DDD3 72               (            SVECT):00001                 FCB     ((((86-SVX)/2)&$000F)*16)+(((120-SVY)/2)&$000F)
     0056             (            SVECT):00002         SVX     SET     86
     0078             (            SVECT):00003         SVY     SET     120
                      (           D3.ASM):00111                 SVECT   96,104
DDD4 58               (            SVECT):00001                 FCB     ((((96-SVX)/2)&$000F)*16)+(((104-SVY)/2)&$000F)
     0060             (            SVECT):00002         SVX     SET     96
     0068             (            SVECT):00003         SVY     SET     104
                      (           D3.ASM):00112                 SVECT   92,100
DDD5 EE               (            SVECT):00001                 FCB     ((((92-SVX)/2)&$000F)*16)+(((100-SVY)/2)&$000F)
     005C             (            SVECT):00002         SVX     SET     92
     0064             (            SVECT):00003         SVY     SET     100
                      (           D3.ASM):00113                 SVECT   84,110
DDD6 C5               (            SVECT):00001                 FCB     ((((84-SVX)/2)&$000F)*16)+(((110-SVY)/2)&$000F)
     0054             (            SVECT):00002         SVX     SET     84
     006E             (            SVECT):00003         SVY     SET     110
                      (           D3.ASM):00114                 SVECT   74,106
DDD7 BE               (            SVECT):00001                 FCB     ((((74-SVX)/2)&$000F)*16)+(((106-SVY)/2)&$000F)
     004A             (            SVECT):00002         SVX     SET     74
     006A             (            SVECT):00003         SVY     SET     106
                      (           D3.ASM):00115                 SVEND
                      (            SVEND):00001                 SVNEW
DDD8 00               (            SVNEW):00001                 FCB     V$ABS
DDD9 FE               (            SVEND):00002                 FCB     V$END
                      (           D3.ASM):00116         ;
                      (           D3.ASM):00117         ; End of Stone-Giant vector list
                      (           D3.ASM):00118         ;
                      (           D3.ASM):00119         ; * * * * * * * * *
                      (           D3.ASM):00120         
                      (           D3.ASM):00121         
                      (           D3.ASM):00122         
                      (           D3.ASM):00123         ;
                      (           D3.ASM):00124         ; Balrog vector list
                      (           D3.ASM):00125         ;
                      (           D3.ASM):00126         ; Outside legs, wings, underside of arms,
                      (           D3.ASM):00127         ;    and bottom "V" of torso
                      (           D3.ASM):00128         ;
DDDA 507C             (           D3.ASM):00129         BALROG  FCB     80,124          ;top of right leg at body
DDDC 5E72             (           D3.ASM):00130                 FCB     94,114          ;right knee
DDDE 6E78             (           D3.ASM):00131                 FCB     110,120         ;right ankle
DDE0 8470             (           D3.ASM):00132                 FCB     132,112         ;right toe
DDE2 684E             (           D3.ASM):00133                 FCB     104,78          ;right wing
DDE4 8430             (           D3.ASM):00134                 FCB     132,48
DDE6 4448             (           D3.ASM):00135                 FCB     68,72
DDE8 5420             (           D3.ASM):00136                 FCB     84,32
DDEA 1658             (           D3.ASM):00137                 FCB     22,88           ;bottom tip of right hand
DDEC 3472             (           D3.ASM):00138                 FCB     52,114          ;right armpit
DDEE 5C80             (           D3.ASM):00139                 FCB     92,128          ;crotch
DDF0 348E             (           D3.ASM):00140                 FCB     52,142          ;left armpit
DDF2 16A8             (           D3.ASM):00141                 FCB     22,168          ;bottom tip of left hand
DDF4 58E0             (           D3.ASM):00142                 FCB     88,224          ;left wing
DDF6 44B8             (           D3.ASM):00143                 FCB     68,184
DDF8 84D0             (           D3.ASM):00144                 FCB     132,208
DDFA 70B2             (           D3.ASM):00145                 FCB     112,178
DDFC 8490             (           D3.ASM):00146                 FCB     132,144         ;left toe
DDFE 6E88             (           D3.ASM):00147                 FCB     110,136
DE00 5E8E             (           D3.ASM):00148                 FCB     94,142
DE02 5084             (           D3.ASM):00149                 FCB     80,132          ;top of left leg at body
DE04 FF               (           D3.ASM):00150                 FCB     V$NEW
                      (           D3.ASM):00151         ;
                      (           D3.ASM):00152         ; Inside of legs
                      (           D3.ASM):00153         ;
                      (           D3.ASM):00154                 SVORG   132,112
     0084             (            SVORG):00001         SVX     SET     132
     0070             (            SVORG):00002         SVY     SET     112
DE05 8470FC           (            SVORG):00003                 FCB     132,112,V$REL
                      (           D3.ASM):00155                 SVECT   124,122
DE08 C5               (            SVECT):00001                 FCB     ((((124-SVX)/2)&$000F)*16)+(((122-SVY)/2)&$000F)
     007C             (            SVECT):00002         SVX     SET     124
     007A             (            SVECT):00003         SVY     SET     122
                      (           D3.ASM):00156                 SVECT   110,126
DE09 92               (            SVECT):00001                 FCB     ((((110-SVX)/2)&$000F)*16)+(((126-SVY)/2)&$000F)
     006E             (            SVECT):00002         SVX     SET     110
     007E             (            SVECT):00003         SVY     SET     126
                      (           D3.ASM):00157                 SVECT   100,122
DE0A BE               (            SVECT):00001                 FCB     ((((100-SVX)/2)&$000F)*16)+(((122-SVY)/2)&$000F)
     0064             (            SVECT):00002         SVX     SET     100
     007A             (            SVECT):00003         SVY     SET     122
                      (           D3.ASM):00158                 SVECT   92,128
DE0B C3               (            SVECT):00001                 FCB     ((((92-SVX)/2)&$000F)*16)+(((128-SVY)/2)&$000F)
     005C             (            SVECT):00002         SVX     SET     92
     0080             (            SVECT):00003         SVY     SET     128
                      (           D3.ASM):00159                 SVECT   100,134
DE0C 43               (            SVECT):00001                 FCB     ((((100-SVX)/2)&$000F)*16)+(((134-SVY)/2)&$000F)
     0064             (            SVECT):00002         SVX     SET     100
     0086             (            SVECT):00003         SVY     SET     134
                      (           D3.ASM):00160                 SVECT   110,130
DE0D 5E               (            SVECT):00001                 FCB     ((((110-SVX)/2)&$000F)*16)+(((130-SVY)/2)&$000F)
     006E             (            SVECT):00002         SVX     SET     110
     0082             (            SVECT):00003         SVY     SET     130
                      (           D3.ASM):00161                 SVECT   124,134
DE0E 72               (            SVECT):00001                 FCB     ((((124-SVX)/2)&$000F)*16)+(((134-SVY)/2)&$000F)
     007C             (            SVECT):00002         SVX     SET     124
     0086             (            SVECT):00003         SVY     SET     134
                      (           D3.ASM):00162                 SVECT   132,144
DE0F 45               (            SVECT):00001                 FCB     ((((132-SVX)/2)&$000F)*16)+(((144-SVY)/2)&$000F)
     0084             (            SVECT):00002         SVX     SET     132
     0090             (            SVECT):00003         SVY     SET     144
                      (           D3.ASM):00163                 SVNEW
DE10 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D3.ASM):00164         ;
                      (           D3.ASM):00165         ; Tail
                      (           D3.ASM):00166         ;
                      (           D3.ASM):00167                 SVORG   82,122
     0052             (            SVORG):00001         SVX     SET     82
     007A             (            SVORG):00002         SVY     SET     122
DE11 527AFC           (            SVORG):00003                 FCB     82,122,V$REL
                      (           D3.ASM):00168                 SVECT   96,106
DE14 78               (            SVECT):00001                 FCB     ((((96-SVX)/2)&$000F)*16)+(((106-SVY)/2)&$000F)
     0060             (            SVECT):00002         SVX     SET     96
     006A             (            SVECT):00003         SVY     SET     106
                      (           D3.ASM):00169                 SVECT   92,92
DE15 E9               (            SVECT):00001                 FCB     ((((92-SVX)/2)&$000F)*16)+(((92-SVY)/2)&$000F)
     005C             (            SVECT):00002         SVX     SET     92
     005C             (            SVECT):00003         SVY     SET     92
                      (           D3.ASM):00170                 SVECT   76,86
DE16 8D               (            SVECT):00001                 FCB     ((((76-SVX)/2)&$000F)*16)+(((86-SVY)/2)&$000F)
     004C             (            SVECT):00002         SVX     SET     76
     0056             (            SVECT):00003         SVY     SET     86
                      (           D3.ASM):00171                 SVECT   72,78
DE17 EC               (            SVECT):00001                 FCB     ((((72-SVX)/2)&$000F)*16)+(((78-SVY)/2)&$000F)
     0048             (            SVECT):00002         SVX     SET     72
     004E             (            SVECT):00003         SVY     SET     78
                      (           D3.ASM):00172                 SVECT   78,84
DE18 33               (            SVECT):00001                 FCB     ((((78-SVX)/2)&$000F)*16)+(((84-SVY)/2)&$000F)
     004E             (            SVECT):00002         SVX     SET     78
     0054             (            SVECT):00003         SVY     SET     84
                      (           D3.ASM):00173                 SVECT   78,76
DE19 0C               (            SVECT):00001                 FCB     ((((78-SVX)/2)&$000F)*16)+(((76-SVY)/2)&$000F)
     004E             (            SVECT):00002         SVX     SET     78
     004C             (            SVECT):00003         SVY     SET     76
                      (           D3.ASM):00174                 SVECT   82,84
DE1A 24               (            SVECT):00001                 FCB     ((((82-SVX)/2)&$000F)*16)+(((84-SVY)/2)&$000F)
     0052             (            SVECT):00002         SVX     SET     82
     0054             (            SVECT):00003         SVY     SET     84
                      (           D3.ASM):00175                 SVECT   96,88
DE1B 72               (            SVECT):00001                 FCB     ((((96-SVX)/2)&$000F)*16)+(((88-SVY)/2)&$000F)
     0060             (            SVECT):00002         SVX     SET     96
     0058             (            SVECT):00003         SVY     SET     88
                      (           D3.ASM):00176                 SVECT   104,102
DE1C 47               (            SVECT):00001                 FCB     ((((104-SVX)/2)&$000F)*16)+(((102-SVY)/2)&$000F)
     0068             (            SVECT):00002         SVX     SET     104
     0066             (            SVECT):00003         SVY     SET     102
                      (           D3.ASM):00177                 SVECT   100,116
DE1D E7               (            SVECT):00001                 FCB     ((((100-SVX)/2)&$000F)*16)+(((116-SVY)/2)&$000F)
     0064             (            SVECT):00002         SVX     SET     100
     0074             (            SVECT):00003         SVY     SET     116
                      (           D3.ASM):00178         
                      (           D3.ASM):00179         
                      (           D3.ASM):00180         
                      (           D3.ASM):00181                 SVNEW
DE1E 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D3.ASM):00182         ;
                      (           D3.ASM):00183         ; Arms and head
                      (           D3.ASM):00184         ;
                      (           D3.ASM):00185                 SVORG   22,168
     0016             (            SVORG):00001         SVX     SET     22
     00A8             (            SVORG):00002         SVY     SET     168
DE1F 16A8FC           (            SVORG):00003                 FCB     22,168,V$REL
                      (           D3.ASM):00186                 SVECT   26,162
DE22 2D               (            SVECT):00001                 FCB     ((((26-SVX)/2)&$000F)*16)+(((162-SVY)/2)&$000F)
     001A             (            SVECT):00002         SVX     SET     26
     00A2             (            SVECT):00003         SVY     SET     162
                      (           D3.ASM):00187                 SVECT   18,166
DE23 C2               (            SVECT):00001                 FCB     ((((18-SVX)/2)&$000F)*16)+(((166-SVY)/2)&$000F)
     0012             (            SVECT):00002         SVX     SET     18
     00A6             (            SVECT):00003         SVY     SET     166
                      (           D3.ASM):00188                 SVECT   24,160
DE24 3D               (            SVECT):00001                 FCB     ((((24-SVX)/2)&$000F)*16)+(((160-SVY)/2)&$000F)
     0018             (            SVECT):00002         SVX     SET     24
     00A0             (            SVECT):00003         SVY     SET     160
                      (           D3.ASM):00189                 SVECT   30,160
DE25 30               (            SVECT):00001                 FCB     ((((30-SVX)/2)&$000F)*16)+(((160-SVY)/2)&$000F)
     001E             (            SVECT):00002         SVX     SET     30
     00A0             (            SVECT):00003         SVY     SET     160
                      (           D3.ASM):00190                 SVECT   38,150
DE26 4B               (            SVECT):00001                 FCB     ((((38-SVX)/2)&$000F)*16)+(((150-SVY)/2)&$000F)
     0026             (            SVECT):00002         SVX     SET     38
     0096             (            SVECT):00003         SVY     SET     150
                      (           D3.ASM):00191                 SVECT   46,140
DE27 4B               (            SVECT):00001                 FCB     ((((46-SVX)/2)&$000F)*16)+(((140-SVY)/2)&$000F)
     002E             (            SVECT):00002         SVX     SET     46
     008C             (            SVECT):00003         SVY     SET     140
                      (           D3.ASM):00192                 SVECT   42,134
DE28 ED               (            SVECT):00001                 FCB     ((((42-SVX)/2)&$000F)*16)+(((134-SVY)/2)&$000F)
     002A             (            SVECT):00002         SVX     SET     42
     0086             (            SVECT):00003         SVY     SET     134
                      (           D3.ASM):00193                 SVECT   32,138
DE29 B2               (            SVECT):00001                 FCB     ((((32-SVX)/2)&$000F)*16)+(((138-SVY)/2)&$000F)
     0020             (            SVECT):00002         SVX     SET     32
     008A             (            SVECT):00003         SVY     SET     138
                      (           D3.ASM):00194                 SVECT   18,132
DE2A 9D               (            SVECT):00001                 FCB     ((((18-SVX)/2)&$000F)*16)+(((132-SVY)/2)&$000F)
     0012             (            SVECT):00002         SVX     SET     18
     0084             (            SVECT):00003         SVY     SET     132
                      (           D3.ASM):00195                 SVECT   32,134
DE2B 71               (            SVECT):00001                 FCB     ((((32-SVX)/2)&$000F)*16)+(((134-SVY)/2)&$000F)
     0020             (            SVECT):00002         SVX     SET     32
     0086             (            SVECT):00003         SVY     SET     134
                      (           D3.ASM):00196                 SVECT   38,128
DE2C 3D               (            SVECT):00001                 FCB     ((((38-SVX)/2)&$000F)*16)+(((128-SVY)/2)&$000F)
     0026             (            SVECT):00002         SVX     SET     38
     0080             (            SVECT):00003         SVY     SET     128
                      (           D3.ASM):00197                 SVECT   32,122
DE2D DD               (            SVECT):00001                 FCB     ((((32-SVX)/2)&$000F)*16)+(((122-SVY)/2)&$000F)
     0020             (            SVECT):00002         SVX     SET     32
     007A             (            SVECT):00003         SVY     SET     122
                      (           D3.ASM):00198                 SVECT   18,124
DE2E 91               (            SVECT):00001                 FCB     ((((18-SVX)/2)&$000F)*16)+(((124-SVY)/2)&$000F)
     0012             (            SVECT):00002         SVX     SET     18
     007C             (            SVECT):00003         SVY     SET     124
                      (           D3.ASM):00199                 SVECT   32,118
DE2F 7D               (            SVECT):00001                 FCB     ((((32-SVX)/2)&$000F)*16)+(((118-SVY)/2)&$000F)
     0020             (            SVECT):00002         SVX     SET     32
     0076             (            SVECT):00003         SVY     SET     118
                      (           D3.ASM):00200                 SVECT   42,122
DE30 52               (            SVECT):00001                 FCB     ((((42-SVX)/2)&$000F)*16)+(((122-SVY)/2)&$000F)
     002A             (            SVECT):00002         SVX     SET     42
     007A             (            SVECT):00003         SVY     SET     122
                      (           D3.ASM):00201                 SVECT   54,128
DE31 63               (            SVECT):00001                 FCB     ((((54-SVX)/2)&$000F)*16)+(((128-SVY)/2)&$000F)
     0036             (            SVECT):00002         SVX     SET     54
     0080             (            SVECT):00003         SVY     SET     128
                      (           D3.ASM):00202                 SVECT   42,134
DE32 A3               (            SVECT):00001                 FCB     ((((42-SVX)/2)&$000F)*16)+(((134-SVY)/2)&$000F)
     002A             (            SVECT):00002         SVX     SET     42
     0086             (            SVECT):00003         SVY     SET     134
                      (           D3.ASM):00203                 SVECT   46,128
DE33 2D               (            SVECT):00001                 FCB     ((((46-SVX)/2)&$000F)*16)+(((128-SVY)/2)&$000F)
     002E             (            SVECT):00002         SVX     SET     46
     0080             (            SVECT):00003         SVY     SET     128
                      (           D3.ASM):00204                 SVECT   42,122
DE34 ED               (            SVECT):00001                 FCB     ((((42-SVX)/2)&$000F)*16)+(((122-SVY)/2)&$000F)
     002A             (            SVECT):00002         SVX     SET     42
     007A             (            SVECT):00003         SVY     SET     122
                      (           D3.ASM):00205                 SVECT   46,116
DE35 2D               (            SVECT):00001                 FCB     ((((46-SVX)/2)&$000F)*16)+(((116-SVY)/2)&$000F)
     002E             (            SVECT):00002         SVX     SET     46
     0074             (            SVECT):00003         SVY     SET     116
                      (           D3.ASM):00206                 SVECT   38,106
DE36 CB               (            SVECT):00001                 FCB     ((((38-SVX)/2)&$000F)*16)+(((106-SVY)/2)&$000F)
     0026             (            SVECT):00002         SVX     SET     38
     006A             (            SVECT):00003         SVY     SET     106
                      (           D3.ASM):00207                 SVECT   30,96
DE37 CB               (            SVECT):00001                 FCB     ((((30-SVX)/2)&$000F)*16)+(((96-SVY)/2)&$000F)
     001E             (            SVECT):00002         SVX     SET     30
     0060             (            SVECT):00003         SVY     SET     96
                      (           D3.ASM):00208                 SVECT   24,96
DE38 D0               (            SVECT):00001                 FCB     ((((24-SVX)/2)&$000F)*16)+(((96-SVY)/2)&$000F)
     0018             (            SVECT):00002         SVX     SET     24
     0060             (            SVECT):00003         SVY     SET     96
                      (           D3.ASM):00209                 SVECT   18,90
DE39 DD               (            SVECT):00001                 FCB     ((((18-SVX)/2)&$000F)*16)+(((90-SVY)/2)&$000F)
     0012             (            SVECT):00002         SVX     SET     18
     005A             (            SVECT):00003         SVY     SET     90
                      (           D3.ASM):00210                 SVECT   26,94
DE3A 42               (            SVECT):00001                 FCB     ((((26-SVX)/2)&$000F)*16)+(((94-SVY)/2)&$000F)
     001A             (            SVECT):00002         SVX     SET     26
     005E             (            SVECT):00003         SVY     SET     94
                      (           D3.ASM):00211                 SVECT   22,88
DE3B ED               (            SVECT):00001                 FCB     ((((22-SVX)/2)&$000F)*16)+(((88-SVY)/2)&$000F)
     0016             (            SVECT):00002         SVX     SET     22
     0058             (            SVECT):00003         SVY     SET     88
                      (           D3.ASM):00212                 SVEND
                      (            SVEND):00001                 SVNEW
DE3C 00               (            SVNEW):00001                 FCB     V$ABS
DE3D FE               (            SVEND):00002                 FCB     V$END
                      (           D3.ASM):00213         ;
                      (           D3.ASM):00214         ; End of Balrog vector list
                      (           D3.ASM):00215         ;
                      (           D3.ASM):00216         ; * * * * * * * * *
                      (           D3.ASM):00217         
                      (           D3.ASM):00218         
                      (           D3.ASM):00219         
                      (           D3.ASM):00220         ;
                      (           D3.ASM):00221         ; Wraith vector list
                      (           D3.ASM):00222         ;
                      (           D3.ASM):00223         ; Eyebrows
                      (           D3.ASM):00224         ;
DE3E 3E44             (           D3.ASM):00225         WRAITH  FCB     62,68
DE40 4458             (           D3.ASM):00226                 FCB     68,88
DE42 3864             (           D3.ASM):00227                 FCB     56,100
DE44 FF               (           D3.ASM):00228                 FCB     V$NEW
                      (           D3.ASM):00229         ;
                      (           D3.ASM):00230         ;  Eyes
                      (           D3.ASM):00231         ;
DE45 4A5A             (           D3.ASM):00232                 FCB     74,90           ;bridge of nose
                      (           D3.ASM):00233                 SVORG   70,74
     0046             (            SVORG):00001         SVX     SET     70
     004A             (            SVORG):00002         SVY     SET     74
DE47 464AFC           (            SVORG):00003                 FCB     70,74,V$REL
                      (           D3.ASM):00234                 SVECT   76,80
DE4A 33               (            SVECT):00001                 FCB     ((((76-SVX)/2)&$000F)*16)+(((80-SVY)/2)&$000F)
     004C             (            SVECT):00002         SVX     SET     76
     0050             (            SVECT):00003         SVY     SET     80
                      (           D3.ASM):00235                 SVECT   74,90
DE4B F5               (            SVECT):00001                 FCB     ((((74-SVX)/2)&$000F)*16)+(((90-SVY)/2)&$000F)
     004A             (            SVECT):00002         SVX     SET     74
     005A             (            SVECT):00003         SVY     SET     90
                      (           D3.ASM):00236                 SVECT   72,100
DE4C F5               (            SVECT):00001                 FCB     ((((72-SVX)/2)&$000F)*16)+(((100-SVY)/2)&$000F)
     0048             (            SVECT):00002         SVX     SET     72
     0064             (            SVECT):00003         SVY     SET     100
                      (           D3.ASM):00237                 SVECT   64,102
DE4D C1               (            SVECT):00001                 FCB     ((((64-SVX)/2)&$000F)*16)+(((102-SVY)/2)&$000F)
     0040             (            SVECT):00002         SVX     SET     64
     0066             (            SVECT):00003         SVY     SET     102
                      (           D3.ASM):00238                 SVECT   74,90
DE4E 5A               (            SVECT):00001                 FCB     ((((74-SVX)/2)&$000F)*16)+(((90-SVY)/2)&$000F)
     004A             (            SVECT):00002         SVX     SET     74
     005A             (            SVECT):00003         SVY     SET     90
                      (           D3.ASM):00239                 SVECT   86,94
DE4F 62               (            SVECT):00001                 FCB     ((((86-SVX)/2)&$000F)*16)+(((94-SVY)/2)&$000F)
     0056             (            SVECT):00002         SVX     SET     86
     005E             (            SVECT):00003         SVY     SET     94
                      (           D3.ASM):00240                 SVECT   86,90
DE50 0E               (            SVECT):00001                 FCB     ((((86-SVX)/2)&$000F)*16)+(((90-SVY)/2)&$000F)
     0056             (            SVECT):00002         SVX     SET     86
     005A             (            SVECT):00003         SVY     SET     90
                      (           D3.ASM):00241                 SVNEW
DE51 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D3.ASM):00242         ;
                      (           D3.ASM):00243         ; Mouth
                      (           D3.ASM):00244         ;
                      (           D3.ASM):00245                 SVORG   100,80
     0064             (            SVORG):00001         SVX     SET     100
     0050             (            SVORG):00002         SVY     SET     80
DE52 6450FC           (            SVORG):00003                 FCB     100,80,V$REL
                      (           D3.ASM):00246                 SVECT   90,86
DE55 B3               (            SVECT):00001                 FCB     ((((90-SVX)/2)&$000F)*16)+(((86-SVY)/2)&$000F)
     005A             (            SVECT):00002         SVX     SET     90
     0056             (            SVECT):00003         SVY     SET     86
                      (           D3.ASM):00247                 SVECT   92,100
DE56 17               (            SVECT):00001                 FCB     ((((92-SVX)/2)&$000F)*16)+(((100-SVY)/2)&$000F)
     005C             (            SVECT):00002         SVX     SET     92
     0064             (            SVECT):00003         SVY     SET     100
                      (           D3.ASM):00248                 SVECT   98,108
DE57 34               (            SVECT):00001                 FCB     ((((98-SVX)/2)&$000F)*16)+(((108-SVY)/2)&$000F)
     0062             (            SVECT):00002         SVX     SET     98
     006C             (            SVECT):00003         SVY     SET     108
                      (           D3.ASM):00249                 SVECT   94,98
DE58 EB               (            SVECT):00001                 FCB     ((((94-SVX)/2)&$000F)*16)+(((98-SVY)/2)&$000F)
     005E             (            SVECT):00002         SVX     SET     94
     0062             (            SVECT):00003         SVY     SET     98
                      (           D3.ASM):00250                 SVECT   94,86
DE59 0A               (            SVECT):00001                 FCB     ((((94-SVX)/2)&$000F)*16)+(((86-SVY)/2)&$000F)
     005E             (            SVECT):00002         SVX     SET     94
     0056             (            SVECT):00003         SVY     SET     86
                      (           D3.ASM):00251                 SVECT   100,80
DE5A 3D               (            SVECT):00001                 FCB     ((((100-SVX)/2)&$000F)*16)+(((80-SVY)/2)&$000F)
     0064             (            SVECT):00002         SVX     SET     100
     0050             (            SVECT):00003         SVY     SET     80
                      (           D3.ASM):00252                 SVEND
                      (            SVEND):00001                 SVNEW
DE5B 00               (            SVNEW):00001                 FCB     V$ABS
DE5C FE               (            SVEND):00002                 FCB     V$END
                      (           D3.ASM):00253         ;
                      (           D3.ASM):00254         ; End of Wraith vector list
                      (           D3.ASM):00255         ;
                      (           D3.ASM):00256         ; * * * * * * * * *
                      (           D3.ASM):00257         
                      (           D3.ASM):00258         
                      (           D3.ASM):00259         
                      (           D3.ASM):00260         ;
                      (           D3.ASM):00261         ; Spider vector list
                      (           D3.ASM):00262         ;
                      (           D3.ASM):00263         ; Outside legs and body
                      (           D3.ASM):00264         ;
DE5D                  (           D3.ASM):00265         SPIDER  SVORG   124,160
     007C             (            SVORG):00001         SVX     SET     124
     00A0             (            SVORG):00002         SVY     SET     160
DE5D 7CA0FC           (            SVORG):00003                 FCB     124,160,V$REL
                      (           D3.ASM):00266                 SVECT   116,164
DE60 C2               (            SVECT):00001                 FCB     ((((116-SVX)/2)&$000F)*16)+(((164-SVY)/2)&$000F)
     0074             (            SVECT):00002         SVX     SET     116
     00A4             (            SVECT):00003         SVY     SET     164
                      (           D3.ASM):00267                 SVECT   120,168
DE61 22               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((168-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     00A8             (            SVECT):00003         SVY     SET     168
                      (           D3.ASM):00268                 SVECT   116,176
DE62 E4               (            SVECT):00001                 FCB     ((((116-SVX)/2)&$000F)*16)+(((176-SVY)/2)&$000F)
     0074             (            SVECT):00002         SVX     SET     116
     00B0             (            SVECT):00003         SVY     SET     176
                      (           D3.ASM):00269                 SVECT   120,184
DE63 24               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((184-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     00B8             (            SVECT):00003         SVY     SET     184
                      (           D3.ASM):00270                 SVECT   124,176
DE64 2C               (            SVECT):00001                 FCB     ((((124-SVX)/2)&$000F)*16)+(((176-SVY)/2)&$000F)
     007C             (            SVECT):00002         SVX     SET     124
     00B0             (            SVECT):00003         SVY     SET     176
                      (           D3.ASM):00271                 SVECT   120,168
DE65 EC               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((168-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     00A8             (            SVECT):00003         SVY     SET     168
                      (           D3.ASM):00272                 SVECT   120,176
DE66 04               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((176-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     00B0             (            SVECT):00003         SVY     SET     176
                      (           D3.ASM):00273                 SVECT   120,184
DE67 04               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((184-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     00B8             (            SVECT):00003         SVY     SET     184
                      (           D3.ASM):00274                 SVECT   116,188
DE68 E2               (            SVECT):00001                 FCB     ((((116-SVX)/2)&$000F)*16)+(((188-SVY)/2)&$000F)
     0074             (            SVECT):00002         SVX     SET     116
     00BC             (            SVECT):00003         SVY     SET     188
                      (           D3.ASM):00275                 SVECT   124,192
DE69 42               (            SVECT):00001                 FCB     ((((124-SVX)/2)&$000F)*16)+(((192-SVY)/2)&$000F)
     007C             (            SVECT):00002         SVX     SET     124
     00C0             (            SVECT):00003         SVY     SET     192
                      (           D3.ASM):00276                 SVNEW
DE6A 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D3.ASM):00277         ;
                      (           D3.ASM):00278         ; Inner legs and mouth
                      (           D3.ASM):00279         ;
                      (           D3.ASM):00280                 SVORG   124,168
     007C             (            SVORG):00001         SVX     SET     124
     00A8             (            SVORG):00002         SVY     SET     168
DE6B 7CA8FC           (            SVORG):00003                 FCB     124,168,V$REL
                      (           D3.ASM):00281                 SVECT   116,170
DE6E C1               (            SVECT):00001                 FCB     ((((116-SVX)/2)&$000F)*16)+(((170-SVY)/2)&$000F)
     0074             (            SVECT):00002         SVX     SET     116
     00AA             (            SVECT):00003         SVY     SET     170
                      (           D3.ASM):00282                 SVECT   120,172
DE6F 21               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((172-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     00AC             (            SVECT):00003         SVY     SET     172
                      (           D3.ASM):00283                 SVECT   122,176
DE70 12               (            SVECT):00001                 FCB     ((((122-SVX)/2)&$000F)*16)+(((176-SVY)/2)&$000F)
     007A             (            SVECT):00002         SVX     SET     122
     00B0             (            SVECT):00003         SVY     SET     176
                      (           D3.ASM):00284                 SVECT   120,180
DE71 F2               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((180-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     00B4             (            SVECT):00003         SVY     SET     180
                      (           D3.ASM):00285                 SVECT   116,182
DE72 E1               (            SVECT):00001                 FCB     ((((116-SVX)/2)&$000F)*16)+(((182-SVY)/2)&$000F)
     0074             (            SVECT):00002         SVX     SET     116
     00B6             (            SVECT):00003         SVY     SET     182
                      (           D3.ASM):00286                 SVECT   124,184
DE73 41               (            SVECT):00001                 FCB     ((((124-SVX)/2)&$000F)*16)+(((184-SVY)/2)&$000F)
     007C             (            SVECT):00002         SVX     SET     124
     00B8             (            SVECT):00003         SVY     SET     184
                      (           D3.ASM):00287                 SVEND
                      (            SVEND):00001                 SVNEW
DE74 00               (            SVNEW):00001                 FCB     V$ABS
DE75 FE               (            SVEND):00002                 FCB     V$END
                      (           D3.ASM):00288         ;
                      (           D3.ASM):00289         ; End of Spider vector list
                      (           D3.ASM):00290         ;
                      (           D3.ASM):00291         ; * * * * * * * * *
                      (           D3.ASM):00292         
                      (           D3.ASM):00293         
                      (           D3.ASM):00294         
                      (           D3.ASM):00295         ;
                      (           D3.ASM):00296         ; Scorpion vector list
                      (           D3.ASM):00297         ;
                      (           D3.ASM):00298         ; Tail, body, and back leg
                      (           D3.ASM):00299         ;
DE76                  (           D3.ASM):00300         SCORP   SVORG   112,74
     0070             (            SVORG):00001         SVX     SET     112
     004A             (            SVORG):00002         SVY     SET     74
DE76 704AFC           (            SVORG):00003                 FCB     112,74,V$REL
                      (           D3.ASM):00301                 SVECT   108,74
DE79 E0               (            SVECT):00001                 FCB     ((((108-SVX)/2)&$000F)*16)+(((74-SVY)/2)&$000F)
     006C             (            SVECT):00002         SVX     SET     108
     004A             (            SVECT):00003         SVY     SET     74
                      (           D3.ASM):00302                 SVECT   104,70
DE7A EE               (            SVECT):00001                 FCB     ((((104-SVX)/2)&$000F)*16)+(((70-SVY)/2)&$000F)
     0068             (            SVECT):00002         SVX     SET     104
     0046             (            SVECT):00003         SVY     SET     70
                      (           D3.ASM):00303                 SVECT   108,62
DE7B 2C               (            SVECT):00001                 FCB     ((((108-SVX)/2)&$000F)*16)+(((62-SVY)/2)&$000F)
     006C             (            SVECT):00002         SVX     SET     108
     003E             (            SVECT):00003         SVY     SET     62
                      (           D3.ASM):00304                 SVECT   116,66
DE7C 42               (            SVECT):00001                 FCB     ((((116-SVX)/2)&$000F)*16)+(((66-SVY)/2)&$000F)
     0074             (            SVECT):00002         SVX     SET     116
     0042             (            SVECT):00003         SVY     SET     66
                      (           D3.ASM):00305                 SVECT   118,74
DE7D 14               (            SVECT):00001                 FCB     ((((118-SVX)/2)&$000F)*16)+(((74-SVY)/2)&$000F)
     0076             (            SVECT):00002         SVX     SET     118
     004A             (            SVECT):00003         SVY     SET     74
                      (           D3.ASM):00306                 SVECT   120,82
DE7E 14               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((82-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     0052             (            SVECT):00003         SVY     SET     82
                      (           D3.ASM):00307                 SVECT   124,82
DE7F 20               (            SVECT):00001                 FCB     ((((124-SVX)/2)&$000F)*16)+(((82-SVY)/2)&$000F)
     007C             (            SVECT):00002         SVX     SET     124
     0052             (            SVECT):00003         SVY     SET     82
                      (           D3.ASM):00308                 SVECT   124,74
DE80 0C               (            SVECT):00001                 FCB     ((((124-SVX)/2)&$000F)*16)+(((74-SVY)/2)&$000F)
     007C             (            SVECT):00002         SVX     SET     124
     004A             (            SVECT):00003         SVY     SET     74
                      (           D3.ASM):00309                 SVECT   116,66
DE81 CC               (            SVECT):00001                 FCB     ((((116-SVX)/2)&$000F)*16)+(((66-SVY)/2)&$000F)
     0074             (            SVECT):00002         SVX     SET     116
     0042             (            SVECT):00003         SVY     SET     66
                      (           D3.ASM):00310                 SVECT   120,70
DE82 22               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((70-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     0046             (            SVECT):00003         SVY     SET     70
                      (           D3.ASM):00311                 SVECT   120,62
DE83 0C               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((62-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     003E             (            SVECT):00003         SVY     SET     62
                      (           D3.ASM):00312                 SVECT   124,66
DE84 22               (            SVECT):00001                 FCB     ((((124-SVX)/2)&$000F)*16)+(((66-SVY)/2)&$000F)
     007C             (            SVECT):00002         SVX     SET     124
     0042             (            SVECT):00003         SVY     SET     66
                      (           D3.ASM):00313                 SVNEW
DE85 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D3.ASM):00314         ;
                      (           D3.ASM):00315         ; Front legs
                      (           D3.ASM):00316         ;
                      (           D3.ASM):00317                 SVORG   124,90
     007C             (            SVORG):00001         SVX     SET     124
     005A             (            SVORG):00002         SVY     SET     90
DE86 7C5AFC           (            SVORG):00003                 FCB     124,90,V$REL
                      (           D3.ASM):00318                 SVECT   120,90
DE89 E0               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((90-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     005A             (            SVECT):00003         SVY     SET     90
                      (           D3.ASM):00319                 SVECT   120,82
DE8A 0C               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((82-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     0052             (            SVECT):00003         SVY     SET     82
                      (           D3.ASM):00320                 SVECT   124,74
DE8B 2C               (            SVECT):00001                 FCB     ((((124-SVX)/2)&$000F)*16)+(((74-SVY)/2)&$000F)
     007C             (            SVECT):00002         SVX     SET     124
     004A             (            SVECT):00003         SVY     SET     74
                      (           D3.ASM):00321                 SVECT   128,74
DE8C 20               (            SVECT):00001                 FCB     ((((128-SVX)/2)&$000F)*16)+(((74-SVY)/2)&$000F)
     0080             (            SVECT):00002         SVX     SET     128
     004A             (            SVECT):00003         SVY     SET     74
                      (           D3.ASM):00322                 SVECT   128,82
DE8D 04               (            SVECT):00001                 FCB     ((((128-SVX)/2)&$000F)*16)+(((82-SVY)/2)&$000F)
     0080             (            SVECT):00002         SVX     SET     128
     0052             (            SVECT):00003         SVY     SET     82
                      (           D3.ASM):00323                 SVEND
                      (            SVEND):00001                 SVNEW
DE8E 00               (            SVNEW):00001                 FCB     V$ABS
DE8F FE               (            SVEND):00002                 FCB     V$END
                      (           D3.ASM):00324         ;
                      (           D3.ASM):00325         ; End of Scorpion vector list
                      (           D3.ASM):00326         ;
                      (           D3.ASM):00327         ; * * * * * * * * *
                      (           D3.ASM):00328         ;
                      (           D3.ASM):00329         ; Blob vector list
                      (           D3.ASM):00330         ;
DE90                  (           D3.ASM):00331         BLOB    SVORG   82,130
     0052             (            SVORG):00001         SVX     SET     82
     0082             (            SVORG):00002         SVY     SET     130
DE90 5282FC           (            SVORG):00003                 FCB     82,130,V$REL
                      (           D3.ASM):00332                 SVECT   86,114
DE93 28               (            SVECT):00001                 FCB     ((((86-SVX)/2)&$000F)*16)+(((114-SVY)/2)&$000F)
     0056             (            SVECT):00002         SVX     SET     86
     0072             (            SVECT):00003         SVY     SET     114
                      (           D3.ASM):00333                 SVECT   100,108
DE94 7D               (            SVECT):00001                 FCB     ((((100-SVX)/2)&$000F)*16)+(((108-SVY)/2)&$000F)
     0064             (            SVECT):00002         SVX     SET     100
     006C             (            SVECT):00003         SVY     SET     108
                      (           D3.ASM):00334                 SVECT   110,106
DE95 5F               (            SVECT):00001                 FCB     ((((110-SVX)/2)&$000F)*16)+(((106-SVY)/2)&$000F)
     006E             (            SVECT):00002         SVX     SET     110
     006A             (            SVECT):00003         SVY     SET     106
                      (           D3.ASM):00335                 SVECT   120,106
DE96 50               (            SVECT):00001                 FCB     ((((120-SVX)/2)&$000F)*16)+(((106-SVY)/2)&$000F)
     0078             (            SVECT):00002         SVX     SET     120
     006A             (            SVECT):00003         SVY     SET     106
                      (           D3.ASM):00336                 SVECT   130,96
DE97 5B               (            SVECT):00001                 FCB     ((((130-SVX)/2)&$000F)*16)+(((96-SVY)/2)&$000F)
     0082             (            SVECT):00002         SVX     SET     130
     0060             (            SVECT):00003         SVY     SET     96
                      (           D3.ASM):00337                 SVECT   128,106
DE98 F5               (            SVECT):00001                 FCB     ((((128-SVX)/2)&$000F)*16)+(((106-SVY)/2)&$000F)
     0080             (            SVECT):00002         SVX     SET     128
     006A             (            SVECT):00003         SVY     SET     106
                      (           D3.ASM):00338                 SVECT   132,104
DE99 2F               (            SVECT):00001                 FCB     ((((132-SVX)/2)&$000F)*16)+(((104-SVY)/2)&$000F)
     0084             (            SVECT):00002         SVX     SET     132
     0068             (            SVECT):00003         SVY     SET     104
                      (           D3.ASM):00339                 SVECT   126,114
DE9A D5               (            SVECT):00001                 FCB     ((((126-SVX)/2)&$000F)*16)+(((114-SVY)/2)&$000F)
     007E             (            SVECT):00002         SVX     SET     126
     0072             (            SVECT):00003         SVY     SET     114
                      (           D3.ASM):00340                 SVECT   128,128
DE9B 17               (            SVECT):00001                 FCB     ((((128-SVX)/2)&$000F)*16)+(((128-SVY)/2)&$000F)
     0080             (            SVECT):00002         SVX     SET     128
     0080             (            SVECT):00003         SVY     SET     128
                      (           D3.ASM):00341                 SVECT   130,142
DE9C 17               (            SVECT):00001                 FCB     ((((130-SVX)/2)&$000F)*16)+(((142-SVY)/2)&$000F)
     0082             (            SVECT):00002         SVX     SET     130
     008E             (            SVECT):00003         SVY     SET     142
                      (           D3.ASM):00342                 SVECT   128,148
DE9D F3               (            SVECT):00001                 FCB     ((((128-SVX)/2)&$000F)*16)+(((148-SVY)/2)&$000F)
     0080             (            SVECT):00002         SVX     SET     128
     0094             (            SVECT):00003         SVY     SET     148
                      (           D3.ASM):00343                 SVECT   132,152
DE9E 22               (            SVECT):00001                 FCB     ((((132-SVX)/2)&$000F)*16)+(((152-SVY)/2)&$000F)
     0084             (            SVECT):00002         SVX     SET     132
     0098             (            SVECT):00003         SVY     SET     152
                      (           D3.ASM):00344                 SVECT   128,154
DE9F E1               (            SVECT):00001                 FCB     ((((128-SVX)/2)&$000F)*16)+(((154-SVY)/2)&$000F)
     0080             (            SVECT):00002         SVX     SET     128
     009A             (            SVECT):00003         SVY     SET     154
                      (           D3.ASM):00345                 SVECT   130,162
DEA0 14               (            SVECT):00001                 FCB     ((((130-SVX)/2)&$000F)*16)+(((162-SVY)/2)&$000F)
     0082             (            SVECT):00002         SVX     SET     130
     00A2             (            SVECT):00003         SVY     SET     162
                      (           D3.ASM):00346                 SVECT   124,156
DEA1 DD               (            SVECT):00001                 FCB     ((((124-SVX)/2)&$000F)*16)+(((156-SVY)/2)&$000F)
     007C             (            SVECT):00002         SVX     SET     124
     009C             (            SVECT):00003         SVY     SET     156
                      (           D3.ASM):00347         
                      (           D3.ASM):00348         
                      (           D3.ASM):00349         
                      (           D3.ASM):00350                 SVECT   108,154
DEA2 8F               (            SVECT):00001                 FCB     ((((108-SVX)/2)&$000F)*16)+(((154-SVY)/2)&$000F)
     006C             (            SVECT):00002         SVX     SET     108
     009A             (            SVECT):00003         SVY     SET     154
                      (           D3.ASM):00351                 SVECT   92,148
DEA3 8D               (            SVECT):00001                 FCB     ((((92-SVX)/2)&$000F)*16)+(((148-SVY)/2)&$000F)
     005C             (            SVECT):00002         SVX     SET     92
     0094             (            SVECT):00003         SVY     SET     148
                      (           D3.ASM):00352                 SVECT   86,138
DEA4 DB               (            SVECT):00001                 FCB     ((((86-SVX)/2)&$000F)*16)+(((138-SVY)/2)&$000F)
     0056             (            SVECT):00002         SVX     SET     86
     008A             (            SVECT):00003         SVY     SET     138
                      (           D3.ASM):00353                 SVECT   82,130
DEA5 EC               (            SVECT):00001                 FCB     ((((82-SVX)/2)&$000F)*16)+(((130-SVY)/2)&$000F)
     0052             (            SVECT):00002         SVX     SET     82
     0082             (            SVECT):00003         SVY     SET     130
                      (           D3.ASM):00354                 SVNEW
DEA6 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D3.ASM):00355         ;
                      (           D3.ASM):00356         ; Eyes
                      (           D3.ASM):00357         ;
                      (           D3.ASM):00358                 SVORG   86,130
     0056             (            SVORG):00001         SVX     SET     86
     0082             (            SVORG):00002         SVY     SET     130
DEA7 5682FC           (            SVORG):00003                 FCB     86,130,V$REL
                      (           D3.ASM):00359                 SVECT   92,136
DEAA 33               (            SVECT):00001                 FCB     ((((92-SVX)/2)&$000F)*16)+(((136-SVY)/2)&$000F)
     005C             (            SVECT):00002         SVX     SET     92
     0088             (            SVECT):00003         SVY     SET     136
                      (           D3.ASM):00360                 SVECT   98,138
DEAB 31               (            SVECT):00001                 FCB     ((((98-SVX)/2)&$000F)*16)+(((138-SVY)/2)&$000F)
     0062             (            SVECT):00002         SVX     SET     98
     008A             (            SVECT):00003         SVY     SET     138
                      (           D3.ASM):00361                 SVECT   100,128
DEAC 1B               (            SVECT):00001                 FCB     ((((100-SVX)/2)&$000F)*16)+(((128-SVY)/2)&$000F)
     0064             (            SVECT):00002         SVX     SET     100
     0080             (            SVECT):00003         SVY     SET     128
                      (           D3.ASM):00362                 SVECT   86,130
DEAD 91               (            SVECT):00001                 FCB     ((((86-SVX)/2)&$000F)*16)+(((130-SVY)/2)&$000F)
     0056             (            SVECT):00002         SVX     SET     86
     0082             (            SVECT):00003         SVY     SET     130
                      (           D3.ASM):00363                 SVECT   92,120
DEAE 3B               (            SVECT):00001                 FCB     ((((92-SVX)/2)&$000F)*16)+(((120-SVY)/2)&$000F)
     005C             (            SVECT):00002         SVX     SET     92
     0078             (            SVECT):00003         SVY     SET     120
                      (           D3.ASM):00364                 SVECT   102,118
DEAF 5F               (            SVECT):00001                 FCB     ((((102-SVX)/2)&$000F)*16)+(((118-SVY)/2)&$000F)
     0066             (            SVECT):00002         SVX     SET     102
     0076             (            SVECT):00003         SVY     SET     118
                      (           D3.ASM):00365                 SVECT   100,128
DEB0 F5               (            SVECT):00001                 FCB     ((((100-SVX)/2)&$000F)*16)+(((128-SVY)/2)&$000F)
     0064             (            SVECT):00002         SVX     SET     100
     0080             (            SVECT):00003         SVY     SET     128
                      (           D3.ASM):00366                 SVNEW
DEB1 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D3.ASM):00367         ;
                      (           D3.ASM):00368         ; Mouth
                      (           D3.ASM):00369         ;
DEB2 6C74             (           D3.ASM):00370                 FCB     108,116
DEB4 7276             (           D3.ASM):00371                 FCB     114,118
DEB6 7890             (           D3.ASM):00372                 FCB     120,144
DEB8 FE               (           D3.ASM):00373                 FCB     V$END
                      (           D3.ASM):00374         ;
                      (           D3.ASM):00375         ; End of Blob vector list
                      (           D3.ASM):00376         ;
                      (           D3.ASM):00377         ; * * * * * * * * *
                      (           D3.ASM):00378         ;;;;;        END
                      (    DAGGORATH.ASM):00135                 INCLUDE D4.ASM           ;Creature Vector List (II)
                      (           D4.ASM):00001         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           D4.ASM):00002         ;  C R E A T U R E   V E C T O R   L I S T S   ( I I )
                      (           D4.ASM):00003         ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      (           D4.ASM):00004         ;
                      (           D4.ASM):00005                 NAM     D4      - Creature Vector Lists (II)
                      (           D4.ASM):00006         ;     LIBRY  CD
                      (           D4.ASM):00007         ;
                      (           D4.ASM):00008         ;        XDEF    KNIGT1,KNIGT2,VIPER
                      (           D4.ASM):00009         ;        XDEF    WIZ0,WIZ1,WIZ2
                      (           D4.ASM):00010         ;        OPT     NOMEX,NOGEN
                      (           D4.ASM):00011         ;        DSCT
                      (           D4.ASM):00012         ;
                      (           D4.ASM):00013         ; Knight Type 1 - shield entry point (orange coding)
                      (           D4.ASM):00014         ;
DEB9                  (           D4.ASM):00015         KNIGT1  SVORG   34,124
     0022             (            SVORG):00001         SVX     SET     34
     007C             (            SVORG):00002         SVY     SET     124
DEB9 227CFC           (            SVORG):00003                 FCB     34,124,V$REL
                      (           D4.ASM):00016                 SVECT   34,132
DEBC 04               (            SVECT):00001                 FCB     ((((34-SVX)/2)&$000F)*16)+(((132-SVY)/2)&$000F)
     0022             (            SVECT):00002         SVX     SET     34
     0084             (            SVECT):00003         SVY     SET     132
                      (           D4.ASM):00017                 SVECT   36,130
DEBD 1F               (            SVECT):00001                 FCB     ((((36-SVX)/2)&$000F)*16)+(((130-SVY)/2)&$000F)
     0024             (            SVECT):00002         SVX     SET     36
     0082             (            SVECT):00003         SVY     SET     130
                      (           D4.ASM):00018                 SVECT   36,126
DEBE 0E               (            SVECT):00001                 FCB     ((((36-SVX)/2)&$000F)*16)+(((126-SVY)/2)&$000F)
     0024             (            SVECT):00002         SVX     SET     36
     007E             (            SVECT):00003         SVY     SET     126
                      (           D4.ASM):00019                 SVECT   34,124
DEBF FF               (            SVECT):00001                 FCB     ((((34-SVX)/2)&$000F)*16)+(((124-SVY)/2)&$000F)
     0022             (            SVECT):00002         SVX     SET     34
     007C             (            SVECT):00003         SVY     SET     124
                      (           D4.ASM):00020                 SVNEW
DEC0 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D4.ASM):00021         ;
DEC1 508E             (           D4.ASM):00022                 FCB     80,142          ;left arm
DEC3 4088             (           D4.ASM):00023                 FCB     64,136
DEC5 2E92             (           D4.ASM):00024                 FCB     46,146
DEC7 409C             (           D4.ASM):00025                 FCB     64,156
DEC9 528C             (           D4.ASM):00026                 FCB     82,140
DECB 4C88             (           D4.ASM):00027                 FCB     76,136
DECD 4092             (           D4.ASM):00028                 FCB     64,146
DECF 3A8C             (           D4.ASM):00029                 FCB     58,140
DED1 FD               (           D4.ASM):00030                 FCB     V$JMP
DED2 DEEA             (           D4.ASM):00031                 FDB     KNIGHT
                      (           D4.ASM):00032         ;
                      (           D4.ASM):00033         ; Knight Type 2 - shield entry point (red coding)
DED4                  (           D4.ASM):00034         KNIGT2  SVORG   30,126
     001E             (            SVORG):00001         SVX     SET     30
     007E             (            SVORG):00002         SVY     SET     126
DED4 1E7EFC           (            SVORG):00003                 FCB     30,126,V$REL
                      (           D4.ASM):00035                 SVECT   40,126
DED7 50               (            SVECT):00001                 FCB     ((((40-SVX)/2)&$000F)*16)+(((126-SVY)/2)&$000F)
     0028             (            SVECT):00002         SVX     SET     40
     007E             (            SVECT):00003         SVY     SET     126
                      (           D4.ASM):00036                 SVECT   40,124
DED8 0F               (            SVECT):00001                 FCB     ((((40-SVX)/2)&$000F)*16)+(((124-SVY)/2)&$000F)
     0028             (            SVECT):00002         SVX     SET     40
     007C             (            SVECT):00003         SVY     SET     124
                      (           D4.ASM):00037                 SVECT   36,124
DED9 E0               (            SVECT):00001                 FCB     ((((36-SVX)/2)&$000F)*16)+(((124-SVY)/2)&$000F)
     0024             (            SVECT):00002         SVX     SET     36
     007C             (            SVECT):00003         SVY     SET     124
                      (           D4.ASM):00038                 SVNEW
DEDA 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D4.ASM):00039         ;
DEDB 2C96             (           D4.ASM):00040                 FCB     44,150
DEDD 34A6             (           D4.ASM):00041                 FCB     52,166
DEDF 4CA4             (           D4.ASM):00042                 FCB     76,164
DEE1 5C96             (           D4.ASM):00043                 FCB     92,150
DEE3 4C88             (           D4.ASM):00044                 FCB     76,136
DEE5 3486             (           D4.ASM):00045                 FCB     52,134
DEE7 2C96             (           D4.ASM):00046                 FCB     44,150
DEE9 FF               (           D4.ASM):00047                 FCB     V$NEW
                      (           D4.ASM):00048         ;
                      (           D4.ASM):00049         ;                               ;falls thru to KNIGHT
                      (           D4.ASM):00050         ;
                      (           D4.ASM):00051         ; * * * * * * * * *
                      (           D4.ASM):00052         
                      (           D4.ASM):00053         
                      (           D4.ASM):00054         ; * * * * * * * * *
                      (           D4.ASM):00055         ;
                      (           D4.ASM):00056         ; Knight's Main Body
                      (           D4.ASM):00057         ;
                      (           D4.ASM):00058         ; Left Leg
                      (           D4.ASM):00059         ;
DEEA 508C             (           D4.ASM):00060         KNIGHT  FCB     80,140          ;outside of left leg
DEEC 8098             (           D4.ASM):00061                 FCB     128,152         ;outside of left ankle
DEEE 84A0             (           D4.ASM):00062                 FCB     132,160         ;toe of left foot
DEF0 8490             (           D4.ASM):00063                 FCB     132,144         ;heel of left foot
DEF2 7E90             (           D4.ASM):00064                 FCB     126,144         ;ankle of left foot
DEF4 5482             (           D4.ASM):00065                 FCB     84,130          ;to crotch
DEF6 FF               (           D4.ASM):00066                 FCB     V$NEW           ;start new sequence
                      (           D4.ASM):00067         ;
                      (           D4.ASM):00068         ; Right Leg
                      (           D4.ASM):00069         ;
DEF7 547E             (           D4.ASM):00070                 FCB     84,126          ;crotch
DEF9 7E6E             (           D4.ASM):00071                 FCB     126,110         ;ankle
DEFB 846E             (           D4.ASM):00072                 FCB     132,110         ;heel
DEFD 845C             (           D4.ASM):00073                 FCB     132,92          ;toe
DEFF 8066             (           D4.ASM):00074                 FCB     128,102         ;outside of ankle
DF01 5074             (           D4.ASM):00075                 FCB     80,116          ;to hip
DF03 FF               (           D4.ASM):00076                 FCB     V$NEW           ;start new sequence
                      (           D4.ASM):00077         ;
                      (           D4.ASM):00078         ; Torso
                      (           D4.ASM):00079         ;
                      (           D4.ASM):00080                 SVORG   80,140
     0050             (            SVORG):00001         SVX     SET     80
     008C             (            SVORG):00002         SVY     SET     140
DF04 508CFC           (            SVORG):00003                 FCB     80,140,V$REL
                      (           D4.ASM):00081                 SVECT   86,128
DF07 3A               (            SVECT):00001                 FCB     ((((86-SVX)/2)&$000F)*16)+(((128-SVY)/2)&$000F)
     0056             (            SVECT):00002         SVX     SET     86
     0080             (            SVECT):00003         SVY     SET     128
                      (           D4.ASM):00082                 SVECT   80,114
DF08 D9               (            SVECT):00001                 FCB     ((((80-SVX)/2)&$000F)*16)+(((114-SVY)/2)&$000F)
     0050             (            SVECT):00002         SVX     SET     80
     0072             (            SVECT):00003         SVY     SET     114
                      (           D4.ASM):00083                 SVECT   64,120
DF09 83               (            SVECT):00001                 FCB     ((((64-SVX)/2)&$000F)*16)+(((120-SVY)/2)&$000F)
     0040             (            SVECT):00002         SVX     SET     64
     0078             (            SVECT):00003         SVY     SET     120
                      (           D4.ASM):00084                 SVECT   58,116
DF0A DE               (            SVECT):00001                 FCB     ((((58-SVX)/2)&$000F)*16)+(((116-SVY)/2)&$000F)
     003A             (            SVECT):00002         SVX     SET     58
     0074             (            SVECT):00003         SVY     SET     116
                      (           D4.ASM):00085                 SVECT   46,110
DF0B AD               (            SVECT):00001                 FCB     ((((46-SVX)/2)&$000F)*16)+(((110-SVY)/2)&$000F)
     002E             (            SVECT):00002         SVX     SET     46
     006E             (            SVECT):00003         SVY     SET     110
                      (           D4.ASM):00086                 SVECT   42,122
DF0C E6               (            SVECT):00001                 FCB     ((((42-SVX)/2)&$000F)*16)+(((122-SVY)/2)&$000F)
     002A             (            SVECT):00002         SVX     SET     42
     007A             (            SVECT):00003         SVY     SET     122
                      (           D4.ASM):00087                 SVECT   30,124
DF0D A1               (            SVECT):00001                 FCB     ((((30-SVX)/2)&$000F)*16)+(((124-SVY)/2)&$000F)
     001E             (            SVECT):00002         SVX     SET     30
     007C             (            SVECT):00003         SVY     SET     124
                      (           D4.ASM):00088                 SVECT   26,128
DF0E E2               (            SVECT):00001                 FCB     ((((26-SVX)/2)&$000F)*16)+(((128-SVY)/2)&$000F)
     001A             (            SVECT):00002         SVX     SET     26
     0080             (            SVECT):00003         SVY     SET     128
                      (           D4.ASM):00089                 SVECT   30,132
DF0F 22               (            SVECT):00001                 FCB     ((((30-SVX)/2)&$000F)*16)+(((132-SVY)/2)&$000F)
     001E             (            SVECT):00002         SVX     SET     30
     0084             (            SVECT):00003         SVY     SET     132
                      (           D4.ASM):00090                 SVECT   42,134
DF10 61               (            SVECT):00001                 FCB     ((((42-SVX)/2)&$000F)*16)+(((134-SVY)/2)&$000F)
     002A             (            SVECT):00002         SVX     SET     42
     0086             (            SVECT):00003         SVY     SET     134
                      (           D4.ASM):00091                 SVECT   46,146
DF11 26               (            SVECT):00001                 FCB     ((((46-SVX)/2)&$000F)*16)+(((146-SVY)/2)&$000F)
     002E             (            SVECT):00002         SVX     SET     46
     0092             (            SVECT):00003         SVY     SET     146
                      (           D4.ASM):00092                 SVECT   42,134
DF12 EA               (            SVECT):00001                 FCB     ((((42-SVX)/2)&$000F)*16)+(((134-SVY)/2)&$000F)
     002A             (            SVECT):00002         SVX     SET     42
     0086             (            SVECT):00003         SVY     SET     134
                      (           D4.ASM):00093                 SVECT   46,134
DF13 20               (            SVECT):00001                 FCB     ((((46-SVX)/2)&$000F)*16)+(((134-SVY)/2)&$000F)
     002E             (            SVECT):00002         SVX     SET     46
     0086             (            SVECT):00003         SVY     SET     134
                      (           D4.ASM):00094                 SVECT   52,128
DF14 3D               (            SVECT):00001                 FCB     ((((52-SVX)/2)&$000F)*16)+(((128-SVY)/2)&$000F)
     0034             (            SVECT):00002         SVX     SET     52
     0080             (            SVECT):00003         SVY     SET     128
                      (           D4.ASM):00095                 SVECT   46,122
DF15 DD               (            SVECT):00001                 FCB     ((((46-SVX)/2)&$000F)*16)+(((122-SVY)/2)&$000F)
     002E             (            SVECT):00002         SVX     SET     46
     007A             (            SVECT):00003         SVY     SET     122
                      (           D4.ASM):00096                 SVECT   42,122
DF16 E0               (            SVECT):00001                 FCB     ((((42-SVX)/2)&$000F)*16)+(((122-SVY)/2)&$000F)
     002A             (            SVECT):00002         SVX     SET     42
     007A             (            SVECT):00003         SVY     SET     122
                      (           D4.ASM):00097                 SVNEW
DF17 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D4.ASM):00098         ;
                      (           D4.ASM):00099         ; Plume
                      (           D4.ASM):00100         ;
DF18 3480             (           D4.ASM):00101                 FCB     52,128          ;chin of helm
                      (           D4.ASM):00102                 SVORG   20,128
     0014             (            SVORG):00001         SVX     SET     20
     0080             (            SVORG):00002         SVY     SET     128
DF1A 1480FC           (            SVORG):00003                 FCB     20,128,V$REL
                      (           D4.ASM):00103                 SVECT   20,124
DF1D 0E               (            SVECT):00001                 FCB     ((((20-SVX)/2)&$000F)*16)+(((124-SVY)/2)&$000F)
     0014             (            SVECT):00002         SVX     SET     20
     007C             (            SVECT):00003         SVY     SET     124
                      (           D4.ASM):00104                 SVECT   24,126
DF1E 21               (            SVECT):00001                 FCB     ((((24-SVX)/2)&$000F)*16)+(((126-SVY)/2)&$000F)
     0018             (            SVECT):00002         SVX     SET     24
     007E             (            SVECT):00003         SVY     SET     126
                      (           D4.ASM):00105                 SVECT   24,130
DF1F 02               (            SVECT):00001                 FCB     ((((24-SVX)/2)&$000F)*16)+(((130-SVY)/2)&$000F)
     0018             (            SVECT):00002         SVX     SET     24
     0082             (            SVECT):00003         SVY     SET     130
                      (           D4.ASM):00106                 SVECT   20,132
DF20 E1               (            SVECT):00001                 FCB     ((((20-SVX)/2)&$000F)*16)+(((132-SVY)/2)&$000F)
     0014             (            SVECT):00002         SVX     SET     20
     0084             (            SVECT):00003         SVY     SET     132
                      (           D4.ASM):00107                 SVECT   20,128
DF21 0E               (            SVECT):00001                 FCB     ((((20-SVX)/2)&$000F)*16)+(((128-SVY)/2)&$000F)
     0014             (            SVECT):00002         SVX     SET     20
     0080             (            SVECT):00003         SVY     SET     128
                      (           D4.ASM):00108                 SVNEW
DF22 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D4.ASM):00109         
                      (           D4.ASM):00110         
                      (           D4.ASM):00111         
                      (           D4.ASM):00112         ;
                      (           D4.ASM):00113         ; Sword Handle and Lower Arm
                      (           D4.ASM):00114         ;
                      (           D4.ASM):00115                 SVORG   74,102
     004A             (            SVORG):00001         SVX     SET     74
     0066             (            SVORG):00002         SVY     SET     102
DF23 4A66FC           (            SVORG):00003                 FCB     74,102,V$REL
                      (           D4.ASM):00116                 SVECT   70,102
DF26 E0               (            SVECT):00001                 FCB     ((((70-SVX)/2)&$000F)*16)+(((102-SVY)/2)&$000F)
     0046             (            SVECT):00002         SVX     SET     70
     0066             (            SVECT):00003         SVY     SET     102
                      (           D4.ASM):00117                 SVECT   70,106
DF27 02               (            SVECT):00001                 FCB     ((((70-SVX)/2)&$000F)*16)+(((106-SVY)/2)&$000F)
     0046             (            SVECT):00002         SVX     SET     70
     006A             (            SVECT):00003         SVY     SET     106
                      (           D4.ASM):00118                 SVECT   64,106
DF28 D0               (            SVECT):00001                 FCB     ((((64-SVX)/2)&$000F)*16)+(((106-SVY)/2)&$000F)
     0040             (            SVECT):00002         SVX     SET     64
     006A             (            SVECT):00003         SVY     SET     106
                      (           D4.ASM):00119                 SVECT   64,90
DF29 08               (            SVECT):00001                 FCB     ((((64-SVX)/2)&$000F)*16)+(((90-SVY)/2)&$000F)
     0040             (            SVECT):00002         SVX     SET     64
     005A             (            SVECT):00003         SVY     SET     90
                      (           D4.ASM):00120                 SVECT   70,90
DF2A 30               (            SVECT):00001                 FCB     ((((70-SVX)/2)&$000F)*16)+(((90-SVY)/2)&$000F)
     0046             (            SVECT):00002         SVX     SET     70
     005A             (            SVECT):00003         SVY     SET     90
                      (           D4.ASM):00121                 SVECT   70,94
DF2B 02               (            SVECT):00001                 FCB     ((((70-SVX)/2)&$000F)*16)+(((94-SVY)/2)&$000F)
     0046             (            SVECT):00002         SVX     SET     70
     005E             (            SVECT):00003         SVY     SET     94
                      (           D4.ASM):00122                 SVECT   74,94
DF2C 20               (            SVECT):00001                 FCB     ((((74-SVX)/2)&$000F)*16)+(((94-SVY)/2)&$000F)
     004A             (            SVECT):00002         SVX     SET     74
     005E             (            SVECT):00003         SVY     SET     94
                      (           D4.ASM):00123                 SVECT   74,96
DF2D 01               (            SVECT):00001                 FCB     ((((74-SVX)/2)&$000F)*16)+(((96-SVY)/2)&$000F)
     004A             (            SVECT):00002         SVX     SET     74
     0060             (            SVECT):00003         SVY     SET     96
                      (           D4.ASM):00124                 SVECT   80,96
DF2E 30               (            SVECT):00001                 FCB     ((((80-SVX)/2)&$000F)*16)+(((96-SVY)/2)&$000F)
     0050             (            SVECT):00002         SVX     SET     80
     0060             (            SVECT):00003         SVY     SET     96
                      (           D4.ASM):00125                 SVECT   80,100
DF2F 02               (            SVECT):00001                 FCB     ((((80-SVX)/2)&$000F)*16)+(((100-SVY)/2)&$000F)
     0050             (            SVECT):00002         SVX     SET     80
     0064             (            SVECT):00003         SVY     SET     100
                      (           D4.ASM):00126                 SVECT   74,100
DF30 D0               (            SVECT):00001                 FCB     ((((74-SVX)/2)&$000F)*16)+(((100-SVY)/2)&$000F)
     004A             (            SVECT):00002         SVX     SET     74
     0064             (            SVECT):00003         SVY     SET     100
                      (           D4.ASM):00127                 SVECT   74,102
DF31 01               (            SVECT):00001                 FCB     ((((74-SVX)/2)&$000F)*16)+(((102-SVY)/2)&$000F)
     004A             (            SVECT):00002         SVX     SET     74
     0066             (            SVECT):00003         SVY     SET     102
                      (           D4.ASM):00128                 SVECT   58,116
DF32 87               (            SVECT):00001                 FCB     ((((58-SVX)/2)&$000F)*16)+(((116-SVY)/2)&$000F)
     003A             (            SVECT):00002         SVX     SET     58
     0074             (            SVECT):00003         SVY     SET     116
                      (           D4.ASM):00129                 SVNEW
DF33 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D4.ASM):00130         ;
                      (           D4.ASM):00131         ; Upper Part of Arm and Sword Blade
                      (           D4.ASM):00132         ;
DF34 2E6E             (           D4.ASM):00133                 FCB     46,110
DF36 4066             (           D4.ASM):00134                 FCB     64,102
DF38 4064             (           D4.ASM):00135                 FCB     64,100
DF3A 1E66             (           D4.ASM):00136                 FCB     30,102
DF3C 1462             (           D4.ASM):00137                 FCB     20,98
DF3E 1E5E             (           D4.ASM):00138                 FCB     30,94
DF40 4060             (           D4.ASM):00139                 FCB     64,96
DF42 4062             (           D4.ASM):00140                 FCB     64,98
DF44 1462             (           D4.ASM):00141                 FCB     20,98
DF46 FE               (           D4.ASM):00142                 FCB     V$END           ;end of knight vector list
                      (           D4.ASM):00143         ;
                      (           D4.ASM):00144         ; End of Knight vector list
                      (           D4.ASM):00145         ;
                      (           D4.ASM):00146         ; * * * * * * * * *
                      (           D4.ASM):00147         
                      (           D4.ASM):00148         
                      (           D4.ASM):00149         
                      (           D4.ASM):00150         ; * * * * * * * * *
                      (           D4.ASM):00151         ;
                      (           D4.ASM):00152         ; Wizard 1
                      (           D4.ASM):00153         ;
                      (           D4.ASM):00154         ; with crescent shaped sceptre point
                      (           D4.ASM):00155         ;
DF47                  (           D4.ASM):00156         WIZ1    SVORG   46,98
     002E             (            SVORG):00001         SVX     SET     46
     0062             (            SVORG):00002         SVY     SET     98
DF47 2E62FC           (            SVORG):00003                 FCB     46,98,V$REL
                      (           D4.ASM):00157                 SVECT   50,100
DF4A 21               (            SVECT):00001                 FCB     ((((50-SVX)/2)&$000F)*16)+(((100-SVY)/2)&$000F)
     0032             (            SVECT):00002         SVX     SET     50
     0064             (            SVECT):00003         SVY     SET     100
                      (           D4.ASM):00158                 SVECT   54,98
DF4B 2F               (            SVECT):00001                 FCB     ((((54-SVX)/2)&$000F)*16)+(((98-SVY)/2)&$000F)
     0036             (            SVECT):00002         SVX     SET     54
     0062             (            SVECT):00003         SVY     SET     98
                      (           D4.ASM):00159                 SVECT   58,92
DF4C 2D               (            SVECT):00001                 FCB     ((((58-SVX)/2)&$000F)*16)+(((92-SVY)/2)&$000F)
     003A             (            SVECT):00002         SVX     SET     58
     005C             (            SVECT):00003         SVY     SET     92
                      (           D4.ASM):00160                 SVECT   56,86
DF4D FD               (            SVECT):00001                 FCB     ((((56-SVX)/2)&$000F)*16)+(((86-SVY)/2)&$000F)
     0038             (            SVECT):00002         SVX     SET     56
     0056             (            SVECT):00003         SVY     SET     86
                      (           D4.ASM):00161                 SVECT   48,82
DF4E CE               (            SVECT):00001                 FCB     ((((48-SVX)/2)&$000F)*16)+(((82-SVY)/2)&$000F)
     0030             (            SVECT):00002         SVX     SET     48
     0052             (            SVECT):00003         SVY     SET     82
                      (           D4.ASM):00162                 SVECT   40,86
DF4F C2               (            SVECT):00001                 FCB     ((((40-SVX)/2)&$000F)*16)+(((86-SVY)/2)&$000F)
     0028             (            SVECT):00002         SVX     SET     40
     0056             (            SVECT):00003         SVY     SET     86
                      (           D4.ASM):00163                 SVECT   38,90
DF50 F2               (            SVECT):00001                 FCB     ((((38-SVX)/2)&$000F)*16)+(((90-SVY)/2)&$000F)
     0026             (            SVECT):00002         SVX     SET     38
     005A             (            SVECT):00003         SVY     SET     90
                      (           D4.ASM):00164                 SVECT   40,94
DF51 12               (            SVECT):00001                 FCB     ((((40-SVX)/2)&$000F)*16)+(((94-SVY)/2)&$000F)
     0028             (            SVECT):00002         SVX     SET     40
     005E             (            SVECT):00003         SVY     SET     94
                      (           D4.ASM):00165                 SVECT   40,92
DF52 0F               (            SVECT):00001                 FCB     ((((40-SVX)/2)&$000F)*16)+(((92-SVY)/2)&$000F)
     0028             (            SVECT):00002         SVX     SET     40
     005C             (            SVECT):00003         SVY     SET     92
                      (           D4.ASM):00166                 SVECT   42,88
DF53 1E               (            SVECT):00001                 FCB     ((((42-SVX)/2)&$000F)*16)+(((88-SVY)/2)&$000F)
     002A             (            SVECT):00002         SVX     SET     42
     0058             (            SVECT):00003         SVY     SET     88
                      (           D4.ASM):00167                 SVECT   48,86
DF54 3F               (            SVECT):00001                 FCB     ((((48-SVX)/2)&$000F)*16)+(((86-SVY)/2)&$000F)
     0030             (            SVECT):00002         SVX     SET     48
     0056             (            SVECT):00003         SVY     SET     86
                      (           D4.ASM):00168                 SVECT   52,88
DF55 21               (            SVECT):00001                 FCB     ((((52-SVX)/2)&$000F)*16)+(((88-SVY)/2)&$000F)
     0034             (            SVECT):00002         SVX     SET     52
     0058             (            SVECT):00003         SVY     SET     88
                      (           D4.ASM):00169                 SVECT   54,92
DF56 12               (            SVECT):00001                 FCB     ((((54-SVX)/2)&$000F)*16)+(((92-SVY)/2)&$000F)
     0036             (            SVECT):00002         SVX     SET     54
     005C             (            SVECT):00003         SVY     SET     92
                      (           D4.ASM):00170                 SVECT   50,98
DF57 E3               (            SVECT):00001                 FCB     ((((50-SVX)/2)&$000F)*16)+(((98-SVY)/2)&$000F)
     0032             (            SVECT):00002         SVX     SET     50
     0062             (            SVECT):00003         SVY     SET     98
                      (           D4.ASM):00171                 SVECT   46,98
DF58 E0               (            SVECT):00001                 FCB     ((((46-SVX)/2)&$000F)*16)+(((98-SVY)/2)&$000F)
     002E             (            SVECT):00002         SVX     SET     46
     0062             (            SVECT):00003         SVY     SET     98
                      (           D4.ASM):00172                 SVNEW
DF59 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D4.ASM):00173         ;
                      (           D4.ASM):00174         ; Crescent on cape
                      (           D4.ASM):00175         ;
                      (           D4.ASM):00176                 SVORG   104,154
     0068             (            SVORG):00001         SVX     SET     104
     009A             (            SVORG):00002         SVY     SET     154
DF5A 689AFC           (            SVORG):00003                 FCB     104,154,V$REL
                      (           D4.ASM):00177                 SVECT   108,156
DF5D 21               (            SVECT):00001                 FCB     ((((108-SVX)/2)&$000F)*16)+(((156-SVY)/2)&$000F)
     006C             (            SVECT):00002         SVX     SET     108
     009C             (            SVECT):00003         SVY     SET     156
                      (           D4.ASM):00178                 SVECT   112,154
DF5E 2F               (            SVECT):00001                 FCB     ((((112-SVX)/2)&$000F)*16)+(((154-SVY)/2)&$000F)
     0070             (            SVECT):00002         SVX     SET     112
     009A             (            SVECT):00003         SVY     SET     154
                      (           D4.ASM):00179                 SVECT   116,148
DF5F 2D               (            SVECT):00001                 FCB     ((((116-SVX)/2)&$000F)*16)+(((148-SVY)/2)&$000F)
     0074             (            SVECT):00002         SVX     SET     116
     0094             (            SVECT):00003         SVY     SET     148
                      (           D4.ASM):00180                 SVECT   114,142
DF60 FD               (            SVECT):00001                 FCB     ((((114-SVX)/2)&$000F)*16)+(((142-SVY)/2)&$000F)
     0072             (            SVECT):00002         SVX     SET     114
     008E             (            SVECT):00003         SVY     SET     142
                      (           D4.ASM):00181                 SVECT   106,138
DF61 CE               (            SVECT):00001                 FCB     ((((106-SVX)/2)&$000F)*16)+(((138-SVY)/2)&$000F)
     006A             (            SVECT):00002         SVX     SET     106
     008A             (            SVECT):00003         SVY     SET     138
                      (           D4.ASM):00182                 SVECT   98,142
DF62 C2               (            SVECT):00001                 FCB     ((((98-SVX)/2)&$000F)*16)+(((142-SVY)/2)&$000F)
     0062             (            SVECT):00002         SVX     SET     98
     008E             (            SVECT):00003         SVY     SET     142
                      (           D4.ASM):00183                 SVECT   96,146
DF63 F2               (            SVECT):00001                 FCB     ((((96-SVX)/2)&$000F)*16)+(((146-SVY)/2)&$000F)
     0060             (            SVECT):00002         SVX     SET     96
     0092             (            SVECT):00003         SVY     SET     146
                      (           D4.ASM):00184                 SVECT   98,150
DF64 12               (            SVECT):00001                 FCB     ((((98-SVX)/2)&$000F)*16)+(((150-SVY)/2)&$000F)
     0062             (            SVECT):00002         SVX     SET     98
     0096             (            SVECT):00003         SVY     SET     150
                      (           D4.ASM):00185                 SVECT   98,148
DF65 0F               (            SVECT):00001                 FCB     ((((98-SVX)/2)&$000F)*16)+(((148-SVY)/2)&$000F)
     0062             (            SVECT):00002         SVX     SET     98
     0094             (            SVECT):00003         SVY     SET     148
                      (           D4.ASM):00186                 SVECT   100,144
DF66 1E               (            SVECT):00001                 FCB     ((((100-SVX)/2)&$000F)*16)+(((144-SVY)/2)&$000F)
     0064             (            SVECT):00002         SVX     SET     100
     0090             (            SVECT):00003         SVY     SET     144
                      (           D4.ASM):00187                 SVECT   106,142
DF67 3F               (            SVECT):00001                 FCB     ((((106-SVX)/2)&$000F)*16)+(((142-SVY)/2)&$000F)
     006A             (            SVECT):00002         SVX     SET     106
     008E             (            SVECT):00003         SVY     SET     142
                      (           D4.ASM):00188                 SVECT   110,146
DF68 22               (            SVECT):00001                 FCB     ((((110-SVX)/2)&$000F)*16)+(((146-SVY)/2)&$000F)
     006E             (            SVECT):00002         SVX     SET     110
     0092             (            SVECT):00003         SVY     SET     146
                      (           D4.ASM):00189                 SVECT   112,150
DF69 12               (            SVECT):00001                 FCB     ((((112-SVX)/2)&$000F)*16)+(((150-SVY)/2)&$000F)
     0070             (            SVECT):00002         SVX     SET     112
     0096             (            SVECT):00003         SVY     SET     150
                      (           D4.ASM):00190                 SVECT   108,154
DF6A E2               (            SVECT):00001                 FCB     ((((108-SVX)/2)&$000F)*16)+(((154-SVY)/2)&$000F)
     006C             (            SVECT):00002         SVX     SET     108
     009A             (            SVECT):00003         SVY     SET     154
                      (           D4.ASM):00191                 SVECT   104,154
DF6B E0               (            SVECT):00001                 FCB     ((((104-SVX)/2)&$000F)*16)+(((154-SVY)/2)&$000F)
     0068             (            SVECT):00002         SVX     SET     104
     009A             (            SVECT):00003         SVY     SET     154
                      (           D4.ASM):00192                 SVNEW
DF6C 00               (            SVNEW):00001                 FCB     V$ABS
DF6D FD               (           D4.ASM):00193                 FCB     V$JMP           ;transfer to another list
DF6E DF9C             (           D4.ASM):00194                 FDB     WIZ0            ;pointer to wizard main vector list
                      (           D4.ASM):00195         ;
                      (           D4.ASM):00196         ; * * * * * * * * *
                      (           D4.ASM):00197         
                      (           D4.ASM):00198         
                      (           D4.ASM):00199         
                      (           D4.ASM):00200         ; * * * * * * * * *
                      (           D4.ASM):00201         ;
                      (           D4.ASM):00202         ; Wizard 2
                      (           D4.ASM):00203         ;
                      (           D4.ASM):00204         ; with Star shaped sceptre point
                      (           D4.ASM):00205         ;
DF70 2856             (           D4.ASM):00206         WIZ2    FCB     40,86           ;
DF72 405C             (           D4.ASM):00207                 FCB     64,92           ;
DF74 2A64             (           D4.ASM):00208                 FCB     42,100          ;
DF76 3652             (           D4.ASM):00209                 FCB     54,82           ;
DF78 3868             (           D4.ASM):00210                 FCB     56,104          ;
DF7A 2856             (           D4.ASM):00211                 FCB     40,86           ;
DF7C FF               (           D4.ASM):00212                 FCB     V$NEW           ;start new sequence
                      (           D4.ASM):00213         ;        
                      (           D4.ASM):00214         ; Stars on cape
                      (           D4.ASM):00215         ;
                      (           D4.ASM):00216                 SVORG   66,140
     0042             (            SVORG):00001         SVX     SET     66
     008C             (            SVORG):00002         SVY     SET     140
DF7D 428CFC           (            SVORG):00003                 FCB     66,140,V$REL
                      (           D4.ASM):00217                 SVECT   80,140
DF80 70               (            SVECT):00001                 FCB     ((((80-SVX)/2)&$000F)*16)+(((140-SVY)/2)&$000F)
     0050             (            SVECT):00002         SVX     SET     80
     008C             (            SVECT):00003         SVY     SET     140
                      (           D4.ASM):00218                 SVECT   68,134
DF81 AD               (            SVECT):00001                 FCB     ((((68-SVX)/2)&$000F)*16)+(((134-SVY)/2)&$000F)
     0044             (            SVECT):00002         SVX     SET     68
     0086             (            SVECT):00003         SVY     SET     134
                      (           D4.ASM):00219                 SVECT   74,144
DF82 35               (            SVECT):00001                 FCB     ((((74-SVX)/2)&$000F)*16)+(((144-SVY)/2)&$000F)
     004A             (            SVECT):00002         SVX     SET     74
     0090             (            SVECT):00003         SVY     SET     144
                      (           D4.ASM):00220                 SVECT   76,134
DF83 1B               (            SVECT):00001                 FCB     ((((76-SVX)/2)&$000F)*16)+(((134-SVY)/2)&$000F)
     004C             (            SVECT):00002         SVX     SET     76
     0086             (            SVECT):00003         SVY     SET     134
                      (           D4.ASM):00221                 SVECT   66,140
DF84 B3               (            SVECT):00001                 FCB     ((((66-SVX)/2)&$000F)*16)+(((140-SVY)/2)&$000F)
     0042             (            SVECT):00002         SVX     SET     66
     008C             (            SVECT):00003         SVY     SET     140
                      (           D4.ASM):00222                 SVNEW
DF85 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D4.ASM):00223         ;
                      (           D4.ASM):00224         ; Lower right start
                      (           D4.ASM):00225         ;
DF86 6092             (           D4.ASM):00226                 FCB     96,146          ;
DF88 7894             (           D4.ASM):00227                 FCB     120,148         ;
DF8A 6488             (           D4.ASM):00228                 FCB     100,136         ;
DF8C 6A9A             (           D4.ASM):00229                 FCB     106,154         ;
DF8E 748A             (           D4.ASM):00230                 FCB     116,138         ;
DF90 6092             (           D4.ASM):00231                 FCB     96,146          ;
DF92 FF               (           D4.ASM):00232                 FCB     V$NEW           ;start new sequence
                      (           D4.ASM):00233         ;
                      (           D4.ASM):00234         ; Upper left star
                      (           D4.ASM):00235         ;
                      (           D4.ASM):00236                 SVORG   80,116
     0050             (            SVORG):00001         SVX     SET     80
     0074             (            SVORG):00002         SVY     SET     116
DF93 5074FC           (            SVORG):00003                 FCB     80,116,V$REL
                      (           D4.ASM):00237                 SVECT   90,122
DF96 53               (            SVECT):00001                 FCB     ((((90-SVX)/2)&$000F)*16)+(((122-SVY)/2)&$000F)
     005A             (            SVECT):00002         SVX     SET     90
     007A             (            SVECT):00003         SVY     SET     122
                      (           D4.ASM):00238                 SVECT   86,114
DF97 EC               (            SVECT):00001                 FCB     ((((86-SVX)/2)&$000F)*16)+(((114-SVY)/2)&$000F)
     0056             (            SVECT):00002         SVX     SET     86
     0072             (            SVECT):00003         SVY     SET     114
                      (           D4.ASM):00239                 SVECT   82,122
DF98 E4               (            SVECT):00001                 FCB     ((((82-SVX)/2)&$000F)*16)+(((122-SVY)/2)&$000F)
     0052             (            SVECT):00002         SVX     SET     82
     007A             (            SVECT):00003         SVY     SET     122
                      (           D4.ASM):00240                 SVECT   90,116
DF99 4D               (            SVECT):00001                 FCB     ((((90-SVX)/2)&$000F)*16)+(((116-SVY)/2)&$000F)
     005A             (            SVECT):00002         SVX     SET     90
     0074             (            SVECT):00003         SVY     SET     116
                      (           D4.ASM):00241                 SVECT   80,116
DF9A B0               (            SVECT):00001                 FCB     ((((80-SVX)/2)&$000F)*16)+(((116-SVY)/2)&$000F)
     0050             (            SVECT):00002         SVX     SET     80
     0074             (            SVECT):00003         SVY     SET     116
                      (           D4.ASM):00242                 SVNEW
DF9B 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D4.ASM):00243         ;
                      (           D4.ASM):00244         ;                               ;fall thru to WIZ0
                      (           D4.ASM):00245         ;
                      (           D4.ASM):00246         ; * * * * * * * * *
                      (           D4.ASM):00247         
                      (           D4.ASM):00248         
                      (           D4.ASM):00249         
                      (           D4.ASM):00250         ; * * * * * * * * *
                      (           D4.ASM):00251         ;
                      (           D4.ASM):00252         ; Main Wizard vector list
                      (           D4.ASM):00253         ;
DF9C                  (           D4.ASM):00254         WIZ0    SVORG   64,124
     0040             (            SVORG):00001         SVX     SET     64
     007C             (            SVORG):00002         SVY     SET     124
DF9C 407CFC           (            SVORG):00003                 FCB     64,124,V$REL
                      (           D4.ASM):00255                 SVECT   72,120
DF9F 4E               (            SVECT):00001                 FCB     ((((72-SVX)/2)&$000F)*16)+(((120-SVY)/2)&$000F)
     0048             (            SVECT):00002         SVX     SET     72
     0078             (            SVECT):00003         SVY     SET     120
                      (           D4.ASM):00256                 SVECT   64,120
DFA0 C0               (            SVECT):00001                 FCB     ((((64-SVX)/2)&$000F)*16)+(((120-SVY)/2)&$000F)
     0040             (            SVECT):00002         SVX     SET     64
     0078             (            SVECT):00003         SVY     SET     120
                      (           D4.ASM):00257                 SVECT   78,110
DFA1 7B               (            SVECT):00001                 FCB     ((((78-SVX)/2)&$000F)*16)+(((110-SVY)/2)&$000F)
     004E             (            SVECT):00002         SVX     SET     78
     006E             (            SVECT):00003         SVY     SET     110
                      (           D4.ASM):00258                 SVECT   64,102
DFA2 9C               (            SVECT):00001                 FCB     ((((64-SVX)/2)&$000F)*16)+(((102-SVY)/2)&$000F)
     0040             (            SVECT):00002         SVX     SET     64
     0066             (            SVECT):00003         SVY     SET     102
                      (           D4.ASM):00259                 SVECT   58,110
DFA3 D4               (            SVECT):00001                 FCB     ((((58-SVX)/2)&$000F)*16)+(((110-SVY)/2)&$000F)
     003A             (            SVECT):00002         SVX     SET     58
     006E             (            SVECT):00003         SVY     SET     110
                      (           D4.ASM):00260                 SVECT   54,118
DFA4 E4               (            SVECT):00001                 FCB     ((((54-SVX)/2)&$000F)*16)+(((118-SVY)/2)&$000F)
     0036             (            SVECT):00002         SVX     SET     54
     0076             (            SVECT):00003         SVY     SET     118
                      (           D4.ASM):00261                 SVECT   50,120
DFA5 E1               (            SVECT):00001                 FCB     ((((50-SVX)/2)&$000F)*16)+(((120-SVY)/2)&$000F)
     0032             (            SVECT):00002         SVX     SET     50
     0078             (            SVECT):00003         SVY     SET     120
                      (           D4.ASM):00262                 SVECT   46,122
DFA6 E1               (            SVECT):00001                 FCB     ((((46-SVX)/2)&$000F)*16)+(((122-SVY)/2)&$000F)
     002E             (            SVECT):00002         SVX     SET     46
     007A             (            SVECT):00003         SVY     SET     122
                      (           D4.ASM):00263                 SVECT   40,116
DFA7 DD               (            SVECT):00001                 FCB     ((((40-SVX)/2)&$000F)*16)+(((116-SVY)/2)&$000F)
     0028             (            SVECT):00002         SVX     SET     40
     0074             (            SVECT):00003         SVY     SET     116
                      (           D4.ASM):00264                 SVECT   42,108
DFA8 1C               (            SVECT):00001                 FCB     ((((42-SVX)/2)&$000F)*16)+(((108-SVY)/2)&$000F)
     002A             (            SVECT):00002         SVX     SET     42
     006C             (            SVECT):00003         SVY     SET     108
                      (           D4.ASM):00265                 SVECT   28,120
DFA9 96               (            SVECT):00001                 FCB     ((((28-SVX)/2)&$000F)*16)+(((120-SVY)/2)&$000F)
     001C             (            SVECT):00002         SVX     SET     28
     0078             (            SVECT):00003         SVY     SET     120
                      (           D4.ASM):00266                 SVECT   28,126
DFAA 03               (            SVECT):00001                 FCB     ((((28-SVX)/2)&$000F)*16)+(((126-SVY)/2)&$000F)
     001C             (            SVECT):00002         SVX     SET     28
     007E             (            SVECT):00003         SVY     SET     126
                      (           D4.ASM):00267                 SVNEW                   ;start new sequence
DFAB 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D4.ASM):00268         ;
                      (           D4.ASM):00269                 SVORG   28,130
     001C             (            SVORG):00001         SVX     SET     28
     0082             (            SVORG):00002         SVY     SET     130
DFAC 1C82FC           (            SVORG):00003                 FCB     28,130,V$REL
                      (           D4.ASM):00270                 SVECT   28,136
DFAF 03               (            SVECT):00001                 FCB     ((((28-SVX)/2)&$000F)*16)+(((136-SVY)/2)&$000F)
     001C             (            SVECT):00002         SVX     SET     28
     0088             (            SVECT):00003         SVY     SET     136
                      (           D4.ASM):00271                 SVECT   36,146
DFB0 45               (            SVECT):00001                 FCB     ((((36-SVX)/2)&$000F)*16)+(((146-SVY)/2)&$000F)
     0024             (            SVECT):00002         SVX     SET     36
     0092             (            SVECT):00003         SVY     SET     146
                      (           D4.ASM):00272                 SVECT   50,148
DFB1 71               (            SVECT):00001                 FCB     ((((50-SVX)/2)&$000F)*16)+(((148-SVY)/2)&$000F)
     0032             (            SVECT):00002         SVX     SET     50
     0094             (            SVECT):00003         SVY     SET     148
                      (           D4.ASM):00273                 SVECT   44,136
DFB2 DA               (            SVECT):00001                 FCB     ((((44-SVX)/2)&$000F)*16)+(((136-SVY)/2)&$000F)
     002C             (            SVECT):00002         SVX     SET     44
     0088             (            SVECT):00003         SVY     SET     136
                      (           D4.ASM):00274                 SVECT   46,132
DFB3 1E               (            SVECT):00001                 FCB     ((((46-SVX)/2)&$000F)*16)+(((132-SVY)/2)&$000F)
     002E             (            SVECT):00002         SVX     SET     46
     0084             (            SVECT):00003         SVY     SET     132
                      (           D4.ASM):00275                 SVECT   48,134
DFB4 11               (            SVECT):00001                 FCB     ((((48-SVX)/2)&$000F)*16)+(((134-SVY)/2)&$000F)
     0030             (            SVECT):00002         SVX     SET     48
     0086             (            SVECT):00003         SVY     SET     134
                      (           D4.ASM):00276                 SVECT   44,136
DFB5 E1               (            SVECT):00001                 FCB     ((((44-SVX)/2)&$000F)*16)+(((136-SVY)/2)&$000F)
     002C             (            SVECT):00002         SVX     SET     44
     0088             (            SVECT):00003         SVY     SET     136
                      (           D4.ASM):00277                 SVNEW                   ;start new sequence
DFB6 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D4.ASM):00278         ;
DFB7 3086             (           D4.ASM):00279                 FCB     48,134          ;
DFB9 368E             (           D4.ASM):00280                 FCB     54,142          ;
DFBB 74A4             (           D4.ASM):00281                 FCB     116,164         ;down left side of cape
DFBD 8484             (           D4.ASM):00282                 FCB     132,132         ;to tip of sceptre
DFBF 8276             (           D4.ASM):00283                 FCB     130,118         ;across bottom of cape
DFC1 785E             (           D4.ASM):00284                 FCB     120,94          ;
DFC3 5A6E             (           D4.ASM):00285                 FCB     90,110          ;to shaft of sceptre
DFC5 8484             (           D4.ASM):00286                 FCB     132,132         ;down shaft of sceptre
DFC7 486A             (           D4.ASM):00287                 FCB     72,106          ;up inside of shaft to hand
DFC9 FF               (           D4.ASM):00288                 FCB     V$NEW           ;   .
                      (           D4.ASM):00289         ;
                      (           D4.ASM):00290                 SVORG   64,102
     0040             (            SVORG):00001         SVX     SET     64
     0066             (            SVORG):00002         SVY     SET     102
DFCA 4066FC           (            SVORG):00003                 FCB     64,102,V$REL
                      (           D4.ASM):00291                 SVECT   66,100
DFCD 1F               (            SVECT):00001                 FCB     ((((66-SVX)/2)&$000F)*16)+(((100-SVY)/2)&$000F)
     0042             (            SVECT):00002         SVX     SET     66
     0064             (            SVECT):00003         SVY     SET     100
                      (           D4.ASM):00292                 SVECT   56,94
DFCE BD               (            SVECT):00001                 FCB     ((((56-SVX)/2)&$000F)*16)+(((94-SVY)/2)&$000F)
     0038             (            SVECT):00002         SVX     SET     56
     005E             (            SVECT):00003         SVY     SET     94
                      (           D4.ASM):00293                 SVECT   54,96
DFCF F1               (            SVECT):00001                 FCB     ((((54-SVX)/2)&$000F)*16)+(((96-SVY)/2)&$000F)
     0036             (            SVECT):00002         SVX     SET     54
     0060             (            SVECT):00003         SVY     SET     96
                      (           D4.ASM):00294                 SVECT   64,102
DFD0 53               (            SVECT):00001                 FCB     ((((64-SVX)/2)&$000F)*16)+(((102-SVY)/2)&$000F)
     0040             (            SVECT):00002         SVX     SET     64
     0066             (            SVECT):00003         SVY     SET     102
                      (           D4.ASM):00295                 SVNEW                   ;start new sequence
DFD1 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D4.ASM):00296         ;
                      (           D4.ASM):00297                 SVORG   66,102
     0042             (            SVORG):00001         SVX     SET     66
     0066             (            SVORG):00002         SVY     SET     102
DFD2 4266FC           (            SVORG):00003                 FCB     66,102,V$REL
                      (           D4.ASM):00298                 SVECT   68,98
DFD5 1E               (            SVECT):00001                 FCB     ((((68-SVX)/2)&$000F)*16)+(((98-SVY)/2)&$000F)
     0044             (            SVECT):00002         SVX     SET     68
     0062             (            SVECT):00003         SVY     SET     98
                      (           D4.ASM):00299                 SVECT   74,102
DFD6 32               (            SVECT):00001                 FCB     ((((74-SVX)/2)&$000F)*16)+(((102-SVY)/2)&$000F)
     004A             (            SVECT):00002         SVX     SET     74
     0066             (            SVECT):00003         SVY     SET     102
                      (           D4.ASM):00300                 SVECT   76,104
DFD7 11               (            SVECT):00001                 FCB     ((((76-SVX)/2)&$000F)*16)+(((104-SVY)/2)&$000F)
     004C             (            SVECT):00002         SVX     SET     76
     0068             (            SVECT):00003         SVY     SET     104
                      (           D4.ASM):00301                 SVECT   90,110
DFD8 73               (            SVECT):00001                 FCB     ((((90-SVX)/2)&$000F)*16)+(((110-SVY)/2)&$000F)
     005A             (            SVECT):00002         SVX     SET     90
     006E             (            SVECT):00003         SVY     SET     110
                      (           D4.ASM):00302         
                      (           D4.ASM):00303         
                      (           D4.ASM):00304         
                      (           D4.ASM):00305                 SVNEW                   ;start new sequence
DFD9 00               (            SVNEW):00001                 FCB     V$ABS
                      (           D4.ASM):00306         ;
DFDA 5870             (           D4.ASM):00307                 FCB     88,112          ;cape from sceptre shaft
DFDC 4878             (           D4.ASM):00308                 FCB     72,120          ;to armpit
DFDE FF               (           D4.ASM):00309                 FCB     V$NEW           ;start new sequence
                      (           D4.ASM):00310         ;
                      (           D4.ASM):00311         ; Hat from left side of beard
                      (           D4.ASM):00312         ;
DFDF 3E84             (           D4.ASM):00313                 FCB     62,132
DFE1 1480             (           D4.ASM):00314                 FCB     20,128
DFE3 347A             (           D4.ASM):00315                 FCB     52,122
DFE5 407A             (           D4.ASM):00316                 FCB     64,122
DFE7 3C7C             (           D4.ASM):00317                 FCB     60,124
DFE9 7280             (           D4.ASM):00318                 FCB     114,128
DFEB 5082             (           D4.ASM):00319                 FCB     80,130
DFED 4482             (           D4.ASM):00320                 FCB     68,130
DFEF 3E84             (           D4.ASM):00321                 FCB     62,132
DFF1 FF               (           D4.ASM):00322                 FCB     V$NEW
                      (           D4.ASM):00323         ;
                      (           D4.ASM):00324         ;  Face detail
                      (           D4.ASM):00325         ;
                      (           D4.ASM):00326                 SVORG   40,130
     0028             (            SVORG):00001         SVX     SET     40
     0082             (            SVORG):00002         SVY     SET     130
DFF2 2882FC           (            SVORG):00003                 FCB     40,130,V$REL
                      (           D4.ASM):00327                 SVECT   38,128
DFF5 FF               (            SVECT):00001                 FCB     ((((38-SVX)/2)&$000F)*16)+(((128-SVY)/2)&$000F)
     0026             (            SVECT):00002         SVX     SET     38
     0080             (            SVECT):00003         SVY     SET     128
                      (           D4.ASM):00328                 SVECT   40,124
DFF6 1E               (            SVECT):00001                 FCB     ((((40-SVX)/2)&$000F)*16)+(((124-SVY)/2)&$000F)
     0028             (            SVECT):00002         SVX     SET     40
     007C             (            SVECT):00003         SVY     SET     124
                      (           D4.ASM):00329                 SVECT   42,126
DFF7 11               (            SVECT):00001                 FCB     ((((42-SVX)/2)&$000F)*16)+(((126-SVY)/2)&$000F)
     002A             (            SVECT):00002         SVX     SET     42
     007E             (            SVECT):00003         SVY     SET     126
                      (           D4.ASM):00330                 SVECT   40,130
DFF8 F2               (            SVECT):00001                 FCB     ((((40-SVX)/2)&$000F)*16)+(((130-SVY)/2)&$000F)
     0028             (            SVECT):00002         SVX     SET     40
     0082             (            SVECT):00003         SVY     SET     130
                      (           D4.ASM):00331                 SVECT   46,128
DFF9 3F               (            SVECT):00001                 FCB     ((((46-SVX)/2)&$000F)*16)+(((128-SVY)/2)&$000F)
     002E             (            SVECT):00002         SVX     SET     46
     0080             (            SVECT):00003         SVY     SET     128
                      (           D4.ASM):00332                 SVECT   50,128
DFFA 20               (            SVECT):00001                 FCB     ((((50-SVX)/2)&$000F)*16)+(((128-SVY)/2)&$000F)
     0032             (            SVECT):00002         SVX     SET     50
     0080             (            SVECT):00003         SVY     SET     128
                      (           D4.ASM):00333                 SVECT   50,126
DFFB 0F               (            SVECT):00001                 FCB     ((((50-SVX)/2)&$000F)*16)+(((126-SVY)/2)&$000F)
     0032             (            SVECT):00002         SVX     SET     50
     007E             (            SVECT):00003         SVY     SET     126
                      (           D4.ASM):00334                 SVECT   42,126
DFFC C0               (            SVECT):00001                 FCB     ((((42-SVX)/2)&$000F)*16)+(((126-SVY)/2)&$000F)
     002A             (            SVECT):00002         SVX     SET     42
     007E             (            SVECT):00003         SVY     SET     126
                      (           D4.ASM):00335                 SVECT   40,124
DFFD FF               (            SVECT):00001                 FCB     ((((40-SVX)/2)&$000F)*16)+(((124-SVY)/2)&$000F)
     0028             (            SVECT):00002         SVX     SET     40
     007C             (            SVECT):00003         SVY     SET     124
                      (           D4.ASM):00336                 SVECT   46,126
DFFE 31               (            SVECT):00001                 FCB     ((((46-SVX)/2)&$000F)*16)+(((126-SVY)/2)&$000F)
     002E             (            SVECT):00002         SVX     SET     46
     007E             (            SVECT):00003         SVY     SET     126
                      (           D4.ASM):00337                 SVEND                   ;end of wizard vector list
                      (            SVEND):00001                 SVNEW
DFFF 00               (            SVNEW):00001                 FCB     V$ABS
E000 FE               (            SVEND):00002                 FCB     V$END
                      (           D4.ASM):00338         ;
                      (           D4.ASM):00339         ; End of Wizard vector list
                      (           D4.ASM):00340         ;
                      (           D4.ASM):00341         ; * * * * * * * * *
                      (           D4.ASM):00342         
                      (           D4.ASM):00343         
                      (           D4.ASM):00344         
                      (           D4.ASM):00345         ; * * * * * * * * *
                      (           D4.ASM):00346         ;
                      (           D4.ASM):00347         ; Viper vector list
                      (           D4.ASM):00348         ;
                      (           D4.ASM):00349         ; Body and neck
                      (           D4.ASM):00350         ;
E001 8482             (           D4.ASM):00351         VIPER   FCB     132,130         ;right neck at ground
E003 707A             (           D4.ASM):00352                 FCB     112,122         ;up neck
E005 5C7C             (           D4.ASM):00353                 FCB     92,124
E007 5E7E             (           D4.ASM):00354                 FCB     94,126          ;lright chin        
E009 5E82             (           D4.ASM):00355                 FCB     94,130          ;left chin
E00B 5C84             (           D4.ASM):00356                 FCB     92,132
E00D 7082             (           D4.ASM):00357                 FCB     112,130
E00F 808C             (           D4.ASM):00358                 FCB     128,140
E011 8488             (           D4.ASM):00359                 FCB     132,136         ;left neck at ground
E013 8472             (           D4.ASM):00360                 FCB     132,114         ;right body at ground
E015 786C             (           D4.ASM):00361                 FCB     120,108
E017 6A76             (           D4.ASM):00362                 FCB     106,118         ;tip of tail
E019 7870             (           D4.ASM):00363                 FCB     120,112
E01B 7C74             (           D4.ASM):00364                 FCB     124,116
E01D 7C7E             (           D4.ASM):00365                 FCB     124,126         ;meet neck
E01F FF               (           D4.ASM):00366                 FCB     V$NEW
                      (           D4.ASM):00367         ;
                      (           D4.ASM):00368         ; Head
                      (           D4.ASM):00369         ;
                      (           D4.ASM):00370                 SVORG   100,120
     0064             (            SVORG):00001         SVX     SET     100
     0078             (            SVORG):00002         SVY     SET     120
E020 6478FC           (            SVORG):00003                 FCB     100,120,V$REL
                      (           D4.ASM):00371                 SVECT   96,120
E023 E0               (            SVECT):00001                 FCB     ((((96-SVX)/2)&$000F)*16)+(((120-SVY)/2)&$000F)
     0060             (            SVECT):00002         SVX     SET     96
     0078             (            SVECT):00003         SVY     SET     120
                      (           D4.ASM):00372                 SVECT   92,124
E024 E2               (            SVECT):00001                 FCB     ((((92-SVX)/2)&$000F)*16)+(((124-SVY)/2)&$000F)
     005C             (            SVECT):00002         SVX     SET     92
     007C             (            SVECT):00003         SVY     SET     124
                      (           D4.ASM):00373                 SVECT   88,120
E025 EE               (            SVECT):00001                 FCB     ((((88-SVX)/2)&$000F)*16)+(((120-SVY)/2)&$000F)
     0058             (            SVECT):00002         SVX     SET     88
     0078             (            SVECT):00003         SVY     SET     120
                      (           D4.ASM):00374                 SVECT   84,120
E026 E0               (            SVECT):00001                 FCB     ((((84-SVX)/2)&$000F)*16)+(((120-SVY)/2)&$000F)
     0054             (            SVECT):00002         SVX     SET     84
     0078             (            SVECT):00003         SVY     SET     120
                      (           D4.ASM):00375                 SVECT   82,122
E027 F1               (            SVECT):00001                 FCB     ((((82-SVX)/2)&$000F)*16)+(((122-SVY)/2)&$000F)
     0052             (            SVECT):00002         SVX     SET     82
     007A             (            SVECT):00003         SVY     SET     122
                      (           D4.ASM):00376                 SVECT   86,126
E028 22               (            SVECT):00001                 FCB     ((((86-SVX)/2)&$000F)*16)+(((126-SVY)/2)&$000F)
     0056             (            SVECT):00002         SVX     SET     86
     007E             (            SVECT):00003         SVY     SET     126
                      (           D4.ASM):00377                 SVECT   82,122
E029 EE               (            SVECT):00001                 FCB     ((((82-SVX)/2)&$000F)*16)+(((122-SVY)/2)&$000F)
     0052             (            SVECT):00002         SVX     SET     82
     007A             (            SVECT):00003         SVY     SET     122
                      (           D4.ASM):00378                 SVECT   82,134
E02A 06               (            SVECT):00001                 FCB     ((((82-SVX)/2)&$000F)*16)+(((134-SVY)/2)&$000F)
     0052             (            SVECT):00002         SVX     SET     82
     0086             (            SVECT):00003         SVY     SET     134
                      (           D4.ASM):00379                 SVECT   86,130
E02B 2E               (            SVECT):00001                 FCB     ((((86-SVX)/2)&$000F)*16)+(((130-SVY)/2)&$000F)
     0056             (            SVECT):00002         SVX     SET     86
     0082             (            SVECT):00003         SVY     SET     130
                      (           D4.ASM):00380                 SVECT   82,134
E02C E2               (            SVECT):00001                 FCB     ((((82-SVX)/2)&$000F)*16)+(((134-SVY)/2)&$000F)
     0052             (            SVECT):00002         SVX     SET     82
     0086             (            SVECT):00003         SVY     SET     134
                      (           D4.ASM):00381                 SVECT   84,136
E02D 11               (            SVECT):00001                 FCB     ((((84-SVX)/2)&$000F)*16)+(((136-SVY)/2)&$000F)
     0054             (            SVECT):00002         SVX     SET     84
     0088             (            SVECT):00003         SVY     SET     136
                      (           D4.ASM):00382                 SVECT   88,136
E02E 20               (            SVECT):00001                 FCB     ((((88-SVX)/2)&$000F)*16)+(((136-SVY)/2)&$000F)
     0058             (            SVECT):00002         SVX     SET     88
     0088             (            SVECT):00003         SVY     SET     136
                      (           D4.ASM):00383                 SVECT   92,132
E02F 2E               (            SVECT):00001                 FCB     ((((92-SVX)/2)&$000F)*16)+(((132-SVY)/2)&$000F)
     005C             (            SVECT):00002         SVX     SET     92
     0084             (            SVECT):00003         SVY     SET     132
                      (           D4.ASM):00384                 SVECT   96,136
E030 22               (            SVECT):00001                 FCB     ((((96-SVX)/2)&$000F)*16)+(((136-SVY)/2)&$000F)
     0060             (            SVECT):00002         SVX     SET     96
     0088             (            SVECT):00003         SVY     SET     136
                      (           D4.ASM):00385                 SVECT   100,136
E031 20               (            SVECT):00001                 FCB     ((((100-SVX)/2)&$000F)*16)+(((136-SVY)/2)&$000F)
     0064             (            SVECT):00002         SVX     SET     100
     0088             (            SVECT):00003         SVY     SET     136
                      (           D4.ASM):00386                 SVEND
                      (            SVEND):00001                 SVNEW
E032 00               (            SVNEW):00001                 FCB     V$ABS
E033 FE               (            SVEND):00002                 FCB     V$END
                      (           D4.ASM):00387         ;
                      (           D4.ASM):00388         ; End of Viper vector list
                      (           D4.ASM):00389         ;
                      (           D4.ASM):00390         ; * * * * * * * * *
                      (           D4.ASM):00391         ;;;;;        END
                      (    DAGGORATH.ASM):00136                 INCLUDE KSK.ASM          ;Good Use of leftover Bytes
E034 4B534B           (          KSK.ASM):00001                 FCC     'KSK'           ;three more extra bytes!!!
                      (          KSK.ASM):00002         ;;;;;        END
                      (    DAGGORATH.ASM):00137         ;
                      (    DAGGORATH.ASM):00138         ;   End of program
                      (    DAGGORATH.ASM):00139         ;
                      (    DAGGORATH.ASM):00140         ;;;;;        END                                
